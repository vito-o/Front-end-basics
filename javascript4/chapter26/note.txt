第26章 模块

26.3 使用ES6之前的模块加载器

26.3.1 CommonJS

CommonJS规范概述了同步声明依赖的模块定义。这个模块主要用于在服务器端实现模块化代码组织，但也可以
定义在浏览器中使用的模块依赖。CommonJS模块语法不能再浏览器中直接运行

注意：一般任务，Node.js的模块系统使用了CommonJS规范，实际上并不完全正确。Node.js使用了轻微修改
版本的CommonJS，因为Node.js主要再服务器环境下使用，所以不需要考虑网络延迟问题。考虑到以执行，本节
使用Node.js风格的模块定义语法。

CommonJS模块定义需要使用require()定义依赖，而使用exports对象定义自己的公共API。

var moduleB = request('./moduleB')

module.exports = {
  stuff: moduleB.doStuff()
}

moduleA通过使用模块定义的相对路径来指定自己对moduleB的依赖。什么是“模块定义”，以及如何将字符串
解析为模块，完全取决于模块系统的实现。比如再Node.js中，模块标识符可能指向文件，也可能指向包含
index.js文件的目录。

请求模块会加载模块，而把模块赋值给变量是非常常见，但赋值给变量不是必需的。调用require()意味着模块会
原封不动地加载进来
require('./moduleA')

无论一个模块再require()中被引用多少次，模块用于是单例。再下面的例子中，moduleA只会被打印一次。这是
因为无论请求多少次，moduleA只会被加载一次。

var a1 = require('./moduleA')
var a2 = require('./moduleA')

console.log(a1 === a2) //true

模块第一次加载后被缓存，后续加载会取得缓存的模块。模块加载顺序由依赖图决定。

在CommonJS中，模块加载时模块系统指向的同步操作。因此require()可以像下面这样以变成方式嵌入在模块中：

if(loadCondition) {
  require('./moduleA')
}

这里，moduleA只会在loadCondition请求只true时才会加载。这个加载是同步的，因此if()块之前的任何代码
都会在加载moduleA之前指向，而if()块之后的任何代码都会在加载moduleA之后指向。同样，加载顺序规则也
会适用。因此，如果moduleA已经在前面某个地方记载过了，这个条件require()就意味着只暴露moduleA这个
命名空间而已。


26.3.2 异步模块定义

CommonJS以服务器端为目标环境，能够一次性把所有模块都记载到内容，而异步模块定义(AMD, Asynchronous
Module Definition) 的模块定义系统则以浏览器为目标执行环境，这需要考虑网络延迟的问题。AMD的一般
策略是让模块声明自己的依赖，而运行在浏览器中的模块系统会按需获取依赖，并在依赖加载完成后立即执行
依赖他们的模块。

AMD模块实现的核心是用函数包装模块定义。这样可以防止声明全局变量，并允许加载器库控制何时加载模块。
包装函数也便于模块代码的移植，因为包装函数内部的所有模块代码使用的都是原生js结构。包装模块的函数
是全局define的函数，它是由AMD加载器库的实现定义的。

AMD模块可以使用字符串标识符指定自己的依赖，而AMD加载期会在所有依赖模块加载完毕后立即调用模块工厂
函数。

//ID为moduleA的模块定义。moduleA依赖moduleB，
//moduleB会异步加载
define('moduleA', ['moduleB'], function(moduleB) {
  return {
    stuff: moduleB.doStuff()
  }
})

AMD也支持require和exports对象，通过他们可以在AMD模块工厂函数内部定义CommonJS风格的模块。这样可以
像请求模块一样请求他们，但AMD加载器会将他们识别为原生AMD结构，而不是模块定义

define('moduleA', ['require', 'exports'], function(require, exports) {
  var moduleB = require('moduleB')
  exports.stuff = moduleB.doStuff()
})

//动态依赖也是通过这种方式支持的
define('moduleA', ['require'], function(require) {
  if(condition) {
    var moduleB = require('moduleB')
  }
})

26.3.3 通用模块定义

为了统一CommonJS和AMD生态系统，通用模块定义（UMD, Universal Module Definition）规范引用而生。
UMD可以用于创建这两个系统都可以使用的模块代码。本质上，UMD定义的模块会在启动时检测要使用哪种模块
系统，然后进行适当配置，并把所有逻辑包装在一个立即调用的函数表达式（IIFE）中。虽然这种组合并不
完美，但在很多常见下足以实现两个生态的共存。

(function (root, factory) {
  if(typeof define === 'function' && define.amd) {
    //AMD 注册为匿名模块
    define(['moduleB'], factory);
  } else if (typeof module === 'object' && module.exports) {
    //Node 不支持严格CommonJS
    //但可以在Node这样支持module.exports的类CommonJS环境下使用
    module.exports = factory(require('moduleB'))
  } else {
    //浏览器全局上下文（root是window）
    root.returnExports = factory(root, moduleB)
  }
}(this, function (moduleB) {
  //以某种方式使用moduleB

  //将返回值作为模块的导出
  //这个例子返回了一个对象
  //但模块也可以返回函数作为导出值
  return {}
}))

26.4 使用ES6模块

<script type="module">
  //模块代码
</script>

<script type="module" src="path/t/myModule.js"></script>

与传统脚本不同，所有模块都会像<script defer>加载的脚本一样按顺序执行。解析到<script type="module">
标签后会立即下载模块文件，但执行会延迟到文件解析完成。无论对嵌入的模块代码，还是引入的外部模块文件，
都是这样，<script type="module">在页面中出现的顺序就是他们执行的顺序。与<script defer>一样，修改
模块标签的位置，无论是在<head>还是在<body>中，只会影响文件什么时候加载，而不会印象模块什么时候加载。

const foo = 'foo'
export { foo }

export const foo = 'foo'

导出时也可以提供别名

const foo = 'foo'
export { foo as myFoo }

因为ES6命名导出可以将模块作为容器，所有可以在一个模块中声明多个命名导出

ES6模块也支持对导出声明分组，可以同时为部分或全部导出值指定别名：

const foo = 'foo'
const bar = 'bar'
const baz = 'baz'
export { foo, bar as myBar, baz }

默认导出

export default foo;

另外，ES6模块系统会识别作为别名提供的default关键字。此时，虽然对应的值时使用命名语法导出的，实际上
则会成为默认导出：

const foo = 'foo'

//等同于 export default foo;
export { foo as default }

会导致错误的不同形式

//行内默认导出中不能出现变量声明
export default const foo = 'bar'  /error

//只有标识符可以出现在export子句中
export { 123 as foo }             /error

//别名只能在export子句中出现
export const foo = 'foo' as myFoo;/error

注意：什么可以或不可以与export关键字出现在同一行可能很难记住。一般来说，声明、赋值和导出标识符
最好分开。这样就不容易搞错了，同时也可以让export语句集中在一块。


26.4.5 模块导入

import必须出现在模块的顶级
//允许
import ...

//不允许
if( condition ) {
  import ...
}

导入对模块而言是只读的，实际上相当于const声明的变量。

import foo, * as Foo './foo.js'
------------------------------------------

const foo = 'foo', bar = 'bar', baz = 'baz'
export { foo, bar, baz }

import * as Foo from './foo.js

console.log(Foo.foo)

------------------------------------------

import { foo, bar, baz as myBaz } from './foo.js'

console.log(foo)

------------------------------------------

默认导出就好像整个模块就是导出的值一样。可以使用default关键字并提供别名来导入。也可以不是使用
大括号，此时指定的标识符就是默认导出的别名

//等效
import { default as foo } from './foo.js'
import foo from './foo.js'

如果模块同时导出了命名导出和默认导出，则可以在import语句中同时取得他们。可以依次列出特定导出的标识符
来取得，也可以使用*来取得

import foo, { bar, baz } from './foo.js'
import { default as foo, bar, baz } from './foo.js'
import foo, * as Foo './foo.js'

26.4.6 模块转移导出

export * from './foo.js'

export { foo, bar as myBar } from './foo.js'

//外部模块的默认导出可以重用为当前模块的默认导出
export { default } from './foo.js'

export { foo as default } from './foo.js'

26.4.7 工作者模块