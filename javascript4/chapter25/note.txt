第25章 客户端存储

章节内容

·cookie
·浏览器存储API
·IndexedDB


存储事件

当storage对象发生变化时，都会在文档上触发storage事件。
·domain：存储变化对应的域
·key：被设置或删除的键
·newValue：键被设置的新值，若键被删除则为null
·oldValue：键变化之前的值

window.addEventListener('storage', e => console.log(`Storage changed for ${e.domain}`))

对于sessionStorage和localStorage上的任何更改都会触发storage事件，但storage事件不会区分这两者

25.3 IndexedDB

IndexedDB的设计几乎完全是异步的。大多数操作以请求的形式执行，这些请求会异步执行，产生成功的结果或
错误。绝大多数IndexedDB操作要求添加onerror和onsuccess事件处理程序来确定输出。

25.3.1 数据库
IndexedDB是类似于MySQL或web sql Database的数据库，使用对象存储而不是表格保存数据。
IndexedDB数据库就是在一个公共命名空间下的一组对象存储，累死我i与NoSQL风格的实现。

let db,
    request,
    version = 1;
  
request = indexedDB.open('admin', version)
request.onerror = e => console.log(`Field to open : ${e.target.errorCode}`)
request.onsuccess = e => {db = e.target.result}

request.onupgradeneeded = e => {
  db = e.target.result;

  if(db.objectStoreNames.contains('users')){
    db.deleteObjectStore('users')
  }

  db.createObjectStore('users', { keyPath: 'username' })
}


IndexDB不属于关系型数据库（不支持sql查询语句），更接近NoSQL数据库

IndexDB具有以下特点:

1。键值对存储，IndexedDB内部采用对象仓库（object store）存方数据。所有类型的数据都可以直接存入，
包括js对象。对象仓库中，数据以“键值对”的形式存方，每一个数据记录都有对应的主键，

2.异步。IndexedDB操作时不会锁死浏览器，用户依然可以进行其他操作，这与LocalStorage形成对比，后者
的操作是同步的。一部是设计是为了放置大量数据的读写，拖慢网页的表现。

3.支持事物。IndexedDB支持事务（transaction），这意味着一系列操作步骤中，只要有一步失败，整个事务
就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。

4.同源限制 IndexedDB收到同源限制，每一个数据都对应创建它的域名。网页只能访问自身域名下的数据库，而
不能访问跨域的数据库

5.存储空间大IndexedDB的存储空间比LocalStorage大得多，一般来说不少于250MB，甚至没有上限。

6.支持二进制存储。IndexedDB不仅可以存储字符串，还可以存储二进制数据（ArrayBuffer对象和Blob对象）


IndexedDB是一个比较复杂的API，涉及不少概念。他把不同的实体，抽象成一个个对象接口。学习这个API。
就是学习它的各种对象接口。

·数据库：IDBDatabase对象
·对象仓库：IDBObjectStore对象
·索引：IDBIndex对象
·事务：IDBTransaction对象
·操作请求：IDBRequest对象
·指针：IDBCursor对象
·主键集合：IDBKeyRange对象

IndexedDB数据库有版本的概念。同一个时刻，只能有一个版本的数据库存在。如果要修改数据库结构（新增或
删除表、索引或主键），只能通过升级数据库版本来完成。

对象仓库

每个数据库包含若干个对象仓库（object store）。它类似于关系数据库的表格。

数据记录
对象仓库保存的是数据记录。每条记录类似于关系型数据库的行，但是只有主键和数据体两部分。主键用来建立
默认的索引，必须是不同的，否则会报错。主键可以是数据记录里面的一个属性，也可以定义为一个递增的整编
编号。
{id: 1, text: 'foo'}

上面的对象中，id属性可以当作主键

书集体可以是任意数据类型，不限于对象

4.索引

为了加速数据的检索，可以在对象仓库里面，为不同的属性建立索引

5.事务

数据记录的读写和删除，都要通过事务完成。事务对象提供error、abort和complete三个事件，用来监听操作结果

打开数据库

使用IndexedDB的第一步是打开数据库，使用indexedDB.open()方法。

let request = indexedDB.open(databaseName, version)

这个方法接收两个参数，第一个参数是字符串，表示数据库的名字。如果指定的数据库不存在，就会新建数据库
第二个参数是整数，表示数据库的版本好。如果省略，打开已有数据库时，默认为当前版本；新建数据库时默认为1

indexedDB.open()方法返回一个IDBRequest对象。这个对象通过三种事件error、success、upgradeneeded，
处理打开数据库的操作结果。

1.error事件

error表示打开数据库失败
request.onerror = e => {
  console.log('打开数据库报错！')
}

2.success事件

success事件表示成功打开数据库。

request.onsuccess = e => {
  db = request.result;
  console.log('数据库打开成功')
}

这时，通过request对象的result属性拿到数据库对象

3.upgradeneeded事件

如果指定的版本号，大于数据库的实际版本号，就会发生数据库升级事件upgradeneeded.

var db;

request.onupgradeneeded = e => {
  db = e.target.result;
}

这时通过事件对象的target.result属性，拿到数据库实例。

新建数据库

新建数据库于打开数据库时同一个操作。如果指定的数据库不存在，就会新建。不同之处在于，后续的操作主要
在upgradeneeded事件的监听函数里完成，因为这时版本从无到有，所以会触发这个事件。

通常，新建数据库以后，第一件事是新建对象仓库（即新建表）

request.onupgradeneeded = e => {
  db = e.target.result;
  var objectStore = db.createObjectStore('person', { keyPath: 'id' })
}

上面的代码中，数据库新建成功以后，新增一张叫做person的表，主键是id

更好的写法是先判断以下，这张表是否存在，如果不存在再新建

request.onupgradeneeded = e => {
  db = e.target.result;
  var objectStore;
  if(!db.objectStoreNames.contains('person')) {
    objectStore = db.createObjectStore('person', {keyPath: 'id'})
  }
}

主键(key)是默认建立索引的属性。比如，数据记录是{id:1, name: 'zhangsan'}，那么id属性可以作为主键。
主键也可以指定为下一层对象的属性，比如{foo: {bar: 'baz'}}的foo.bar也可以指定为主键。

如果数据记录里面没有适合作为主键的属性，那么可以让IndexedDB自动生成主键

var objectStore = db.createObjectStore(
  'person',
  { autoIncrement: true}
)


双面代码中，指定主键为一个递增的整数

新建对象仓库以后，下一步可以新建索引

request.onupgradeneeded = e = {
  db = e.target.result;
  var objectStore = db.createObjectStore('person', {keyPath: 'id'})
  objectStore.createIndex('name', 'name', {unique:false})
  objectStore.createIndex('email', 'email', {unique: true})
}

上面代码中，ODBObject.createIndex()的三个参数分别为索引名称、索引所在的属性、配置对象（说明该属性
是否包含重复的值）

新增数据

新增数据指的是向对象仓库写入数据记录。这需要通过事务完成

function add(){ 
  var request = db.transaction(['person'], 'readwrite')
    .objectStore('person')
    .add({id:1, name: '张三', age: 24})

  request.onsuccess = e => {
    console.log('数据写入成功')
  }

  request.onerror = e => {
    console.log('数据写入失败')
  }
}

读取数据

读取数据也是通过事务完成

function read() {
  var transaction = db.transaction(['person'])
  var objectStore = transaction.objectStore('person')
  var request = objectStore.get(1)

  request.onerror = e => {
    console.log('事务失败')
  }

  request.onsuccess = e => {
    if(request.result) {
      console.log('name: ' + request.result.name)
      console.log('age: ' + request.result.age)
    } else {
      console.log('未获得数据记录')
    }
  }
}

上面代码中，objectStore.get()方法用于读取数据，参数是主键的值。

遍历数据

遍历数据表格的所有数据，要使用指针对象IDBCursor

function readAll() {
  var objectStore = db.transaction('person').objectStore('person')

  objectStore.openCursor().onsuccess = e => {
    var cursor = e.target.result;

    if(cursor) {
      console.log('id: ' + cursor.key)
      console.log('name: ' + cursor.value.name)
      console.log('id: ' + cursor.value.age)
    } else {
      console.log('没有更多数据了！')
    }
  }
}

上面代码中，新建指针对象的openCursor()方法是一个异步操作，所以要监听success事件

更新数据

更新数据要使用IDBObject.put()方法

function update() {
  var request = db.transaction(['person'], 'readwrite')
    .objectStore('person')
    .put({id:1, name:'lisi', age: 35})

  request.onsuccess = e => {
    console.log('数据更新成功')
  }

  request.onerror = e => {
    console.log('数据更新失败')
  }
}

删除数据

IDBObjectStore.delete()方法用于删除记录

function remove() {
  var request = db.transaction(['person'], 'readwrite')
    .objectStore('person')
    .delete(1)

  request.onsuccess = e => {
    console.log('数据删除成功')
  }
}

使用索引

索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录。如不不建立索引，默认只能搜索
主键（即从主键取值）

鉴定新建表格的适合，对name字段建立了索引

objectStore.createIndex('name', 'name', {unique: false})

现在，就可以从name找到对应的数据记录了

var transaction = db.transaction(['person'], 'readonly')
var store = transaction.objectStore('person')
var index = store.index('name')
var request = index.get('李四

request.onsuccess = e => {
  var result = e.target.result;
  if(result){
    ...
  } else {
    ...
  }
}
