基本引用类型

引用值（或者对象）是某个特定引用类型的实例。在ECMAScript中，引用类型是把数据和功能组织到一起的结构
经常被人错误地称作“类”。虽然从技术上讲javascript是一门面向对象语言，但ECMAScript缺少传统的面向对象
编程语言所具备的某些基本结构，包括类和接口。引用类型有时候也被称为对象定义，因为他们描述了自己的对象
应有的属性和方法。

注意 引用类型虽然有点像类，但跟类并不是一个概念。为避免混淆，本章后面不会使用术语“类”

对象被认为是某个特定引用类型的实例。新对象通过使用new操作符后跟一个构造函数（constructor）来创建。
构造函数就是用来创建新对象的函数，比如下面这行代码：

let now = new Date();

这行代码创建了引用类型date的一个新实例，并将它保存在变量now中。Date()在这里就是构造函数，它负责
创建一个只有默认属性和方法的简单对象。ECMAScript提供了很多像Date这样的原生引用类型，帮助开发者
实现常见的任务。

注意：函数也是引用类型

5.1 Date

ECMAScript的Date类型参考了java早期版本中的java.util.Date。为此，Date类型将日期保存为自协调世界
时（UTC, Universal Time Coordinated）时间1970年1月1日午夜（零时）至今所经过的毫秒数。使用这种
存储格式，Date类型可以精确标识1970年1月1日之前及之后285616年的日期。

要创建日期对象，就是用new操作符来调用Date构造函数：
let now = ew Date();

5.2 RegExp
 
ECMAScript通过RegExp类型支持正则表达式。正则表达式应用类似Perl的简介语法来创建：
let expression = /pattern/flags;

这个正则表达式的pattern(模式)可以是任何简单或负责的正则表达式，包括字符类、限定符、分组、向前查找
和反向引用。每个正则表达式可以带零个或多个flags（标记），用于控制正则表达式的行为。下面给出了表示
匹配模式的标记。
g：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束
i：不区分大小写，表示在查找匹配时忽略pattern和字符串的大小写。
m：多行模式，表示查找到一行文本末尾时会继续查找
y：粘附模式，表示只查找从lastIndex开始及之后的字符串
u：Unicode模式，启用Unicode匹配
s：dotAll模式，表示元字符。匹配任何字符（包括\n或\r）
使用不同模式和标记可以创建出各种正则表达式，

//匹配字符串中的所有'at'
let pattern1 = /at/g;

//匹配第一个bat或者cat,忽略大小写
let pattern2 = /[bc]at/i;

//匹配所有以'at'结尾的三字符组合，忽略大小写
let pattern3 = /.at/gi;

与其他语言中的正则表达式类似，所有元字符在模式中也必须转义，包括：
( ) [ ] { } \ ^ & | ? * + .
元字符在正则表达式中都有一种或多种特殊功能，所以要匹配上面这些字符本身，必须使用反斜杠来转义。

//匹配第一个bat或cat，忽略大小写
let pattern1 = /[bc]at/i;

//匹配第一个[bc]at,忽略大小写
let pattern2 = /\[bc\]at/i;

//匹配所有以at结尾的三字符组合，忽略大小写
let pattern3 = /.at/gi;

//匹配所有.at，忽略大小写
let pattern4 = /\.at/gi;

这里的pattern1匹配bat或cat，不区分大小写。要直接匹配[bc]at，左右中括号必须像pattern2中那样使用
反斜杠转义。在pattern3中，点号表示'at'前面的任意字符都可以匹配。如果像匹配'.at'，那么要像pattern4
中那样对点好进行转义。

前面例子中的正则表达式都是使用字面量形式定义的。正则表达式也可以使用RegExp构造函数来创建，它接收
两个参数：模式字符串和（可选的）标记字符串。任何使用字面量定义的正则表达式也可以通过构造函数来创建
//匹配第一个bat或cat，忽略大小写
let pattern1 = /[bc]at/i

let pattern2 = new RegExp('[bc]at', 'i')

这里pattern1和pattern2是等效的正则表达式。注意，RegExp构造函数的两个参数都是字符串。因为RegExp的模式
参数是字符串，所以在某些情况下需要二次转义。所有元字符都必须二次转义，包括转义字符序列，如\n(\转义后的
字符串是\\，在正则表达式字符串中则要写成\\\\)。下表展示了几个正则表达式的字面量形式，以及使用RegExp构造
函数创建时对应的模式字符串。

      字面量模式                对应的字符串
    /\[bc\]at/                  "\\[bc\\]at"
    /\.at/                      "\\.at"
    /name\/age/                 "name\\/age"
    /\d.\d{1,2}/                "\\d\.\\d{1,2}"
    /\w\\hello\\123/            "\\w\\\\hello\\\\123"

此外，使用RegExp也可以基于已有的正则表达式实例，并可选择性地修改他们的标记
let re1 = /cat/gi
console.log(re1)
let re2 = new RegExp(re1);
console.log(re2)
let re3 = new RegExp(re1, 'i')
console.log(re3)

5.2.1 RegExp 实例属性

每个RegExp实例都有下列属性，提供有关模式的各方面信息
global: 布尔值，表示是否设置了g标记
ignoreCase:布尔值，表示是否设置了i标记
unicode：布尔值，表示是否设置了u标记
sticky：布尔值，表示是否设置了y标记
lastIndex： 整数，表示在源字符串中下一次搜索的开始位置，始终从0开始。
multiline：布尔值，表示是否设置了m标记
dotAll：布尔值，表示是否设置了s标记
source：正则表达式的字面量字符串（不是传给构造函数的模式字符串）没有开头和结尾的斜杠
flags：正则表达式的标记字符串。始终以字面量而非传入构造函数的字符串模式形式返回（每有前后斜杠）

通过这些属性可以全面了解正则表达式的信息，不过实际开发中用得并不多，因为模式声明中包含这些信息
let pattern1 = /\[bc\]at/i;

console.log(pattern1.global); //false
console.log(pattern1.ignoreCase); //true
console.log(pattern1.multiline); //false
console.log(pattern1.lastIndex); //0
console.log(pattern1.source); //'\[bc\]at\'
console.log(pattern1.flags); //i

let pattern2 = new RegExp('\\[bc\\]at', 'i')
console.log(pattern2.global); //false
console.log(pattern2.ignoreCase); //true
console.log(pattern2.multiline); //false
console.log(pattern2.lastIndex); //0
console.log(pattern2.source); //'\[bc\]at\'
console.log(pattern2.flags); //i

注意，虽然第一个模式是通过字面量创建得，第二个模式是通过RegExp构造函数创建得，但两个模式的ource和flags
属性是相同的。source和flags属性返回的是规范化之后可以在字面量中使用的形式

5.2.2 RegExp实例方法

RegExp实例的主要方法是exec()，主要用于配合捕获组使用。这个方法只接受一个参数，即要应用模式的字符串
如果找到了匹配项，则返回包含第一个匹配信息的数组；如果每找到匹配项，则返回null。返回的数组虽然是Array
的实例，担包含两个额外的属性：index和input。index是字符串中匹配模式的起始位置，input是要查找的字符串。
这个数组的第一个元素是匹配整个模式的字符串，其他元素是与表达式中的捕获组匹配的字符串。如果模式中没有
捕获组，则数组只包含一个元素。

let text = 'mom and dad and baby'
let pattern = /mom( and dad( and baby)?)?/gi;
let matches = pattern.exec(text);

//(3) ["mom and dad and baby", " and dad and baby", " and baby", index: 0, input: "mom and dad and baby", groups: undefined]
这个例子中，模式包含两个匹配组：内部的匹配项' and baby'，以及外部' and dad' 或 'and dad and baby'
调用exec()后找到了一个匹配项。因为整个字符串匹配模式，所以matches数组的inde属性就是0.数组的第一个
元素是匹配的整个字符串，第二个元素是匹配第一个捕获组的字符串，第三个元素是匹配第二个捕获组的字符串

如果模式设置了全局标记，则每次调用 exec()方法会返回一个匹配的信息。如果没有设置全局标记，则无论对同一个
字符串调用多少次execc()，也只会返回第一个匹配的信息.

let text = 'cat, bat, sat, fat'
let pattern = /.at/;
let matches = pattern.exec(text);

console.log(matches.index); //0
console.log(matches[0]);    //cat
console.log(pattern.lastIndex); //0

let matches = pattern.exec(text);
console.log(matches.index); //0
console.log(matches[0]);    //cat
console.log(pattern.lastIndex); //0

上面例子中的模式没有设置全局标记，因此调用exec()只返回第一个匹配项('cat')。lastIndex在非全局模式
下始终不变。

如果在这个模式上设置了g标记，则每次调用exec()都会在字符串中项前搜索下一个匹配项，如下所示；
let text = 'cat, bat, sat, fat'
let pattern = /.at/g;
let matches = pattern.exec(text);
//["cat", index: 0, input: "cat, bat, sat, fat", groups: undefined]
console.log(matches.index); //0
console.log(matches[0]);    //cat
console.log(pattern.lastIndex); //3

let matches1 = pattern.exec(text);
console.log(matches1.index); //5
console.log(matches1[0]);    //bat
console.log(pattern.lastIndex); //8


这个模式设置了全局标记，因此每次调用exec()都会返回字符串中的洗一个匹配项，直到搜索到字符串末尾。
注意面模式的lastIndex属性每次都会变化。在全局匹配模式下，每次调用exec()都会更新lastIndex值，以
反映上次匹配的最后一个字符的索引。

如果模式设置了粘附标记y，则每次调用exec()就只会在lastIndex的位置上寻找匹配项。粘附标记覆盖全局标记
let text = 'cat, bat, sat, fat';
let pattern = /.at/y;

let matches = pattern.exec(text);
console.log(matches.index)    //0
console.log(matches[0])       //cat
console.log(pattern.lastIndex)//3

//以索引3对应的字符开头找不到匹配项，因此exec()返回null
//exec()没有找到匹配项，于是将lastIndex设置为0
matches = pattern.exec(text);
console.log(matches)            //null
console.log(pattern.lastIndex)  //0

pattern.lastIndex = 5;
matches = pattern.exec(text); 
console.log(matches.index)//5
console.log(matches[0])   //bat
console.log(pattern.lastIndex) //8


正则表达式的另一个方法是test()，接收一个字符串参数。如果输入的文本与模式匹配，则参数返回true，
否则返回false。这个方法只适用于只想测试模式是否匹配，而不需要实际匹配内容的情况。

test()经常用在if语句中；
let text = '000-00-0000'
let pattern = /\d{3}-\d{2}-\d{4}/
if(pattern.test(text)){
  console.log('the pattern was matched.')
}

无论正则表达式是怎么创建的，继承的方法toLocaleString()和toString()都返回正则表达式的字面量表示.
let pattern = new RegExp('\\[bc\\]at', 'gi')
console.log(pattern.toString())       //  /\[bc\]at/gi
console.log(pattern.toLocaleString()) //  /\[bc\]at/gi
这里的模式是通过RegExp构造函数创建的，但toLocaleString()和toString()返回的都是其字面量的形式。

注意： 正则表达式的valueOf()方法返回正则表达式本身。

5.2.3 RegExp构造函数属性

RegExp构造函数本身也有几个属性。（在其他语言中，这种属性被称为静态属性）这些属性适用于作用域中的
所有正则表达式。而且会根据最后执行的正则表达式操作而变化。这些属性还有一个特点，就是可以通过两种
不同的方式访问他们。换句话说，每个属性都有一个全名和一个简写。下表列出了RegExp构造函数的属性。

全名        简写          说明

input       $_         最后搜索的字符串（非标准特性）
lastMatch   $&         最后匹配的文本
lastParen   $+         最后匹配的捕获组(非标准特性)
leftContext $`         input字符串中出现在lastMatch前面的文本
rightContent$'         input字符串中出现在lastMatch后面的文本

通过这些属性可以提取出与exec()和test()执行的操作相关的信息。

let text = 'this has been a short summer'
let pattern = /(.)hort/g;

if(pattern.test(text)){
  console.log(RegExp.input)         //this has been a short summer
  console.log(RegExp.leftContext)   //this has been a
  console.log(RegExp.rightContext)  // summer
  console.log(RegExp.lastMatch)     //short
  console.log(RegExp.lastParen)     //s
}
以上代码创建了一个模式，用于搜索任何后面跟“hort”的字符，并把第一个字符放在了捕获组中。不同属性包含
的内容如下：
·input属性中包含原始的字符串
·leftContext属性包含原始字符串中“short”之前的内容，rightContext属性包含"short"之后的内容。
·lastMatch属性包含匹配整个正则表达式的上一个字符串，即“short”
·lastParen属性包含捕获组的上一次匹配，即"s"

这些属性名也可以替换成简写形式，只不过要使用中括号语法来访问，因为大多数简写形式都不是和法的ECMAScript
标识符：
let text = 'this has been a short summer';
let pattern = /(.)hort/g;

if(pattern.test(text)){
  console.log(RegExp.$_)      //this has been a short summer
  console.log(RegExp["$`"])   //this has been a
  console.log(RegExp["$'"])   //summer  
  console.log(RegExp["$&"])   //short
  console.log(RegExp["$+"])   //s
}

RegExp还有其他几个构造函数属性，可以存储最多9个捕获组的匹配项。这些属性通过RegExp.$1~RegExp.$9
来访问，分别包含第1~9个捕获组的匹配项。在调用exec()或test()时，这些属性就会被填充，然后就可以像
下面这样使用他们
let text = 'this has been a short summer'
let pattern = /(..)or(.)/g;
if(pattern.test(text)){
  console.log(RegExp.$1)  //sh
  console.log(RegExp.$2)  //t
}

这个例子中，模式包含两个捕获组。调用test()搜索字符串之后，因为找到了匹配项所以返回true，而且可以
打印出通过RegExp构造函数的$1和$2属性取得的两个捕获组匹配的内容
注意： RegExp构造函数的所有属性都没有任何web标准出处，因此不要在生成环境中使用他们。

5.2.4 模式局限

算然ECMAScript对正则表达式的支持有了长的进步，但仍然缺少Perl语言中的一些高级特性。

5.3 原始值的包装类

为了方便操作原始值，ECMAScript提供了3中特殊的引用类型：Boolean、Number和String。
这些类型具有本章介绍的其他引用类型一样的特点，但也具有与各自原始类型对应的特殊行为。每当用到某个原始值
的方法或属性时，后台都会创建一个相应原始包装类型的对象，从而暴露出操作原始值的各种方法。

let s1 = "sp,e text"
let s2 = s1.substring(2)

在这里，s1是一个包含字符串的变量，它是一个原始值。第二行紧接着在s1上调用了substring()方法，并把
结果保存在s2中。我们知道，原始值本身不是对象，因此逻辑上不应该有方法。而实际上这个例子又确实按照
于其运行了。这是因为后台进行了很多处理，从而实现了上述操作。具体来说，当第二行访问s1时，是以读模式
访问的，也就是要从内存中读取变量保存的值。在以读模式访问字符串值得任何时候，后台都会执行以下3步：
1.创建一个String类型得实例
2.调用实例上得特定方法
3.销毁实例
可以把这3步想象成执行了如下3行ECMASCript代码
let s1 = new String('some text')
let s2 = s1.substring(2)
s1 = null;

这种行为可以让原始值拥有对象的行为。对布尔值和数值而言，以上3步也会在后台发生，只不过使用得是Boolean
和Number包装类而已。

引用类型与原始值包装类型的主要区别在于对象的生命周期。在通过new实例化引用类型后，得到的实例会在
离开作用域时被销毁，而自动创建的原始值包装对象则只存在于访问它的那行代码执行期间。这意味着不能
在运行时给原始值添加属性和方法。比如例子
let s1 = 'some text'
s1.color = 'red'
console.log(s1.color) //undefined

这里的第二行代码尝试给字符串s1添加了一个color属性。可是，第三行代码访问color属性时，它却不见了。
原因就是第二行代码运行时会临时创建一个string对象，而当第三行代码执行时，这个对象已经被销毁了。实际上
第三行代码在这里创建了自己的string对象，但这个对象没有color属性。

可以显式地使用Boolean、number和string构造函数创建原始值包装对象。不过应该在确实必要时在这么做，
否则容易让开发者疑惑，分不清他们到底是原始值还是引用值。在原始值包装类型的实例上调用typeof会返回
object，所有原始值包装对象都会转换为布尔值true。
另外，Object构造函数作为一个工厂方法，能够根据传入值的类型返回相应原始值包装类型的实例

let obj = new Object('some text');
console.log(obj instanceof String)  //true

如果传给Object的是字符串，则会创建一个String实例。如果是数值，则会创建Number的实例。布尔值则会
得到Boolean的实例。
注意：使用new调用原始值包装类型的构造函数，与调用同名的转型函数并不一样。
let value = '25'
let number = Number(value)
console.log(typeof number)      //number
let obj = new Number(value)
console.log(typeof obj)         //object

在这个例子中，变量number中保存的是一个值为25的原始数值，而变量obj中保存的是一个Number的实例。
虽然不推荐显式创建原始值包装类型的实例，但他们对于操作原始值的功能是很重要的。每个原始值包装
类型都有相应的一套方法来方便数据操作。

5.3.1 Boolean

Boolean是对应布尔值的引用类型。要创建一个Boolean对象，就是用Boolean构造函数并传入true或false，
如下所示：
let booleanObject = new Boolean(true)

Boolean的实例会重写valueOf()方法，返回一个原始值true或false。toString()方法被调用时也会被覆盖，
返回字符串“true”或“false”。不过，Boolean对象在ECMAScript中用的很少。不仅如此，他们还容易引起误会
尤其时在布尔表达式中使用Boolean对象时，
let falseObject = new Boolean(false)
let result = falseObject && true
console.log(result) //true

let falseValue = false;
result = falseValue && true;
console.log(result) //false

在这段代码中，我们创建一个值为false的Boolean对象。然后，在一个布尔表达式中通过&&操作将这个对象与
一个原始值true组合起来。在布尔算数中，false && true等于false。可是，这个表达式对于falseObject
对象而不是对它表示的值false求值。前面刚刚说过，所有对象在布尔表达式中都可以自动转换为true，因此
falseObject在这个表达式例实际上表示一个true值。那么true && true 当然时true。

除此之外，原始值和引用值（Boolean对象）还有几个区别。首先，typeof操作符对原始值返回“boolean”，但
对引用值返回“object”。同样，Boolean对象是Boolean类型的实例，在使用instanceof操作符时返回true，
但对原始值则返回false，如下所示：
console.log(typeof falseObject)             //object 
console.log(typeof falseValue)              //boolean
console.log(falseObject instanceof Boolean) //true
console.log(falseValue instanceof Boolean)  //false

理解原始布尔值和Boolean对象之间的区别非常重要，强烈建议永远不要使用后者。

5.3.2 Number

Number是对应数值的引用类型。要创建一个Number对象，就是用Number构造函数并传入数值，例如：
let numberObject = new Number(10)

与Boolean类型一样，Number类型重写了valueOf(), toLocaleString()和toString()方法。valueOf()
方法返回Number对象表示的原始数值，另外两个方法返回数值字符串。toString()方法可选择的接收一个表示
基数的参数，并返回相应基数形式的数值字符串
let num = 10;
console.log(num.toString())     //10
console.log(num.toString(2))    //1010
console.log(num.toString(8))    //12
console.log(num.toString(10))   //10
console.log(num.toString(16))   //a
let num1 = new Number(10)

除了继承的方法，Number类型还提供了几个用于将数值格式转换为字符串的方法。
toFixed()方法返回包含指定小数点位数的数值字符串，如：
let num = 10
console.log(num.toFixed(2))   //10.00  是字符串

这里的toFied()方法接收了参数2，表示返回的数值字符串要包含两位小数。结果返回值为“10.00”，小数
位填充了0.如果数值本身的小数位超过了参数指定的位数，则四舍五入到最接近的小数位：
let num = 10.005
console.log(num.toFixed(2)) //'10.01'

toFixed()自动舍入的特点可以用于处理货币。不过要注意的是，多个浮点数值的计算不一定得到精确的结果
比如,0.1 + 0.2 = 0.300000000000004

注意： toFixed()方法可以表示有0~20个小数位的数值。某些浏览器可能支持更大的范围，但这是通常被支持
的范围。

另一个用于格式化数值的方法是toExponential()，返回以科学计数法（也称为指数计数法）表示的数值字符串
与toFixed()一样，toExponential()也接收一个参数，表示结果中小数的位数
let num = 10;
console.log(num.toExponential(1))   //'1.0e+1'

一般来说，这么小的数不用表示位科学计数法形式。如果项得到数值最适合的形式，那么可以使用toPrecision()
let num = 99;
console.log(num.toPrecision(1)) //1e+2
console.log(num.toPrecision(2)) //99
console.log(num.toPrecision(3)) //99.0

isInteger()方法与安全整数
ES6新增了Number.isInteger()方法，用于辨别一个数值是否存为整数。有时候，小数位的0可能会让人误认为
是一个浮点数：
console.log(Number.isInteger(1));     //true
console.log(Number.isInteger(1.00));  //true
console.log(Number.isInteger(1.01));  //false

IEEE754数值格式有一个特殊的数值范围，在这个范围内二进制值可以表示一个整数值。这个数值范围从
Number.MIN_SAFE_INTEGER(-2^53+1)到Number.MAX_SAFE_INTEGER(2^53-1)。对超出这个范围的数值
即使尝试保存位整数，IEEE754编码格式也意味着二进制值可能会表示一个完全不同的数值。为了鉴别整数
是否在这个范围，可以使用Number.isSafeInteger()方法：

console.log(Number.isSafeInteger(-1 * (2 ** 53)));      //false
console.log(Number.isSafeInteger(-1 * (2 ** 53) + 1));  //true

5.3.3 String

String是对应字符串的引用类型。要创建一个String对象，使用String构造函数并传入一个数值，如下例所示：
let stringObject = new sTRING('hello world');

String对象的方法可以在所有字符串原始值上调用。3个继承的方法valueOf()、toLocaleString()和toString()
都返回对象的原始字符串值。

每个String对象都有一个length属性，表示字符串中字符的数量。
let stringValue = 'hello world';
console.log(stringValue.length) //11

这个例子输出了字符串'hello world'中包含的字符数量：11.注意字符串中包含双字节符（而不是单字节的ASCII
字符），也仍然会按单字符来计算。
string类型提供了很多方法来解析和操作字符串。

1.javascript字符

javascript字符串由16位码元(code unit)组成。对多字符来说，每16位码元对应一个字符。换句话说，字符串
的length属性表示字符串包含多少16位码元：
let message = 'abcde'
console.log(message.length) //5

此外，charAt()方法返回给定索引位置的字符，由传给方法的整数参数指定。具体来说，这个方法查找指定索引
位置的16位码元，并返回该码对应的字符

let message = 'abcde'
console.log(message.charAt(2))      //c

javascript字符串使用了两种Unicode编码混合的策略：UCS-2和UTF-16。对于可以采用16位编码的字符
(U+0000~U+FFFF)，这两种编码实际上是一样的。

注意：要深入了解关于字符串编码的内容

使用charCodeAt()方法可以查看指定码元的字符编码。这个方法返回指定索引位置的码元值，索引以整数指定。
let message = 'abcde'
console.log(message.charCodeAt(2))    //99

console.log(99 === 0x63)              //true

fromCharCode()方法用于根据给定的UTF-16码元创建字符串中的字符。这个方法可以接收任意多个数值，
并返回将所有数值对应的字符拼接起来的字符串

//Unicode 'Latin small letter A'的编码是U+0061
//Unicode 'Latin small letter B'的编码是U+0062

console.log(String.fromCharCode(0x61, 0x62, 0x63, 0x64, 0x65))    //'abcde'
console.log(String.fromCharCode(97, 98, 99, 100, 101))            //'abcde'

对于U+0000~U+FFFF范围内的字符，length、charAt()、charCodeAt()和fromCharCode()返回的结果都跟预期
是一样的。这是因为在这个范围内，每个字符都是用16位表示的，而这几个方法也都是基于16位码元完成操作。
只要字符编码大小与码元大小一一对应，这些方法就能如期工作。

这个对应关系在扩展到Unicode增补字符平面是就不成立了。问题很简单，即16未只能唯一标识65536个字符。
着对于大多数语言字符集是足够了，在Unicode中称为基本多语言平面(BMP)。为了标识更多的字符，Unicode
采用了一个策略，即每个字符使用另外16位去选择一个增补平面。这种每个字符使用两个16位码元的策略称为
代理对。

在涉及增补平面的字符时，前面讨论的字符串方法就会出现问题。比如，下面的例子中 使用了一个笑脸表情符
号，也就是一个使用代理对编码的字符：
//0x1F60A === 128522
let message = 'ab😊de';

console.log(message.length)       //6  
console.log(message.charAt(1))    //b
console.log(message.charAt(2))    //<?>
console.log(message.charAt(3))    //<?>
console.log(message.charAt(4))    //d

console.log(message.charCodeAt(1)); //98
console.log(message.charCodeAt(2)); //55357
console.log(message.charCodeAt(3)); //56842
console.log(message.charCodeAt(4)); //100

console.log(String.fromCodePoint(0x1F60A))    //😊
console.log(String.fromCharCode(97, 98, 55357, 56842, 100, 101))

这些方法仍然将16位码元当作一个字符，事实上索引2和索引3对于的码元应该被看成一个代理对，只对应一个字符
fromCharCode()方法仍然返回正确的结果，因为它实际上是基于提供的二进制表示直接组合成字符串。浏览器
可以正确解析代理对（由两个码元构成），并正确地将其识别为一个Unicode笑脸字符。

为正确解析既包含码元字符又包含代理对字符的字符串，可以使用codePointAt()来代替charCodeAt()。跟使用
charCodeAt()时类似，codePointAt()接收16位码元的索引并返回该索引位置上的码点。
码点是Unicode中一个字符的完整标识。比如，“c”的码点是0x0063，而😊的码点是0x1F60A。码点可能是16位，
也可能是32位，而codePointAt()方法可以从指定码元位置识别完整的码点。

let message = 'ab😊de';

console.log(message.codePointAt(1))
console.log(message.codePointAt(2))
console.log(message.codePointAt(3))
console.log(message.codePointAt(4))

2. normalize()方法

3.字符串操作方法

concat()，将一个或多个字符串拼接成新字符串

let stringValue = 'hello '
let result = stringValue.concat('world')
console.log(result)
console.log(stringValue)

concat可以一次性拼接多个字符串，

但更常用的方法是使用加号操作符(+)。大多数情况下，(+)更方便。


ECMAScript6  ， startsWith(), endsWith(), includes()

字符串迭代与解构
字符串的原型上暴露了一个@@iterator方法，标识可以迭代字符串的每个字符。可以项下面的这样使用迭代器：
let message = 'abc'
let stringIterator = message[Symbol.iterator]()

console.log(stringIterator.next())  //{value: "a", done: false}
console.log(stringIterator.next())  //{value: "b", done: false}
console.log(stringIterator.next())  //{value: "c", done: false}
console.log(stringIterator.next())  //{value: undefined, done: true}

在for-of循环中可以通过这个迭代器按序访问每个字符：
for(const c of 'abcde'){
  console.log(c)
}
//a
//b
//c
//d
//e

有了这个迭代器之后，字符串就可以通过解构操作符来解构了。比如，可以更方便地把字符串分割位字符数组：
let message = 'abcde'
console.log([...message])   //(5) ["a", "b", "c", "d", "e"]

字符串模式匹配方法
let text = 'cat, bat, sat, fat'
let pattern = /.at/

let matches = text.match(pattern)
//["cat", index: 0, input: "cat, bat, sat, fat", groups: undefined]


5.4 单例内置对象

ECMAS-262对内置对象的定义是“任何由ECMAScript实现提供、与宿主环境无关，并在ECMAScript程序开始执行
时就存在的对象”这就意味着，开发者不用显式地实例化内置对象，因为他们已经实例化好了。前面我们已经接触
了大部分内置对象，包括object、Array和String。本节介绍ECMA-262定义的另外两个单例内置对象：global
和Math。

5.4.1 Global
Global对象是ECMAScript中最特别的对象，因为代码不会显式地访问它。ECMA-262规定Global对象为一种兜底
对象，它所针对的是不属于任何对象的属性和方法。事实上，不尊在全局变量或全局函数这种东西。在全局作用域
中定义的变量和函数都会变成Global对象的属性。本书前面介绍的函数，包括isNaN()、isFinite()、parseInt()
和parseFloat(),实际上都是Global对象的方法。除了这些，Global对象上还有另外一些方法。

1.URL编码方法

encodeURI()和encodeURIComponent()方法用于编码统一资源标识符(URI)，以便传给浏览器。有效的URI不能
包含某些字符，比如空格。使用URI编码方法来编码URI可以让浏览器能够理解他们，同时又以特殊的UTF-8编码
替换掉所有无效字符

encodeURI()方法用于对整个URI进行编码，比如“www.wrox.com/illegal value.js”而encodeURIComponent()
方法用于编码URI中单独的组件，比如前面URL中的“illegal value.js”

这两个方法的主要区别是，encodeURI()不会编码属于URL组件的特殊字符，比如冒号、斜杠、问好、井号，
而encodeURIComponent()会编码它发现的所有非标准字符
例：
let uri = "http://www.wrox.com/illegal value.js#start"

console.log(encodeURI(uri))
//http://www.wrox.com/illegal%20value.js#start

console.log(encodeURIComponent(uri))
//http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.js%23start

这里使用encodeURI()编码后，除了空格被替换为%20 之外，没有任何变化，而encodeURIComponent()方法
将所有非字母字符都替换成了相应的编码形式。这就是使用encodeURI()编码整个URI，但只使用encodeURIComponent()
编码哪些会追加到已有uri后面的字符串的原因

注意： 一搬来说，使用encodeURIComponent()应该比使用encodeURI()的频率更高，这是因为编码查询字符串
参数比编码基准URI的次数更多。

与encodeURI()和encodeURIComponent()相对的是decodeURI()和decodeURIComponent()。decodeURI()
值对使用encodeURI()编码过的字符解码。例如，%20会被替换为空格，但%23不会被替换为井号(#),因为井号
不是由encodeURI()替换的。类似地，decodeURIComponent()编码所有被encodeURIComponent()编码的字符
基本上就是解码所有特殊值。

let uri = "http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.js%23start";

console.log(decodeURI(uri))
//http%3A%2F%2Fwww.wrox.com%2Fillegal value.js%23start

console.log(decodeURIComponent(uri))
//http://www.wrox.com/illegal value.js#start

这里uri变量中包含一个使用encodeURIComponent()编码过的字符串。首先输出的是使用decodeURI()解码的
结果，可以看到只用空格替换了%20.ranhou shi shiyong decodeURIComponent()解码的结果，其中替换了
所有特殊字符，并输出了没有包含任何转义的字符串（这个字符串不是有效的URL）

2.eval()方法

最后一个方法可能是整个ECMAScript语言中最强大的了，它就是eval()。这个方法就是一个完整的ECMAScript
解释器，它接收一个参数，即一个要执行的ECMAScript字符串。
例：
eval('console.log("hi")')

当解释器发现eval()调用时，会将参数解释为实际的ECMAScript语句，然后将其插入到该位置。通过eval()
执行的代码属于该调用所在上下文，被执行的代码与该上下文拥有相同的作用域。这意味着定义在包含上下文
中的变量可以在eval()调用内部被引用，比如下面这个例子：
let msg = 'hello world'
eval('console.log(msg)')

这里，变量msg是在eval()调用的外部上下文中定义的，而console.log()显式了文本“hello world”。这是因为
第二行代码被替换成一行正在的函数调用代码。类似地，可以在eval()内部定义一个函数或变量，然后再外部代码
中引用，如下
eval('function sayHi(){console.log('hi')}')
sayHi();

这里，函数sayHi()是再eval()内部定义的。因为该调用会被替换为真正的函数定义，所以才可能再下一行代码
中调用sayHi()。对于变量也是一样的。

eval("let msg = 'hello world'")
console.log(msg)
通过eval()定义的任何变量和函数都不会被提升，这是因为再解析代码的时候，他们是被包含再一个字符串中的。
他们只是再eval()执行的时候才被创建。

在严格模式下，在eval()内部创建的变量和函数无法被外部访问。换句话说，最后两个例子会报错。同样在严格模式
下，赋值给eval也会导致错误：
"use strict"
eval = 'hi'

3. Global对象属性

Global对象由很多属性，其中一些我们已经提到过了。项undefined、NaN和Infinity等特殊值都是Global对象
的属性。此外，所有原生引用类型构造函数，比如object和function，也都是global对象的属性。

4.window对象

虽然ECMA-262没有规定直接访问Global对象的方式，但浏览器将window对象实现为Global对象的代理。因此，所有
全局作用域中声明的变量和函数都变成了window的属性。
var color = 'red'
function sayColor(){
  console.log(window.color)
}

window.sayColor() //red

这里定义了一个名为color的全局变量和一个名为sayColor()的全局函数。在sayColor()内部，通过window.color
访问了color变量，说明全局变量变成了window的属性。接着，由通过window对象直接调用了window.sayColor()
函数，从而输出字符串
注意：window对象在javascript中远不止实现了ECMAScript的Global对象那么简单。

另一种获取Global对象的方式是使用如下的代码：
let global = function(){
  return this;
}();

这段代码创建一个立即调用的函数表达式，返回了this的值。如前所述，当一个函数在没有明确（通过成为某个对象
的方法，或通过call()/apply()）指定this值得情况下执行时，this值定于Global对象。因此，调用一个简单
返回this的函数是在任何执行上下文中获取Global对象的通用方式。

5.4.2 Math

5.5 小结

javascript中的对象称为引用值，集中内置的引用类型可用于创建特定类型的对像。
·引用值与传统面向对象编程语言中的类相似，但实现不同。
·Date类型特工关于日期和时间的信息，包括当前日期、时间及相关计算
·RegExp类型是ECMAScript支持正则表达式的接口，提供了大多数基础和部分高级正则表达式功能。
javascript比较独特的一点是，函数实际上是Function类型的实例，也就是说函数也是对象。因为函数也是对象，
所以函数也有方法，可用用于增强其能力

由于原始值包装类型的存在，javascript中的原始值可以被当成对象来使用。由3中原始值包装类型：Boolean、
Number和String。他们都具备如下特点。

·每种包装类型都映射到同名的原始类型
·以读模式访问原始值时，后台会实例化一个原始值包装类型的对象，借助这个对象可用操作相应的数据。
·涉及原始值的语句执行完毕后，包装对象就会被销毁。

当代码开始执行时，全局上下文中会存在两个内置对象：Global和Math。其中，Global对象在大多数ECMAScript
实现中无法直接访问。不过，浏览器将其实现为window对象。所有全局对象和函数都是Global对象的属性。
Math对象包含辅助完成复杂计算的属性和方法。