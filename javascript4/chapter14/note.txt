第14章 DOM

·理解文档对象模型（DOM）的构成
·节点类型
·浏览器兼容性
·MutationObserver

文档对象模型：是HTML和XML文档的编程接口

14.1 节点层级

DOM中总共有12中节点类型

14.1.1 Node类型

DOM Level 1 描述了名为Node的接口，这个接口是所有DOM节点类型都必须实现的。Node接口在js中
被实现为Node类型，所有节点类型都继承Node类型，因此所有类型都共享相同的基本属性和方法。

每个节点都有nodeType属性，表示该节点的类型。节点类型由定义在Node类型上的12个数值常量表示：

Node.ELEMENT_NODE(1)
Node.ATTRIBUTE_NODE(2)
Node.TEXT_NODE(3)
Node.CDATA_SECTION_NODE(4)
Node.ENTITY_REFERENCE_NODE(5)
Node.ENTITY_NODE(6)
Node.PROCESSING_INSTRUCTION_NODE(7)
Node.COMMENT_NODE(8)
Node.DOCUMENT_NODE(9)
Node.DOCUMENT_TYPE_NODE(10)
Node.DOCUMENT_FRAGMENT_NODE(11)
Node.NOTATION_NODE(12)

节点类型可通过与这些常量比较来确定
if(someNode.nodeType == Node.ELEMENT_NODE){
  ...
}

两者相等，意味着someNode是一个元素节点。

浏览器并不支持所有节点类型。开发者最常用到的是元素节点和文本节点

1.nodeName与nodeValue

nodeName与nodeValue保存着有关系欸但的信息。这两个属性的值完全取决于节点类型。在使用这两个属性前，
最好先检测节点类型
if(someNode.nodeType == 1){
  value = someNode.nodeName;  
}
这个例子中，先检查了是不是元素，如果是元素就将其nodeName的值赋给一个变量。

2.节点关系

文档中的所有节点都与其他节点有关系。这些关系可以形容为家族关系，相当于把文档树比作家谱。

每个节点都有一个childNodes属性，其中包含一个NodeList的实例。NodeList是一个类数组对象，用于存储
可以按位置存取的有序节点。注意，NodeList并不是Array的实例。NodeList是实时的活动对象，而不是第一次
访问时获得内容的快照。

let firstChild = someNode.childNodes[0];
let secondChild = someNode.childNodes.item(1)
let count = someNode.childNodes.length;

每个节点都有一个parentNode属性，指向其DOM树中的父元素。childNodes中的所有节点都有同一个父元素，
因此他们的parentNode属性都指向同一个节点。

使用previousSibling和nextSibling可以在这个列表的节点间导航。

父节点和它的第一个及最后一个子节点也有专门属性：firstChild和lastChild分别指向childNodes中的第一个
和最后一个子节点。

有一个遍历的方法是hasChildNodes()，这个方法如果返回true则说明节点有一个或多个子节点。

所有节点共享的关系。ownerDocument属性是一个指向代表整个文档的文档节点的指针。

dom.ownerDocument

注意：虽然所有节点类型都继承了Node，但并非所有节点都有字节点

3.操纵节点

appendChild()   列表末尾添加节点。

如果把文档中已经存在的节点传给appendChild()，则这个节点会从之前的位置被转移到新位置。
即使DOM树通过各种关系指针维系，一个节点也不会在文档中同时出现两个或更多个地方。

insertBefore()  把节点放到childNodes中的特定位置而不是末尾
//参数1.要插入的节点，2.参照节点
//插入的节点会变成参照节点的前一个同胞节点，并被返回。参照节点是null，则insertBefore()于与appendChild()效果相同

replaceChild()
//参数1.要插入的节点，2.替换的节点

removeChild()   要移除的节点


4.其他方法

所有节点还共享了两个方法。第一个是cloneNode(),会返回与调用它的节点一模一样的节点。

cloneNode(boolean)    表示是否深复制（即赋值节点及其整个子DOM树）。


注意：cloneNode()方法不会复制添加到DOM节点的js属性，比如事件处理程序。这个方法值复制HTML属性，
以及可选地复制子节点。除此之外则一概不会复制。


normalize()
这个方法唯一的任务就是处理文档子树中的文本节点。由于解析器实现的差异或DOM操作等原因，可能会出现
并不包含文本的文本节点，或文本节点之间互为同胞关系。在节点上调用normalize()方法会检测 这个节点
的所有后代，从中搜索上述两种情形。如果发现空文本节点，则将其删除；如果跟两个同胞节点是相邻的，则
将其合并为一个文本节点。


14.1.2 Document类型

Document类型是js中表示文档节点的类型。在浏览器中，文档对象document是HTMLDocument的实例（HTML
Document继承Document），表示整个HTML页面。document是window对象的属性，因此是一个全局对象。
Document类型的节点有以下特征：
·nodeType等于9
·nodeName值为'#document'
·nodeValue值为null
·parentNode值为null
·子节点可以是DocumentType(最多一个)、Element（最多一个）、ProcessingInstruction或Comment类型。

document类型可以表示HTML页面或其他XML文档，但最常用的还是通过HTMLDocument的实例取得document对象。
document对象可用于获取关于页面的信息以及操纵其他外观和底层结构。

1.文档子节点

Document节点的子节点可以是DocumentType、Element、ProcessingInstruction或Comment
提供了两个访问子节点的快捷方式
1.documentElement属性，始终指向HTML页面中的<html>元素。
document.documentElement

2.document.childNodes中始终又<html>元素
document.childNodes[0]

作为HTMLDocument的实例，document对象还有一个body属性，直接指向<body>元素
因为是开发者使用做多的元素，所以js代码中经常可以看见document.body


Document类型另一种可能的子节点是DocumentType。<!doctype>标签是亡党中独立的部分，其信息可以通过
doctype属性（在浏览器中是document.doctype）来访问

另外，严格来讲出现在<html>元素外面的注释也是文档的子节点，他们的类型是Comment。不过，由于浏览器
实现不同，这些注释不一定能把识别，或者表现可能不一致。

<!-- 第一条注释 -->
<html>
  <body></body>
</html>
<!-- 第二条注释 -->

2.文档信息

document作为HTMLDocument的实例，还有一些标准Document对象上所没有的属性。这些属性提供浏览器所加载
网页的信息。其中第一条属性是title。
document.title = 'xxxx'

//取得完整的URL
document.URL

//取得域名
document.domain

//取得来源
document.referrer

因为跨域同学存在安全性，所以不同子域的页面间无法通过js同学，此时，在每个页面把document.domain设置
为相同的值，这些页面就可也访问对方的js对象了。

一个加载自www.wrox.com
一个内嵌窗格加载自p2p.wrox.com
两个页面得document.domain包含不同得字符串，内部和外部页面相互不能访问对方得js对象。如果把每个页面
得document.domain设置为wrox.com，那这两个页面之间就可以通信了。

一旦设置之后，重新再设置就会出错

3.定位元素

document.getElementById()
document.getElementsByTagName()

//两者的结果都是实时的

let imgs = document.getElementsByTagName('img') 这里把返回的HTMLCollection对象保存在了imgs中
可以使用item()方法从HTMLCollection取得特定的元素。

HTMLCollection对象还有个一个额外的方法namedItem()，可以通过标签的name属性取得某一项的引用
<img src="myimage.gif" name="myImage">

let myImage = imgs.namedItem('myImage');

也可以
let myImage = imgs['myImage'];
对HTMLCollection对象而言，中括号既可以接收数值索引，也可以接收字符串索引，而在后台，数值索引会
调用item(),字符串索引会调用namedItem()


//返回给定name属性的所有元素
document.getElementsByName()      //常用于单选按钮
该方法也返回HTMLCollection实例。


4.特殊集合

document对象还暴露了几个特殊集合，这些集合也都是HTMLCollection的实例。这些集合是访问文档中公共部分
的快捷方式，

·document.anchors 包含文档中所有带name属性的<a>元素。
·document.applets 包含文档中所有<applet>元素。
·document.forms 包含文档中所有<form>元素
·document.links 包含文档中所有带href属性的<a>元素

5.DOM 兼容性检测

由于DOM有多个Level和多个部分，因此确定浏览器实现了DOM的哪些部分是很有必要的。
document.implementation属性是一个对象，其中提供了与浏览器DOM实现相关的信息和能力。

DOM Level 1 在document.implementation上之定义了一个方法，即hasFeature()
hasFeature()接收两个参数：特性名称和DOM版本。
//如果浏览器支持指定的特性和版本，则hasFeature()方法返回true
let hasXmlDom = document.implementation.hasFeature('XML', '1.0')    //已废弃

6.文档写入

document对象有一个古老的能力，即向页面输出流中写入内容。这个能力对应4个方法
write(), writeLn(), open(), close()

write()和writeln()方法都接收一个字符串作为参数，可以将这个字符串写入网页中。
write()简单地写入文本
writeln()还会再字符串末尾追加一个换行符（\n）
这两个方法可以用来在页面加载期间向页面中动态添加内容

write()和writeln()方法经常用于动态包含外部资源，入javascript文件。

页面加载期间动态添加内容
如果页面加载完之后再调用document.write()则输出的内容会重写整个页面，

14.1.3 Element类型

nodeType等于1
nodeName值为元素的标签名
nodeValue值为null
parentNode值为Document或Element对象；
子节点可以是Element,Text,Comment, ProcessingInstruction,CDATASetion,EntityReference


2.取得属性

与属性相关的DOM方法主要有3个：getAttribute(), setAttribute()和removeAttribute()

注意，属性名不区分大小写，因此“ID”和“id”被认为是同一个属性。另外，根据HTML5规范的要求，自定义
属性名应该前缀data-以方便验证

自定义属性，不会成为DOM对象的属性。

3.设置属性

4.attributes属性

Element类型是唯一使用attributes属性的DOM节点类型。

attributes属性属性包含一个NamedNodeMap实例，是一个类似NodeList的“实时”集合。

·getNamedItem(name)
·removeNamedItem(name)
·setNamedItem(node)
·item(pos)

5.创建元素

document.createElement()

6.元素后代

childNodes属性

let dom = document.getElementById('app')

let items = dom.getElementsByTagName('xxx')

14.1.4 Text类型

Text节点由Text类型表示，包括按字面解释的纯文本，也可能包含转义后的HTML字符，但不含HTML代码。

nodeType等于3

操作方法

appendData(text)
deleteData(offset, count)
insertData(offset, text)
replaceData(offset, count, text)
splitText(offset)
substringData(offset, count)

输入值
dom.nodeValue = 'xxx'

1.创建文本节点
document.createTextNode()可以用来创建新文本节点，它接收一个参数，即要插入节点的文本。


14.1.5 Comment类型

DOM中的注释通过Comment类型表示。
nodeType等于8

14.1.6 CDATASection类型

CDATASection类型标识XML中特有的CDATA去看。CDATASection类型继承Text类型。

nodeType 4

CDATA区块只在XML文档中有效，因此某些浏览器比较陈旧的版本会错误地将CDATA区块解析为Comment或Element

<div>
  <![CDATA[this is some content]]>
</div>

14.1.7 DocumentType类型

DocumentType类型的节点包含文档的文档类型(doctype)信息

nodetype 10

document.doctype

DOM Level 1 定义了 DocumentType对象的3个属性
name        文档类型的名称 
entities    文档类型描述的实体的NamedNodeMap
notations   文档类型买搜狐的标识法的NamedNodeMap。

14.1.8 DocumentFragment类型

DocumentFragment类型时唯一一个没有对应标识的类型。DOM将文档片段定义为“轻量级”文档，能够包含和
操作节点，却没有完整文档那样额外的消耗。

nodeType 11

14.1.9 Attr类型

元素数据再DOM中通过Attr类型表示。

14.2 DOM编程


14.2.1 动态脚本

<script src='foo.js'></script>

let script = document.createElement('script')
script.src = 'foo.js'
document.body.appendChild(script)

14.2.2 动态样式

<link res="stylesheet" type="text/css" href="styles.css">

let link = do.createElement('link')
link.rel = 'stylesheet'
link.type = 'text/css'
link.href = 'styles.css'

let head = document.getElementsByTagName('head')[0]
head.appendChild(link)

14.2.4 使用NodeList

14.3 MutationObserver接口

可以再DOM被修改时异步执行回调，使用MutationObserver可以观察整个文档、DOM树的一部分，或某个元素。
此外还可以观察元素属性、子节点、文本或者前三者任意组合的变化。

14.3.1 基本用法

let observer = new MutationObserver(() => console.log('<body> attributes changed'))

observer.observe(document.body, { attributes: true })

document.body.className = 'foo'
console.log('changed body class') 