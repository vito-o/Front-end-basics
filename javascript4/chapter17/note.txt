第17章 事件

理解事件流
使用事件处理程序
了解不同类型的事件

javascript与HTML的交互是通过事件实现的，事件代表文档或浏览器窗口中某个有意义的时刻。可以使用仅在
事件发生时执行的监听器（也叫处理程序）订阅事件。在传统软件工程领域，这个模型叫“观察者模式”，能够
做到页面行为（在js中定义）与页面展现（在html和css中定义）的分离。

17.1事件流

在第四代web浏览器（IE4和Netscape Communicator 4）开始开发时，开发团队碰到一个有意思的问题：页面
哪个部分拥有特定的事件呢？当你点击了一个按钮时，实际上不光点击了这个按钮，还点击了它的容器及其这个
页面。

事件流描述了页面接收事件的顺序。结果非常有意思，ie和Netscape开发团队提出了几乎完全相反的事件流方案
ie将支持事件冒泡流，而Netscape Communicator将支持事件捕获流。

17.1.1 事件冒泡

IE事件流被称为事件冒泡，这是因为事件被定义为从最具体的元素（文档树中最深的节点）开始触发，然后向上
传播至没有那么具体的元素(文档)。

所有现代浏览器都支持事件冒泡，事件会一直冒泡到window对象。

17.1.2 事件捕获

Netscape Communicator团队提出了另一种名为事件捕获的事件流。事件捕获的意思是最不具体的节点应该
最先接收到事件，而最具体的节点应该最后接收到事件。事件捕获实际上是为了在事件到达最终目标前拦截
事件。

事件捕获得到了所有现代浏览器的支持。实际上，所有浏览器都从window对象开始捕获事件。而DOM2 Events
规范规定的是从document开始。

由于旧版浏览器不支持，因此实际当中几乎不会使用事件捕获。通常建议使用事件冒泡，特殊情况下可以使用
事件捕获。

17.1.3 DOM事件流

DOM2 Events规范规定事件流分为3个阶段：事件捕获、到达目标和事件冒泡。事件捕获最先发生，为提前拦截
事件提供了可能。然后，实际的目标元素接收到事件。最后一个阶段是冒泡，最迟要在这个阶段响应事件。

在DOM事件流中，实际的目标（<div>元素）在捕获阶段不会接收到事件。设置因为捕获阶段从document到
<html>在到<body>就结束了。下一阶段，即会在<div>元素上触发事件的“到达目标”阶段，通常在事件处理时
被认为时冒泡阶段的一部分。然后，冒泡阶段开始，事件反向传播至文档。

大多数支持DOM事件流的浏览器实现了一个小小的拓展。虽然DOM2 Events规范明确捕获阶段不命中事件目标，
但现在浏览器都会在捕获阶段在事件目标上触发事件。最终结果是在事件目标上有两个机会来处理事件。

注意：所有现代浏览器都支持DOM事件流，只有IE8及更早版本不支持

17.2 事件处理程序

如click, load, mouseover。

为响应事件而调用的函数被称为事件处理程序（或事件监听器）。

17.2.1 HTML事件处理程序

<input type="button" value="Click Me" onclick="console.log('Clicked')"/>

17.2.2 DOM0事件处理程序

let btn = document.getElementById('myBtn')
btn.onclick = function(){
  console.log('clicked')
}

以这种方式添加事件处理程序是注册在事件流的冒泡阶段的。

通过将事件处理程序属性的值设置为null，可以移除通过DOM0方式添加的事件处理程序。
btn.onclick = null;

注意：如果事件处理程序实在HTML中指定的，则onclick属性的值是一个包装相应html事件处理程序属性的函数。
这些事件处理程序也通过在js中将相应属性设hi为null来移除。

17.2.3 DOM2事件处理程序

DOM2 Events为事件处理程序的赋值和移除定义了两个方法：addEventListener()和removeEventListener()。
这两个方法暴露在所有DOM节点上，他们接收3个参数：事件名、事件处理函数和一个布尔值，true表示在捕获阶段
调用事件处理程序，false(默认值)表示在冒泡阶段调用事件处理程序。

let btn = document.getElementById('myBtn')
btn.addEventListener('click', () => {
  console.log(this.id)
}, false)

与DOM0方式类似，这个事件处理程序同样在被附加到的元素的作用域中运行。使用DOM2方式的主要优势是可以
为同一个事件添加多个事件处理程序。

通过addEventListener()添加的事件处理程序智能使用removeEventListener()并传入与添加时同样的参数
来移除。这意味着使用addEventListener()添加的匿名函数无法移除。
let btn = document.getElementById('myBtn')
btn.addEventListener('click', () => {
  console.log(this.id)
}, false)

btn.removeEventListener('click', function(){
  console.log(this.id)
}, false)
//无法移除

大多数情况下，事件处理程序会被添加到事件流的冒泡阶段，主要原因时跨浏览器兼容性好。把事件处理程序
注册到捕获阶段通常用于在事件到达指定不表之前拦截事件。如果不需要拦截，则不要使用事件捕获。