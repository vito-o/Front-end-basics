迭代器与生成器

迭代的英文"iterator"源自于拉丁文itero，意思时“重复”或“再来”。在软件开发领域，“迭代”的意思是按照
顺序反复多次执行一段程序，通常会有明确的终止条件。ECMAScript6规范新增了两个高级特性：迭代器和
生成器。使用这两个特性，能够更清晰、高效、方便地实现迭代。

7.1 理解迭代

在js中，计数循环就是一种最简单的迭代：
for(let i = 1; i <= 10; ++i){
  console.log(i);
}

循环是迭代机制的基础，这是因为它可以指定迭代的次数，以及每次迭代要执行什么操作。每次循环都会在
下一次迭代开始之前完成，而每次迭代的顺序都是事先定义好的。

迭代会在一个有序集合上进行（“有序”可以理解为集合中所有项都可以按照既定的顺序被遍历到，特别是开始
和结束项有明确的定义）数组是js中有序集合的最典型例子。

let collection = ['foo', 'bar', 'baz']
for(let index = 0; index < collection.length; ++index){
  console.log(collection[i])
}

因为数组有已知的长度，且数组每一项都可以通过索引获取，所以整个数组可以通过递增索引来遍历。由于如下
原因，通过这种循环来执行历程并不理想。
·迭代之前需要事先知道如何使用数据结构。数组中的每一项都只能先通过引用取得数组对象，然后再通过【】
操作符取得特定索引位置上的项。这种情况并不适用于所有数据结构。
·遍历顺序并不是数据结构固有的。通过递增索引来访问数据是特定于数组类型的方式，并不适用与其他具有隐式
顺序的数据结构。

ES6新增了Array.prototype.forEach()方法，向通用迭代需求迈进了一步（但仍然不够理想）：
let collection = ['foo', 'bar', 'baz']
collection.forEach(item => console.log(item))

这个方法解决了单独记录索引和通过数组对象取得值得问题。不过，没有办法标识迭代何时终止。因此这个方法
只适用于数组，而且回调结构也比较笨拙。
ECMAScript较早版本中，迭代器必须使用循环或其他辅助结构。随着代码量增加，代码会变得越发混乱。很多
语言都通过原生语言结构解决了这个问题，开发者无须事先知道如何迭代就能实现迭代操作。这个解决方案就是
迭代器模式。python、java、c++，还有很多语言都对这个模式提供了完备的支持。javascript在ES6以后也支持
了迭代器模式。

7.2 迭代器模式

迭代器模式(特别在ECMAScript这个语境下)描述了一个方案，即可以把有些结构称为“可迭代对象”（iterable），
因为他们实现了正式得Iterable接口，而且可以通过迭代器Iterator消费。

可迭代对象是一种抽象得说法。基本上，可以把可迭代对象理解成数组或集合这样的集合类型的对象。他们包含的
元素都是有限的，而且都具有无歧义的遍历顺序：
//数组的元素是有限的
//递增索引可以按序访问每个元素
let arr = [3, 1, 4]

//集合的元素是有限的
//可以按插入顺序访问每个元素
let set = new Set().add(3).add(1).add(4)

不过，可迭代对象不一定是集合对象，也可以是仅仅具有类似数组行为的其他数据结构，比如本长开头提到的
计数循环。该循环中生成的值是暂时性的，但循环本身是在执行迭代。计数循环和数组都具有可迭代对象的行为。

注意：临时性可迭代对象可以实现为生成器

任何实现Iterable接口的数据结构都可以被实现Iterator接口的结构“消费”（consume）。迭代器(iterator)
是按需创建的一次性对象。每个迭代器都会关联一个可迭代对象，而迭代器会暴露迭代其关联可迭代对象的API。
迭代器无须了解与其关联的可迭代对象的结构，只需要知道如何取得连续值。这种概念上的分离正是Iterable和
Iterator的强大之处。

7.2.1 可迭代协议

实现Iterable接口（可迭代协议）要求同时具备两种能力：支持迭代的自我识别能力和创建实现Iterator接口的
对象的能力。在ECMAScript中，这意味着必须暴露一个属性作为“默认迭代器”，而且这个属性必须使用特殊的
Symbol.iterator作为键。这个默认迭代器属性必须引用一个迭代器工厂函数，调用这个工厂函数必须返回一个
新迭代器。

很多内置类型都实现了Iterable接口
字符串
数组
映射
集合
arguments对象
NodeList等DOM集合类型

检查是否存在默认迭代器属性可以暴露这个工厂函数：

let num = 1;
let obj = {};

//这两种类型没有实现迭代器工厂函数
console.log(num[Symbol.iterator]) //undefined
console.log(obj[Symbol.iterator]) //undefined

let str = 'abc'
let arr = ['a', 'b', 'c']
let map = new Map().set('a', 1).set('b', 2).set('c', 3)
let set = new Set().add('a').add('b').add('c')
let els = document.querySelectorAll('div')

//这些类型都实现了迭代器工厂函数
console.log(str[Symbol.iterator])
console.log(arr[Symbol.iterator])
console.log(map[Symbol.iterator])
console.log(set[Symbol.iterator])
console.log(els[Symbol.iterator])
// ƒ [Symbol.iterator]() { [native code] }
// ƒ values() { [native code] }
// ƒ entries() { [native code] }
// ƒ values() { [native code] }
// ƒ values() { [native code] }

//调用这个工厂函数会生成一个迭代器
console.log(str[Symbol.iterator]())
console.log(arr[Symbol.iterator]())
console.log(map[Symbol.iterator]())
console.log(set[Symbol.iterator]())
console.log(els[Symbol.iterator]())

//StringIterator {}
//Array Iterator {}
//MapIterator {"a" => 1, "b" => 2, "c" => 3}
//SetIterator {"a", "b", "c"}
//Array Iterator {}

实际写代码过程中，不需要显式调用这个工厂函数来生成迭代器。实现可迭代协议的所有类型都会自动兼容接收
可迭代对象的任何语言特性。节后可迭代对象的原生语言特性包括：
for-of循环
数组解构
扩展操作符
Array.from()
创建集合
创建映射
Promise.all()接收由期约组成的可迭代对象
Promise.race()接收由期约组成的可迭代对象
yield*操作符，在生成器中使用

这些原生语言结构会在后台调用提供了可迭代对象的这个工厂函数，从而创建一个迭代器：
let arr = ['foo', 'bar', 'baz']

//for-of循环
for(let el of arr){
  console.log(el);
}

//数组解构
let [a, b, c] = arr;
console.log(a, b, c)

//扩展操作符
let arr2 = [...arr]
console.log(arr2)

//Array.from()
let arr3 = Array.from(arr)
console.log(arr3)

//Set构造函数
let set = new Set(arr)
console.log(set)

//Map构造函数
let pairs = arr.map((x, i) => [x, i])
console.log(pairs);
let map = new Map(pairs)
console.log(map)

如果对象原型链上的父类实现了Iterable接口，那这个对象也就实现了这个接口：
class FooArray extends Array{}
let fooArr = new FooArray('FOO', 'bar', 'baz')
for(let el of fooArr){
  console.log(el)
}

7.2.2 迭代器协议

迭代器是一种一次性使用的对象，用于迭代于其关联的可迭代对象。迭代器API使用next()方法在可迭代对象
中遍历数据。每次成功调用next()，都会返回一个IteratorReult对象，其中包含迭代器返回的下一个值。
若不调用next()，则无法知道迭代器的当前位置

next()方法返回的迭代器对象IteratorResult包含两个属性：done和value。done是一个布尔值，标识是否
还可以再次调用next()取得下一个值；value包含可迭代对象的下一个值（done为false），或者undefined
（done为true）。done：true状态称为“耗尽”。可以通过以下简单的数组来演示：

//可迭代对象
let arr = ['foo', 'bar']
//迭代器工厂函数
console.log(arr[Symbol.iterator])   //ƒ values() { [native code] }

//迭代器
let iter = arr[Symbol.iterator]()
console.log(iter)   //Array Iterator {}

console.log(iter.next())  //{value: "foo", done: false}
console.log(iter.next())  //{value: "bar", done: false}
console.log(iter.next())  //{value: undefined, done: true}

这里通过创建迭代器并调用next()方法按顺序迭代了数组，直到不再产生新值。迭代器并不知道怎么从可迭代对象
中取得下一个值，也不知道可迭代对象有多大。只要迭代器到达done:true状态，后续调用next()就会一直返回
同样的值。
let arr = ['foo']
let iter = arr[Symbol.iterator]();
console.log(iter.next())  //{value: "foo", done: false}
console.log(iter.next())  //{value: undefined, done: true}
console.log(iter.next())  //{value: undefined, done: true}
console.log(iter.next())  //{value: undefined, done: true}

每个迭代器都表示对可迭代对象的一次性有序遍历。不同迭代器的实例相互之间没有关系，只会独立地遍历可
迭代对象：
let arr = ['foo', 'bar']
let iter1 = arr[Symbol.iterator]()
let iter2 = arr[Symbol.iterator]()

console.log(iter1.next())
console.log(iter2.next())
console.log(iter1.next())
console.log(iter2.next())

迭代器并不与可迭代对象某个时刻的快照绑定，而仅仅是使用游标来记录遍历可迭代对象的历程。如果可迭代
对象在迭代期被修改了，那么迭代器也会反映相应的变化：

let arr = ['foo', 'bar']
let iter = arr[Symbol.iterator]();

console.log(iter.next())  //{value: "foo", done: false}

arr.splice(1, 0, 'bar')

console.log(iter.next())  //{value: "bar", done: false}
console.log(iter.next())  //{value: "bar", done: false}
console.log(iter.next())  //{value: undefined, done: true}

注意：迭代器维护着一个指向可迭代对象的引用，因此迭代器会阻止垃圾回收程序回收可迭代对象。