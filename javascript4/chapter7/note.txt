迭代器与生成器

迭代的英文"iterator"源自于拉丁文itero，意思时“重复”或“再来”。在软件开发领域，“迭代”的意思是按照
顺序反复多次执行一段程序，通常会有明确的终止条件。ECMAScript6规范新增了两个高级特性：迭代器和
生成器。使用这两个特性，能够更清晰、高效、方便地实现迭代。

7.1 理解迭代

在js中，计数循环就是一种最简单的迭代：
for(let i = 1; i <= 10; ++i){
  console.log(i);
}

循环是迭代机制的基础，这是因为它可以指定迭代的次数，以及每次迭代要执行什么操作。每次循环都会在
下一次迭代开始之前完成，而每次迭代的顺序都是事先定义好的。

迭代会在一个有序集合上进行（“有序”可以理解为集合中所有项都可以按照既定的顺序被遍历到，特别是开始
和结束项有明确的定义）数组是js中有序集合的最典型例子。

let collection = ['foo', 'bar', 'baz']
for(let index = 0; index < collection.length; ++index){
  console.log(collection[i])
}

因为数组有已知的长度，且数组每一项都可以通过索引获取，所以整个数组可以通过递增索引来遍历。由于如下
原因，通过这种循环来执行历程并不理想。
·迭代之前需要事先知道如何使用数据结构。数组中的每一项都只能先通过引用取得数组对象，然后再通过【】
操作符取得特定索引位置上的项。这种情况并不适用于所有数据结构。
·遍历顺序并不是数据结构固有的。通过递增索引来访问数据是特定于数组类型的方式，并不适用与其他具有隐式
顺序的数据结构。

ES6新增了Array.prototype.forEach()方法，向通用迭代需求迈进了一步（但仍然不够理想）：
let collection = ['foo', 'bar', 'baz']
collection.forEach(item => console.log(item))

这个方法解决了单独记录索引和通过数组对象取得值得问题。不过，没有办法标识迭代何时终止。因此这个方法
只适用于数组，而且回调结构也比较笨拙。
ECMAScript较早版本中，迭代器必须使用循环或其他辅助结构。随着代码量增加，代码会变得越发混乱。很多
语言都通过原生语言结构解决了这个问题，开发者无须事先知道如何迭代就能实现迭代操作。这个解决方案就是
迭代器模式。python、java、c++，还有很多语言都对这个模式提供了完备的支持。javascript在ES6以后也支持
了迭代器模式。

7.2 迭代器模式

迭代器模式(特别在ECMAScript这个语境下)描述了一个方案，即可以把有些结构称为“可迭代对象”（iterable），
因为他们实现了正式得Iterable接口，而且可以通过迭代器Iterator消费。

可迭代对象是一种抽象得说法。基本上，可以把可迭代对象理解成数组或集合这样的集合类型的对象。他们包含的
元素都是有限的，而且都具有无歧义的遍历顺序：
//数组的元素是有限的
//递增索引可以按序访问每个元素
let arr = [3, 1, 4]

//集合的元素是有限的
//可以按插入顺序访问每个元素
let set = new Set().add(3).add(1).add(4)

不过，可迭代对象不一定是集合对象，也可以是仅仅具有类似数组行为的其他数据结构，比如本长开头提到的
计数循环。该循环中生成的值是暂时性的，但循环本身是在执行迭代。计数循环和数组都具有可迭代对象的行为。

注意：临时性可迭代对象可以实现为生成器

任何实现Iterable接口的数据结构都可以被实现Iterator接口的结构“消费”（consume）。迭代器(iterator)
是按需创建的一次性对象。每个迭代器都会关联一个可迭代对象，而迭代器会暴露迭代其关联可迭代对象的API。
迭代器无须了解与其关联的可迭代对象的结构，只需要知道如何取得连续值。这种概念上的分离正是Iterable和
Iterator的强大之处。

7.2.1 可迭代协议

实现Iterable接口（可迭代协议）要求同时具备两种能力：支持迭代的自我识别能力和创建实现Iterator接口的
对象的能力。在ECMAScript中，这意味着必须暴露一个属性作为“默认迭代器”，而且这个属性必须使用特殊的
Symbol.iterator作为键。这个默认迭代器属性必须引用一个迭代器工厂函数，调用这个工厂函数必须返回一个
新迭代器。

很多内置类型都实现了Iterable接口
字符串
数组
映射
集合
arguments对象
NodeList等DOM集合类型

检查是否存在默认迭代器属性可以暴露这个工厂函数：

let num = 1;
let obj = {};

//这两种类型没有实现迭代器工厂函数
console.log(num[Symbol.iterator]) //undefined
console.log(obj[Symbol.iterator]) //undefined

let str = 'abc'
let arr = ['a', 'b', 'c']
let map = new Map().set('a', 1).set('b', 2).set('c', 3)
let set = new Set().add('a').add('b').add('c')
let els = document.querySelectorAll('div')

//这些类型都实现了迭代器工厂函数
console.log(str[Symbol.iterator])
console.log(arr[Symbol.iterator])
console.log(map[Symbol.iterator])
console.log(set[Symbol.iterator])
console.log(els[Symbol.iterator])
// ƒ [Symbol.iterator]() { [native code] }
// ƒ values() { [native code] }
// ƒ entries() { [native code] }
// ƒ values() { [native code] }
// ƒ values() { [native code] }

//调用这个工厂函数会生成一个迭代器
console.log(str[Symbol.iterator]())
console.log(arr[Symbol.iterator]())
console.log(map[Symbol.iterator]())
console.log(set[Symbol.iterator]())
console.log(els[Symbol.iterator]())

//StringIterator {}
//Array Iterator {}
//MapIterator {"a" => 1, "b" => 2, "c" => 3}
//SetIterator {"a", "b", "c"}
//Array Iterator {}

实际写代码过程中，不需要显式调用这个工厂函数来生成迭代器。实现可迭代协议的所有类型都会自动兼容接收
可迭代对象的任何语言特性。节后可迭代对象的原生语言特性包括：
for-of循环
数组解构
扩展操作符
Array.from()
创建集合
创建映射
Promise.all()接收由期约组成的可迭代对象
Promise.race()接收由期约组成的可迭代对象
yield*操作符，在生成器中使用

这些原生语言结构会在后台调用提供了可迭代对象的这个工厂函数，从而创建一个迭代器：
let arr = ['foo', 'bar', 'baz']

//for-of循环
for(let el of arr){
  console.log(el);
}

//数组解构
let [a, b, c] = arr;
console.log(a, b, c)

//扩展操作符
let arr2 = [...arr]
console.log(arr2)

//Array.from()
let arr3 = Array.from(arr)
console.log(arr3)

//Set构造函数
let set = new Set(arr)
console.log(set)

//Map构造函数
let pairs = arr.map((x, i) => [x, i])
console.log(pairs);
let map = new Map(pairs)
console.log(map)

如果对象原型链上的父类实现了Iterable接口，那这个对象也就实现了这个接口：
class FooArray extends Array{}
let fooArr = new FooArray('FOO', 'bar', 'baz')
for(let el of fooArr){
  console.log(el)
}

7.2.2 迭代器协议

迭代器是一种一次性使用的对象，用于迭代于其关联的可迭代对象。迭代器API使用next()方法在可迭代对象
中遍历数据。每次成功调用next()，都会返回一个IteratorReult对象，其中包含迭代器返回的下一个值。
若不调用next()，则无法知道迭代器的当前位置

next()方法返回的迭代器对象IteratorResult包含两个属性：done和value。done是一个布尔值，标识是否
还可以再次调用next()取得下一个值；value包含可迭代对象的下一个值（done为false），或者undefined
（done为true）。done：true状态称为“耗尽”。可以通过以下简单的数组来演示：

//可迭代对象
let arr = ['foo', 'bar']
//迭代器工厂函数
console.log(arr[Symbol.iterator])   //ƒ values() { [native code] }

//迭代器
let iter = arr[Symbol.iterator]()
console.log(iter)   //Array Iterator {}

console.log(iter.next())  //{value: "foo", done: false}
console.log(iter.next())  //{value: "bar", done: false}
console.log(iter.next())  //{value: undefined, done: true}

这里通过创建迭代器并调用next()方法按顺序迭代了数组，直到不再产生新值。迭代器并不知道怎么从可迭代对象
中取得下一个值，也不知道可迭代对象有多大。只要迭代器到达done:true状态，后续调用next()就会一直返回
同样的值。
let arr = ['foo']
let iter = arr[Symbol.iterator]();
console.log(iter.next())  //{value: "foo", done: false}
console.log(iter.next())  //{value: undefined, done: true}
console.log(iter.next())  //{value: undefined, done: true}
console.log(iter.next())  //{value: undefined, done: true}

每个迭代器都表示对可迭代对象的一次性有序遍历。不同迭代器的实例相互之间没有关系，只会独立地遍历可
迭代对象：
let arr = ['foo', 'bar']
let iter1 = arr[Symbol.iterator]()
let iter2 = arr[Symbol.iterator]()

console.log(iter1.next())
console.log(iter2.next())
console.log(iter1.next())
console.log(iter2.next())

迭代器并不与可迭代对象某个时刻的快照绑定，而仅仅是使用游标来记录遍历可迭代对象的历程。如果可迭代
对象在迭代期被修改了，那么迭代器也会反映相应的变化：

let arr = ['foo', 'bar']
let iter = arr[Symbol.iterator]();

console.log(iter.next())  //{value: "foo", done: false}

arr.splice(1, 0, 'bar')

console.log(iter.next())  //{value: "bar", done: false}
console.log(iter.next())  //{value: "bar", done: false}
console.log(iter.next())  //{value: undefined, done: true}

注意：迭代器维护着一个指向可迭代对象的引用，因此迭代器会阻止垃圾回收程序回收可迭代对象。

“迭代器”的概念有时候容易模糊，因为它可以指通用的迭代，也可以指接口，还可以指正式的迭代器类型。下面
的例子比较了一个显式的迭代器实现和一个原生的迭代器实现。

//这个类实现了可迭代接口（Iterable）
//调用默认的迭代器工厂函数会返回
//一个实现迭代器接口（Iterator）的迭代器对象
class Foo{
  [Symbol.iterator](){
    return {
      next(){
        return { done: false, value: 'foo' }
      }
    }
  }
}

let f = new Foo();
console.log(f[Symbol.iterator]())
//{next: f}

//Array类型实现了可迭代接口（Iterable）
//调用Array类型的默认迭代器工厂函数
//会创建一个ArrayIterator的实例
let a = new Array();
console.log(a[Symbol.iterator]())
//Array Iterator {}

7.2.3 自定义迭代器

与Iterable接口类似，任何实现Iterator接口的对象都可以作为迭代器使用。下面这个例子中的Counter类只
能被迭代一定的次数。
class Counter {
  constructor(limit){
    this.count = 1;
    this.limit = limit;
  }

  next(){
    if(this.count <= this.limit){
      return { done: false, value: this.count++ }
    }else{
      return { done: true, value: undefined };
    }
  }

  [Symbol.iterator](){
    return this;
  }
}

let counter = new Counter(3);

for(let i of counter){
  console.log(i);
}
//1
//2
//3

这个类实现了Iterator接口，但不理想。这是因为它的每个实例只能被迭代一次：
for(let i of counter){
  console.log(i)
}
//nothing logged

为了让一个可迭代对象能够创建多个迭代器，必须每创建一个迭代器就对于一个新计数器。为此，可以把计数器
遍历放到闭包里面，然后通过闭包返回迭代器：

class Counter {
  constructor(limit){
    this.limit = limit;
  }
  [Symbol.iterator](){
    let count = 1,
        limit = this.limit;
    return {
      next(){
        if(count <= limit){
          return { done: false, value: count++ };
        }else{
          return { done: true, value: undefined }
        }
      }
    }
  }
}

let counter = new Counter(3)
for(let i of counter){
  console.log(i)
}

每个以这种方式创建的迭代器也实现了Iterable接口。Symbol.iterator属性引用的工厂函数会返回相同的
迭代器：

let arr = ['foo', 'bar', 'baz']
let iter1 = arr[Symbol.iterator]();
console.log(iter1[Symbol.iterator]);
//ƒ [Symbol.iterator]() { [native code] }

let iter2 = iter1[Symbol.iterator]();
console.log(iter1 === iter2)
//true

因为每个迭代器也实现了Iterable接口，所以他们可以用在任何期待可迭代对象的地方，比如for-of循环：
let arr = [3, 1 ,4]
let iter = arr[Symbol.iterator]();

for(let item of arr){
  console.log(item)
}

for(let item of iter){
  console.log(item)
}

7.2.4 提前终止迭代器

可选的return()方法用于指定在迭代器提前关闭时执行的逻辑。执行迭代的结构在想让迭代器知道它不想遍历
到可迭代对象耗尽时，就可以“关闭”迭代器。可能的情况包括：
·for-of循环通过break、continue、return或throw提出退出；
·解构操作并未消费所有值
return()方法必须返回一个有效的IteratorResult对象。简单情况下，可以只返回{done:true}。因为这个返回
值只会用在生成器的上下文中，所以本章后面再讨论这种情况。

如下面的代码所示，内置语言结构再发现还有更多值可以迭代，但不会消费这些值时，会自动调用return()方法

class Counter {
  constructor(limit){
    this.limit = limit;
  }
  [Symbol.iterator](){
    let count = 1,
        limit = this.limit;
    return {
      next(){
        if(count <= limit){
          return { done: false, value: count++ }
        }else{
          return { done: true }
        }
      },
      return(){
        console.log('Exiting early');
        return { done: true }
      }
    }
  }
}

let counter1 = new Counter(5)
for(let i of counter1){
  if(i > 2){
    break;
  }
  console.log(i)
}
//1
//2
//Exiting early

let counter2 = new Counter(5);

try{
  for(let i of counter2){
    if(i > 2){
      throw 'err';
    }
    console.log(i)
  }
}catch(e){}

//1
//2
//Exiting early

let counter3 = new Counter(5)
let [a, b] = counter3;

如果迭代器没有关闭，则还可以继续从上次离开的地方继续迭代，比如，数组的迭代器就是不能关闭的：

let a = [1, 2, 3, 4, 5]
let iter = a[Symbol.iterator]();

for(let i of iter){
  console.log(i)
  if(i > 2){
    break;
  }
}

for(let i of iter){
  console.log(i)
}

因为return()方法时可选的，所以并非所有迭代器都可关闭的。要知道某个迭代器是否可关闭，可以测试这个
迭代器实例的return属性是不是函数对象。不过，仅仅给一个不可关闭的迭代器增加这个方法并不能让他变成
可关闭的。这是因为调用return()不会强制迭代器进入关闭状态。即便如此，return()方法还是会被调用。

let a = [1, 2, 3, 4, 5];
let iter = a[Symbol.iterator]();

iter.return = function(){
  console.log('Exiting early')
  return { done: true }
}

for(let i of iter){
  console.log(i);
  if(i > 2){
    break;
  }
}

for(let i of iter){
  console.log(i);
}

7.3 生成器

生成器是ECMAScript6新增的一个极为灵活的结构，拥有在一个函数块内暂停和恢复代码执行的能力。这种新
能力具有深远的影响，比如，使用生成器可以自定义迭代器和实现协程。

7.3.1 生成器基础

生成器的形式是一个函数，函数名称前面加一个星号（*）表示它是一个生成器。只要是可以定义函数的地方
就可以定义生成器。

//生成器函数声明
function* generatorFn(){}

//生成器函数表达式
let generatorFn = function* (){}

//作为对象字面量方法的生成器函数
let foo = {
  * generatorFn(){}
}

//作为类实例方法的生成器函数
class Foo{
  *generatorFn(){}
}

//作为类静态方法的生成器函数
class Bar{
  static * generatorFn(){}
}

//注意： 箭头函数不能用来定义生成器函数

标识生成器函数的星号不受两侧空格的影响：

//等价的生成器函数
function* generatorFnA(){}
function *generatorFnB(){}
function * generatorFnc(){}

//等价的生成器方法：
class Foo{
  *generatorFnD(){}
  * generatorFnE(){}
}

调用生成器函数会产生一个生成器对象。生成器对象一开始处于暂停执行（suspended）的状态。与迭代器
相似，生成器对象也实现了Iterator接口，因此具有next()方法。调用这个方法会让生成器开始或恢复执行。

function* generatorFn(){}
const g = generatorFn();
console.log(g)        //generatorFn {<suspended>}
console.log(g.next)   //ƒ next() { [native code] }

next()方法的返回值类似于迭代器，有一个done属性和一个value属性。函数体为空的生成器函数中间不会停留，
调用一次next()就会让生成器到达done:true状态。
function * generatorFn(){
  console.log('123...')
}
let generatorObject = generatorFn();
console.log(generatorObject)        //generatorFn {<suspended>}
console.log(generatorObject.next())
//123...
//{value: undefined, done: true}

生成器函数只会在初次调用next()方法后开始执行，如下所示：
function* generatoerFn(){
  console.log('foobar')
}
let generatorObject = generatoerFn()
generatorObject.next();

生成器对象实现了Iterable接口，他们默认的迭代器是自引用的：
function* generatorFn(){}
console.log(generatorFn)  //ƒ* generatorFn(){}

console.log(generatorFn()[Symbol.iterator])
//ƒ [Symbol.iterator]() { [native code] }

console.log(generatorFn())
//generatorFn {<suspended>}

console.log(generatorFn()[Symbol.iterator]())
//generatorFn {<suspended>}

const g = generatorFn();
console.log(g === g[Symbol.iterator]()) //true

7.3.2 通过yield中断执行

yield 关键字可以让生成器停止和开始执行，也就是生成器最有用的地方。生成器函数在遇到yield关键字之前
会正常执行。遇到这个关键字后，执行会停止，函数作用域的状态会被保留。停止执行的生成器函数只能通过在
生成器对象上调用next()方法来恢复执行：
function* generatorFn(){
  yield;
}
let generatorObject = generatorFn();
console.log(generatorObject.next()) //{value: undefined, done: false}
console.log(generatorObject.next()) //{value: undefined, done: true}

此时的yield关键字有点像函数的中间返回语句，它生成的值会出现在next()方法返回的对象里。通过yield
关键字退出的生成器函数会处在done:false状态；通过return关键字退出的生成器函数会处于done:true状态。
function* generatorFn(){
  yield 'foo'
  yield 'bar'
  return 'baz'
}

let generatorObject = generatorFn();
console.log(generatorObject.next())   //{done: false, value: 'foo'}
console.log(generatorObject.next())   //{done: false, value: 'bar'}
console.log(generatorObject.next())   //{done: true, value: 'baz'} 

生成器函数内部的执行流程会针对每个生成器对象区分作用域。在一个生成器对象上条用next()不会影响其他
生成器。
function* generatorFn(){
  yield 'foo'
  yield 'bar'
  return 'baz'
}

let generatorObject1 = generatorFn();
let generatorObject2 = generatorFn();

console.log(generatorObject1.next())  //{value: "foo", done: false}
console.log(generatorObject2.next())  //{value: "foo", done: false}
console.log(generatorObject1.next())  //{value: "bar", done: false}
console.log(generatorObject2.next())  //{value: "bar", done: false}

yield关键字只能在生成器函数内部使用，用在其他地方会抛出错误。类似函数的return关键字，yield关键字
必须直接位于生成器函数定义中，出现嵌套的非生成器函数种会抛出语法错误：

//有效
function* validGeneratorFn(){
  yield;
}

//无效
function* invalidGeneratorFnA(){
  function a(){
    yield;
  }
}
//无效
function* invalidGeneratorFnB(){
  const b = () =< {
    yield;
  }
}

//无效
function* invalidGeneratorFnC(){
  (() => {
    yield;
  })();
}


1.生成器对象作为可迭代对象

在生成器对象上显式调用next()方法的用处并不大。其实，如果把生成器对象当成可迭代对象，那么使用起来
会更方便：

function* generatorFn(){
  yield 1;
  yield 2;
  yield 3;
}

for(const x of generatorFn()){
  console.log(x)
}
//1
//2
//3

在需要自定义迭代对象时，这样使用生成器对象会特别有用。比如，我们需要定义一个可迭代对象，而他会产生
一个迭代器，这个迭代器会执行指定的次数。使用生成器，可以通过一个简单循环来实现：

function* nTimes(n){
  while(n--){
    yield;
  }
}

for(let _ of nTimes(3)){
  console.log('foo', _)
}

//foo undefined
//foo undefined
//foo undefined

传给生成器的函数可以控制迭代循环的次数。在n为0时，while条件为假，循环退出，生成器函数返回。

2.使用yield实现输入和输出
除了可以作为函数的中间返回语句使用，yield关键字还可以作为函数的中间参数使用。上一次让生成器函数
暂停的yield关键字会接收到传给Next()方法的第一个值。这里有一个地方不太好理解--第一次调用next()
传入的值不会被使用，因为这一次调用是为了开始执行生成器函数：

function* generatorFn(initial){
  console.log(initial);
  console.log(yield);
  console.log(yield);
}

let generatorObject = generatorFn('foo')
generatorObject.next('bar')   //foo 第一次调用传入的值不会被使用，因为第一次是为了开始执行生成器
generatorObject.next('baz')   //baz
generatorObject.next('qux')   //qux

yield关键字可以同时用于输入和输出，如下
function* generatorFn(){
  return yield 'foo'
}

let generatorObject = generatorFn();


console.log(generatorObject.next())       //{value: "foo", done: false}
console.log(generatorObject.next('bar'))  //{value: "bar", done: true}

因为函数必须对整个表达式求值才能确定要返回的值，所以它在遇到yield关键字时暂时执行并计算出要产生的值：
"foo"。下一次调用next()传入了"bar"，作为交给同一个yield的值。然后这个值被确定为本次生成器函数要返回
的值。
yield关键字并非只能使用一次。比如，以下代码就定义了一个无穷计数生成器函数。

function* generatorFn(){
  for(let i = 0; ; ++i){
    yield i;
  }
}

let generatorObject = generatorFn()
console.log(generatorObject.next())
console.log(generatorObject.next())
console.log(generatorObject.next())
console.log(generatorObject.next())
console.log(generatorObject.next())
console.log(generatorObject.next())

假设我们向定义一个生成器函数，它会根据配置的值迭代相应次数并产生迭代的索引。初始化一个新数组可以实现
这个需求，但不用数组也可以实现同样的行为：

function* nTimes(n){
  for(let i = 0; i < n; ++i){
    yield i;
  }
}

for(let x of nTimes(3)){
  console.log(x)
}

另外，使用while循环也可以，而且代码稍微简洁一点：
function* nTimes(n){
  let i = 0;
  while(n--){
    yield i++;
  }
}

for(let x of nTimes(3)){
  console.log(x)
}

这样使用生成器也可以实现范围和填充数组；
function* range(start, end){
  while(end > start){
    yield start++;
  }
}

for(const x of range(4, 7)){
  console.log(x)
}

function* zeroes(n){
  while(n--){
    yield 0;
  }
}
console.log(Array.from(zeroes(8)))
//(8) [0, 0, 0, 0, 0, 0, 0, 0]

3.产生可迭代对象

可以使用星号增强yield的行为，让它能够迭代一个可迭代对象，从而一次产出一个值：
//等价于generatorFn;
//function* generatorFn(){
//  for(const x of [1, 2, 3]){
//    yield x;  
//  }
//}

function* generatorFn(){
  yield* [1, 2, 3]; //使用星号增强yield的行为，让他能够迭代一个可迭代对象，从而一次产出一个值:
}
let generatorObject = generatorFn();

for(const x of generatorFn()){
  console.log(x)
}
//1
//2
//3

与生成器函数的星号类似，yield星号两侧的空格不影响其行为：
function* generatorFn(){
  yield* [1, 2];
  yield *[3, 4];
  yield * [5, 6];
}

for(const x of generatorFn()){
  console.log(x)
}

因为yield*实际上只是将一个可迭代对象序列化为一串可以单独产出的值，所以这跟把yield放到一个循环里
没有声明不同。下面两个生成器函数的行为是等价的：

function* generatorFnA(){
  for(const x of [1, 2, 3]){
    yield x;
  }
}

for(const x of generatorFnA()){
  console.log(x)
}

function* generatorFnB(){
  yield* [1, 2, 3];
}

for(const x of generatorFnB()){
  console.log(x)
}

yield*的值是关联迭代器返回done:true时的value属性。对于普通的带起来说，这个值是undefined

function* generatorFn(){
  console.log('iter value:', yield* [1, 2, 3]);
}

for(const x of generatorFn()){
  console.log('value:', x);
}
//value: 1
//value: 2
//value: 3
iter value: undefined


对于生成器函数产生的迭代器来说，这个值就是生成函数返回的值。
function* innerGeneratorFn(){
  yield 'foo'
  return 'bar'
}

function* outerGeneratorFn(genObj){
  console.log('iter value: ', yield* innerGeneratorFn())
}

for(const x of outerGeneratorFn()){
  console.log('value:', x)
}
//foo
//iter value bar

4. 使用yield* 实现递归算法
yield*最有用的地方是实现递归操作，此时生成器可以产生自身