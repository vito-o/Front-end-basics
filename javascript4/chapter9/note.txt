代理与反射

·代理基础
·代理捕获器与反射方法
·代理模式

ECMAScript6新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力。具体地说，可以给目标
对象定义一个关联的代理对象，而这个代理对象可以作为抽象的目标对象来使用。在对目标对象的各种操作影响
目标对象之前，可以在代理对象中对这些操作加以控制。

对刚刚接触这个主题的开发者而言，代理是一个比较模糊的概念，而且还夹杂着很多新属于。

注意： 在ES6之前，ECMAScript中并没有类似代理的特性。由于代理是一种新的基础性语言能力。很多转义程序
都不能把代理行为转换为之前的ECMAScript代码，因为代理的行为实际上是无可替代的。为此，代理和反射只在
百分百支持他们的平台上有用。可以监测代理是否存在，不存在则提供后备代码。不过这会导致代码冗余，因此
并不推荐。

9.1 代理基础

正如本章开头所介绍的，代理是目标对象的抽象。从很多方面看，代理类似c++指针，因为它可以用作目标对象
的替身，但又完全独立于目标对象。目标对象既可以直接被操作，也可以通过代理来操作。但直接操作会绕过
代理施予的行为。

注意： ECMAScript代理与c++指针有重大区别，不过作为一种有助于理解的类比，指针在概念上还是比较合适的
结构。

9.1.1 创建空代理

最简单的代理是空代理，即除了作为一个抽象的目标对象，声明也不做。默认情况下，在代理对象上执行的所有
操作都会无障碍地传播到目标对象。因此，在任何可以使用目标对象的地方，都可以通过同样的方式来使用与之
关联的代理对象。

代理是使用Proxy构造函数创建的。这个构造函数接收两个参数：目标对象和处理程序对象。缺少其中任何一个
参数都会抛出TypeError。要创建空代理，可以传一个简单的对象字面量作为处理程序对象，从而让左右操作
畅通无阻地抵达目标对象。

如下所示：在代理对象上执行的任何操作实际上都会应用到目标对象。唯一可感知的不同就是代码中操作的是代理
对象。

const target = {
  id: 'target'
}
const handler = {}

const proxy = new Proxy(target, handler)

console.log(target.id)  //target
console.log(proxy.id)   //target

//给目标属性赋值会反映在两个对象上，因为两个对象访问的是同一个值
target.id = 'foo'
console.log(target.id)  //foo
console.log(proxy.id)   //foo

//给代理属性赋值会反映在两个对象上，因为这两个赋值会转移到目标对象
proxy.id = 'bar'
console.log(target.id)
console.log(proxy.id)

//hasOwnProperty()方法在两个地方都会应用到目标对象
console.log(target.hasOwnProperty('id'))  //true
console.log(proxy.hasOwnProperty('id'))   //true

//Proxy.prototype是undefined，因此不能使用Instanceof操作符
console.log(target instanceof Proxy)
//Uncaught TypeError: Function has non-object prototype 'undefined' in instanceof check

console.log(proxy instanceof Proxy)
//Uncaught TypeError: Function has non-object prototype 'undefined' in instanceof check

//严格相等可以用来区分代理和目标
console.log(target === proxy)   //false

9.1.2 定义捕获器

使用代理的主要目的是可以定义捕获器（trap）。捕获器就是在处理程序对象中定义的“基本操作的拦截器”。
每个处理程序对象可以包含零个或多个捕获器，每个捕获器都对应一种基本操作，可以直接或间接在代理对象
上调用。每次在代理对象上调用这些基本操作时，代理可以在这些操作传播到目标对象之前先调用捕获器函数，
从儿拦截并修改相应的行为。

注意： 捕获器（trap）是从操作系统中借用的概念。在操作系统中，捕获器是程序流中的一个同步中断，可以
暂停程序流，转而执行一段子例程，之后再返回原始程序流。

例：可以定义一个get()捕获器，再ECMAScript操作以某种形式调用get()时触发。下面的例子定义了一个get()
捕获器：

const target = {
  foo: 'bar'
}

const handler = {
  //捕获器在处理程序对象中以方法名为键
  get() {
    return 'handler override'
  }
}

const proxy = new Proxy(target, handler);

这样，当通过对象执行get()操作时，就会触发定义的get()捕获器。当然，get()不是ECMAScript对象可以调用
的方法。这个操作在javascript代码中可以通过多种形式触发并被get()捕获器拦截到。proxy[property]、
proxy.property或Object.create(proxy)[property]等操作都会触发基本的get()操作以获取属性。因此
所有这些操作只要发生在代理对象上，就会触发get()捕获器。注意，只有在代理对象上执行这些操作才会触发
捕获器。在目标对象上执行这些操作仍然会产生正常的行为。

const target = {
  foo: 'bar'
}
const handler = {
  get(){
    return 'handler override'
  }
}

const proxy = new Proxy(target, handler)
console.log(target.foo)     //bar
console.log(proxy.foo)      //handler override

console.log(target['foo'])  //bar
console.log(proxy['foo'])   //handler override

console.log(Object.create(target)['foo']) //bar
console.log(Object.create(proxy)['foo'])  //handler override

9.1.3 捕获器参数和反射API

所有捕获器都可以访问相应的参数，基于这些参数可以重建捕获方法的原始行为。比如，get()捕获器会接收
到目标对象、要查询的属性和代理对象三个参数。

const target = {
  foo: 'bar'
}

const handler = {
  get(trapTarget, property, receiver){
    console.log(trapTarget === target)  //true
    console.log(property)               //foo
    console.log(receiver)               //Proxy {foo:"bar"}
  }
}
const proxy = new Proxy(target, handler)
console.log(proxy.foo)  //undefined

有了这些参数，就可也重建捕获方法的原始行为：
const target = {
  foo: 'bar'
}
const handler = {
  get(trapTarget, property, receiver){
    return trapTarget[property]
  }
}
const proxy = new Proxy(target, handler)
console.log(proxy.foo)  //bar
console.log(target.foo) //bar

所有捕获器都可以基于自己的参数重建原始操作，但并非所有捕获器行为都向get()那么简单。因此，通过手动
写码如法炮制的想法是不显示的。实际上，开发者并不需要手动重建原始行为，而是可以通过调用全局Reflect
对象上（封装了原始行为）的同名方法来轻松重建。

const target = {
  foo: 'bar'
}
const handler = {
  get(){
    return Reflect.get(...arguments)
  }
}
const proxy = new Proxy(target, handler)

console.log(proxy.foo)    //bar
console.log(target.foo)   //bar

甚至还可以写得更简洁一些：
const target = {
  foo: 'bar'
}
const handler = {
  get: Reflect.get
}
const proxy = new Proxy(target, handler)

console.log(proxy.foo)    //bar
console.log(target.foo)   //bar

事实上，如果真想创建一个可以捕获所有方法，然后将每个方法转发给对应反射API的空间代理，那么甚至不需要
定义处理程序对象：

const target = {
  foo: 'bar'
}
const proxy = new Proxy(target, Reflect)

console.log(proxy.foo)    //bar
console.log(target.foo)   //bar

反射API为开发者准备好了样板代码，在此基础上开发者可以用最少的代码修改捕获的方法。比如，下面的代码
在某个属性被访问时，会对返回的值进行一番修饰：
const target = {
  foo: 'bar',
  baz: 'qux'
}
const handler = {
  get(trapTarget, property, receiver){
    let decoration = ''
    if(property == 'foo'){
      decoration = '!!!';
    }
    return Reflect.get(...arguments) + decoration;
  }
}

const proxy = new Proxy(target, handler);
console.log(proxy.foo)    //bar!!!
console.log(target.foo)   //bar

console.log(proxy.baz)    //qux
console.log(target.baz)   //qux

9.1.4 捕获器不变式

使用捕获器几乎可以改变所有基本方法的行为，但也不是没有限制。根据ECMAScript规范，每个捕获的方法
都知道目标对象上下文、捕获函数签名，而捕获处理程序的行为必须遵循“捕获器不变式”（trap invariatnt）。
捕获器不变式因方法不同而异，但通常都会放置捕获器定义出现过于反常的行为。

比如，如果目标对象有一个不可配置且不可写的数据属性，那么在捕获器返回一个与该属性不同值时，会抛出
typeError。

const target = {}
Object.defineProperty(target, 'foo', {
  configurable: false,
  writable: false,
  value: 'bar'
})

const handler = {
  get() {
    return 'qux'
  }
}

const proxy = new Proxy(target, handler)
console.log(proxy.foo)
//ncaught TypeError: 'get' on proxy: property 'foo' is a read-only and non-configurable data property on the proxy target but the proxy did not return its actual value (expected 'bar' but got 'qux')

9.1.5 可撤销代理

有时候可能需要中断代理对象与目标对象之间的联系。对于使用new Proxy()创建的普通代理来说，这种联系会
在代理对象的声明周期内一直持续存在。

Proxy也暴露了revocable()方法，这个方法支持撤销代理对象与目标对象的关联。撤销代理的操作是不可逆的。
而且，撤销函数（revoke()）是幂等的，调用多少次的结果都是一样。撤销代理之后再调用代理会抛出TypeError。

撤销函数和代理对象是再实例化时同时生成的：
const target = {
  foo: 'bar'
}
const handler = {
  get(){
    return 'intercepted'
  }
}

const { proxy, revoke } = Proxy.revocable(target, handler);
console.log(proxy.foo)    //intercepted
console.log(target.foo)   //bar

revoke();

console.log(proxy.foo)    
//Uncaught TypeError: Cannot perform 'get' on a proxy that has been revoked

9.1.6 使用反射API

某些情况下应该优先使用反射API，这是有理由的。

1.反射API与对象API
再使用反射API时，要记住：
·反射API并不限于捕获处理程序；
·大多数反射API方法再Object类型上有对于的方法。
通常，Object上的方法适用于通用程序，而反射方法适用于细粒度的对象控制与操作。

2.状态标记
很多反射方法返回称作“状态标记”的布尔值，表示意图执行的操作是否成功。有时候，状态标记比那些返回修改后
的对象或抛出错误（取决于方法）的反射API方法更加有用。例如，可以使用反射API对下面的代码进行重构：

const o = {}

try {
  Object.defineProperty(o, 'foo', 'bar')
  console.log('success')
}catch(e){
  console.log('failure')
}

再定义新属性时如果发生问题，Reflect.defineProperty()会返回false，而不是抛出错误。因此使用这个
反射方法可以这样重构上面的代码：

const o = {}

if(Reflect.defineProperty(o, 'foo', {value: 'bar'})){
  console.log('success')
}else{
  console.log('failure')
}

//success

以下反射方法都会提供状态标记

`Reflect.defineProperty()
`Reflect.preventExtensions()
`Reflect.setPrototypeOf()
`Reflect.set()
`Reflect.deleteProperty()

3.用一等函数代替操作符
以下反射方法提供只有通用操作符才能完成的操作

`Reflect.get():可以替代对象属性访问操作符
`Reflect.set():可以替代=赋值操作符
`Reflect.has():可以替代in操作符或with()。
`Reflect.deleteProperty():可以替代delete操作符
`Reflect.construct():可以替代new操作符。

4.安全地应用函数

在通过apply方法调用函数时，被调用的函数可能也定义了自己的apply属性（虽然可能性极小）。为了绕过
这个问题，可以使用定义在Function原型上的apply方法，比如：
Function.prototype.apply.call(myFunc, thisVal, argumentList);

这种可怕的代码完全可以使用Reflect.apply来避免

Reflect.apply(myFunc, thisVal, argumentList);

9.1.7代理另一个代理

代理可以拦截反射API的操作，而这意味着完全可以创建一个代理，通过它去代理另一个代理。这样就可以在
一个目标对象之上构建多层拦截网：

const target = {
  foo: 'bar'
}

const firstProxy = new Proxy(target, {
  get(){
    console.log('first proxy')
    return Reflect.get(...arguments)
  }
})

const secondProxy = new Proxy(firstProxy, {
  get(){
    console.log('second proxy')
    return Reflect.get(...arguments)
  }
})
console.log(secondProxy.foo)

//second proxy
//first proxy
//bar

9.1.8 代理的问题与不足

代理是在ECMAScript现有基础之上建立起来的一套新API，因此其实现已经尽力做到最好了。很大程度上，代理
作为对象的虚拟层可以正常使用。但在某些情况下，代理也不能与现在的ECMAScript机制很好地协调。

1.代理中的this

代理潜在的一个问题来源是this值。我们知道，方法中的this通常指向调用这个方法的对象：

const target = {
  thisValEqualsProxy(){
    return this === proxy;
  }
}

const proxy = new Proxy(target, {})
console.log(target.thisValEqualsProxy())  //false
console.log(proxy.thisValEqualsProxy())   //true

从直觉上讲，这样完全没有问题：调用代理上的任何方法，比如proxy.outerMethod()，而这个方法进而又会
调用另一个方法，比如this.innerMethod()，实际上都会调用proxy.innerMethod()。多数情况下，这是符合
预期的行为。可是，如果目标对象依赖于对象标识，那就可能碰到意料之外的问题。

WeakMap保存私有变量，

const wm = new WeakMap();

class User {
  constructor(userId){
    wm.set(this, userId);
  }

  set id(userId){
    wm.set(this, userId)
  }

  get id(){
    return wm.get(this)
  }
}
由于这个实现依赖User实例的对象标识，在这个实例被代理的情况下就会出问题：
const user = new User(123)
console.log(user.id)      //123

const userInstanceProxy = new Proxy(user, {})
console.log(userInstanceProxy.id)

这是因为User实例一开始使用目标对象作为WeakMap的键，代理对象却尝试从自身取得这个实例。要解决这个问题
就需要重新配置代理，把代理User实例改为代理User类本身。之后再创建代理的实例就会以代理实例作为weakMap
的键了：

const UserClassProxy = new Proxy(User, {})
const proxyUser = new UserClassProxy(456);
console.log(proxyUser.id)

2.代理与内部槽位

代理与内置引用类型（比如Array）的实例通常可以很好地协同，但有些ECMAScript内置类型可能会依赖代理
无法控制的机制，结果导致在代理上调用某些方法会出错。

一个典型的例子就是Date类型。根据ECMAScript规范，DATE类型方法的执行依赖this值上的内部槽位[[NumberDate]]
代理对象上不存在这个内置槽位，而且这个内部槽位的值也不能通过普通的get()和set()操作访问到，于是代理
拦截后本应该转发给目标对象的方法会抛出TypeError:

const target = new Date()
const proxy = new Proxy(target, {})

console.log(proxy instanceof Date)  //true
proxy.getDate()
//Uncaught TypeError: this is not a Date object.

9.2 代理捕获器与反射方法

代理可以捕获13中不同的基本操作。这些操作有各自不同的反射API方法、参数、关联ECMAScript操作和不变式

正如前面实例所展示的，有几种不同的js操作会调用同一个捕获器处理程序。不过对于在代理对象上执行的任何
一种操作，只会有一个捕获处理程序被调用。不会存在重复捕获的情况。

只要在代理上调用，所有捕获器都会拦截他们对应的反射API操作。

9.2.1 get()

get()捕获器会在获取属性值的操作中被调用。对应的反射API方法为Reflect.get().

const myTarget = {}

const proxy = new Proxy(myTarget, {
  get(target, property, receiver){
    console.log('get()')
    return Reflect.get(...arguments)
  }
})

proxy.foo   //foo

1.返回值
返回值无限制

2.拦截的操作
·proxy.property
·proxy[property]
·Object.create(proxy)[property]
·Reflect.get(proxy, property, receiver)

3.捕获器处理程序参数
`target:目标对象
`property: 引用的目标对象上的字符串键属性
`receiver: 代理对象或继承代理对象的对象。

4.捕获器不变式
如果target.property不可写且不可配置，则处理程序返回的值必须与target.property匹配
如果target.property不可配置且[[GET]]特性为undefined，处理程序的返回值也必须是undefined。

9.2.2 set()

set()捕获器会在设置属性值的操作中被调用。对应的反射API方法为Reflect.set()

const myTarget = {}

const proxy = new Proxy(myTarget, {
  set(target, property, value, receiver){
    console.log('set()')
    return Reflect.set(...arguments)
  }
})

proxy.foo = 'bar'

1.返回值
返回true表示成功；返回false表示失败，严格模式下会抛出TypeError。

2.拦截的操作
·proxy.property = value
`proxy[property] = value
`Object.create(proxy)[property] = value
`Reflect.set(proxy, property, value, receiver)

3.捕获器处理程序参数
`target: 目标对象
`property: 引用的目标对象上的字符串键属性
`value：要赋给属性的值
`receiver：接收最初赋值的对象。

4.捕获器不变式
如果target.property不可写且不可配置，则不能修改目标属性的值
如果target.property不可配置且[[Set]]特性为undefined，则不能修改目标属性的值
在严格模式下，处理程序中返回false会抛出错误

9.2.3 has()

has()捕获器会在in操作符中被调用。对应的反射API方法为Reflect.has()
const myTarget = {}

const proxy = new Proxy(myTarget, {
  has(target, property){
    console.log('has')
    return Reflect.has(...arguments)
  }
})

console.log('foo' in proxy)   //has

1.返回值
has()必须返回布尔值，表示属性是否存在。返回非布尔值会被转型为布尔值。

2.拦截的操作
`property in proxy
`property in Object.create(proxy)
`with(proxy)  {(property)}
`Reflect.has(proxy, property)

3.捕获器处理程序参数
target：目标对象
property：引用的目标对象上的字符串键属性

4.捕获器不变式
如果target.property存在且不可配置，则处理程序必须返回true
如果target.property存在且目标对象不可扩展，则处理程序必须返回true。

9.2.4 defineProperty()

defineProperty()捕获器会在Object.defineProperty()中被调用。对应的反射API方法为Reflect.defineProperty()

const myTarget = {}

const proxy = new Proxy(myTarget, {
  defineProperty(target, property, descriptor){
    console.log('defineProperty')
    return Reflect.defineProperty(...arguments)
  }
})

Object.defineProperty(proxy, 'foo', { value: 'bar' })
//defineProperty

1.返回值
defineProperty()必须返回布尔值，表示属性是否成功定义。返回非布尔值会被转型为布尔值。

2.拦截的操作
`Object.defineProperty(proxy, property, descriptor)
`Reflect.defineProperty(proxy, property, descriptor)

3.捕获器处理程序参数
`target：目标对象
`property：一i你用的目标对象上的字符串键属性
`descriptor：包含可选的enumerable、configurable、writable、value、get和set定义的对象

4.捕获器不可变式
如果目标对象不可扩展，则无法定义属性
如果目标对象有一个可配置的属性，则不能添加同名的不可配置属性。
如果目标对象有一个不可配置的属性，则不能添加同名的可配置属性。

9.2.5 getOwnPropertyDescriptor()

getOwnPropertyDescriptor()捕获器会在Object.getOwnPropertyDescriptor()中被调用。对应的反射API
方法为Reflect.getOwnPropertyDescriptor()

const myTarget = {}

const proxy = new Proxy(myTarget, {
  getOwnPropertyDescriptor(target, property){
    console.log('getOwnPropertyDescriptor()')
    return Reflect.getOwnPropertyDescriptor(...arguments)
  }
})

Object.getOwnPropertyDescriptor(proxy, 'foo')
//getOwnPropertyDescriptor()

1.返回值
getOwnPropertyDescriptor()必须返回对象，或者在属性不存在时返回undefined。

2.拦截的操作
Object.getOwnPropertyDescriptor(proxy, property)
Reflect.getOwnPropertyDescriptor(proxy, property)

3.捕获器处理程序参数
target: 目标对象
property：引用的目标对象上的字符串键属性。

4.捕获器不变式
如果自有的target.property存在且不可配置，则处理程序必须返回一个表示该属性的对象。
如果自有的target.property存在且可配置，则处理程序必须返回表示该属性可配置的对象
如果自有的target.property存在且target不可扩展，则处理程序必须返回同一个表示该属性存在的对像。
如果target.property不存在且target不可扩展，则处理程序必须返回undefined表示该属性不存在。
如果target.property不存在，则处理程序不能返回表示该属性可配置的对象。

9.2.6 deleteProperty()

deleteProperty()捕获器会在delete操作符中被调用。对应的反射API方法为Reflect.deleteProperty()

const myTarget = {}

const proxy = new Proxy(myTarget, {
  deleteProperty(target, property){
    console.log('deleteProperty()')
    return Reflect.deleteProperty(...arguments)
  }
})

delete proxy.foo;
//deleteProperty()

1.返回值
deleteProperty()必须返回布尔值，表示删除属性时否成功。返回非布尔值会被转型为布尔值。

2.拦截的操作
delete proxy.property
delete propery[property]
Reflect.deleteProperty(proxy, property)

3.捕获器处理程序参数
target: 目标对象
property: 引用的目标对象上的字符串键属性

4.捕获器不变式
如果自有的target.property存在且不可配置，则处理程序不能删除这个属性。

9.2.7 ownKeys()

ownKeys()捕获器会在Object.keys()及类似方法中被调用。对应的反射API方法为Reflect.ownKeys()

const myTarget = {}

const proxy = new Proxy(myTarget, {
  ownKeys(target){
    console.log('ownKeys()')
    return Reflect.ownKeys(...arguments)
  }
})
Object.keys(proxy)
//ownKeys()

1.返回值
ownKeys()必须返回包含字符串或符号的可枚举对象。

2.拦截的操作
Object.getOwnPropertyNames(proxy)
Object.getOwnPropertySymbols(proxy)
Object.keys(proxy)
Reflect.ownKeys(proxy)

3.捕获器处理程序参数
target: 目标对象

4.捕获器不变式
返回的可枚举对象必须包含target的所有不可配置的自有属性
如果target不可扩展，则返回可枚举对象必须准确地包含自有属性键。

9.2.8 getPrototypeOf()

getPrototypeOf()捕获器会在Object.getPrototypeOf()中被调用。对应的反射API方法为Reflect.getPrototypeOf()

const myTarget = {}

const proxy = new Proxy(myTarget, {
  getPrototypeOf(target){
    console.log('getPrototypeOf()')
    return Reflect.getPrototypeOf(...arguments)
  }
})

Object.getPrototypeOf(proxy)
//getPrototypeOf()

1.返回值
getPrototypeOf()必须返回对象或null

2.拦截的操作
Object.getPrototypeOf(proxy)
Reflect.getPrototypeOf(proxy)
proxy.__proto__
Object.prototype.isPrototypeOf(proxy)
proxy instanceof Object

3.捕获器处理程序参数
target: 目标对象

4.捕获器不变式
如果target不可扩展，则Object.getPrototypeOf(proxy)唯一有效的返回值就是Object.getPrototypeOf(target)
的返回值。

9.2.9 setPrototypeOf()  //原型赋值

const myTarget = {}
const proxy = new Proxy(myTarget, {
  setPrototypeOf(target, prototype){
    console.log('setPrototypeOf()')
    return Reflect.setPrototypeOf(...arguments)
  }
})
Object.setPrototypeOf(proxy, {ccc:123})

9.2.10 isExtensible()   //是否可扩展

const myTarget = {}

const proxy = new Proxy(myTarget, {
  isExtensible(target){
    console.log('isExtensible')
    return Reflect.isExtensible(...arguments)
  }
})

Object.isExtensible(proxy)

9.2.11 preventExtensions() //表示是否已经不可扩展

const myTarget = {}

const proxy = new Proxy(myTarget, {
  preventExtensions(target){
    console.log('preventExtensions')
    return Reflect.preventExtensions(...arguments)
  }
})
Object.preventExtensions(proxy)
//preventExtensions

9.2.12 apply

const myTarget = () => {}

const proxy = new Proxy(myTarget, {
  apply(target, thisArg, ...argumentsList){
    console.log('apply()')
    return Reflect.apply(...arguments)
  }
})

proxy();

1.返回值
无限制

2.拦截操作
proxy(...argumentList)
Function.prototype.apply(thisArg, argumentList)
Function.prototype.call(thisArg, ...argumentList)
Reflect.apply(target, thisArgument, argumentList)

3.捕获器处理程序参数
target: 目标对象
thisArg: 调用函数时的this参数
argumentsList: 调用函数时的参数列表

4.捕获器不变式
target必须时一个函数对象

9.2.13 construct