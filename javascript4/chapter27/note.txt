第27章 工作者线程

本章内容
·工作者线程简介
·使用专门的工作者线程执行后台任务
·使用共享的工作者线程
·通过服务工作者线程管理请求


前端开发者常说，js时单线程的。这种说法虽然有些简单，但描述了js在浏览器中的一般行为。

单线程就意味着不能像多线程语言那样把工作委托给独立的线程或进程去做。js的单线程可以包装它与不同浏览器
API兼容。假如js可以多线程执行并发更高，那么像DOM这样的API就会出现问题。因此，POSIX线程或java的
Thread等创痛并发结构都不适合js

而这也正是工作者线程的价值坐在：允许把主线程的工作转嫁给独立的实体，而不会改变现有的单线程模式。虽然
本章要介绍的各种工作者线程有不同的形式和功能，但他们的共同的特点都是独立于js的主执行环境。

27.1 工作者线程简介

js环境实际上是运行在托管操作系统中的虚拟环境。在浏览器中每打开一个页面，就会分配一个它自己的环境。
这样，每个页面都有自己的内存、事件循环、DOM，等。每个页面就相当于一个沙盒，不会干扰其他页面。对于
浏览器来说，同时管理多个环境是非常简单的，因为所有这些环境都是并行执行的。

使用工作者线程，浏览器可以在原始页面环境之外再分配一个完全独立的二级子环境。这个子环境不能与依赖
单线程交互API操作（如DOM），单可以与父环境并行执行代码。

27.1.1 工作者线程与线程

作为介绍，通常需要将工作者线程与执行线程进行比较。在许多方面，这是一个恰当的比较，因为工作者线程
和线程确实有很多共同之处。

·工作者线程是以实际线程实现的。例如，Blink浏览器引擎实现工作者线程的WorkerThread就对应着底层线程
·工作者线程并行执行。虽然页面和工作者线程都是单线程js环境，每个环境中的指令则可以并行执行。
·工作者线程可以共享某些内存。工作者线程能够使用SharedArrayBuffer在多个环境间共享内容。虽然线程会
使用锁实现并发控制，但js使用Atomics接口实现并发控制。
工作者线程与线程有很多类似之处，但也有重要的区别。

·工作者线程不共享全部内存。在传统线程模型中，多线程有能力读写共享内存空间。除了SharedArrayBuffer外，
从工作者线程进出的数据需要复制或转移
·工作者线程不一定在同一个进程里。通常，一个进程可以在内部产生多个线程。根据浏览器引擎的实现，工作者
线程可能与页面属于同一进程，也可能不属于。例如，Chrome的Blink引擎对共享工作者线程和服务工作者线程
使用独立的进程。
·创建工作者线程的开销更大。工作者线程有自己独立的事件循环、全局对象、事件处理此程序和其他js环境必须
的特性。创建这些结构的代价不容忽视。
无论形式还是功能，工作者线程都不是用于代替线程的。

27.1.2 工作者线程的类型

web工作者线程规范中定义了三种主要的工作者线程：专用工作者线程、共享工作者线程和服务工作者线程。
现代浏览器都支持这些工作者线程。

1.专用工作者线程

专用工作者线程，通常简称为工作者线程、Web Worker或Worker，是一种实用的工具，可以让脚本单独创建
一个js线程，以执行委托的任务。专用工作者线程，顾名思义，只能被创建它的页面使用。

2.共享工作者线程

共享工作者线程与专用工作者线程非常相似。主要区别时共享工作者线程可以被多个不同的上下文使用，包括
不同的页面。任何与创建共享工作者线程的脚本同源的脚本，都可以向通向工作者线程发送消息或从中接收消息。

3.服务工作者线程

服务工作者线程与专用工作者线程和共享工作者线程截然不同。它的主要用途是拦截、重定向和修改页面发出的
请求，充当网络请求的仲裁者的角色。

27.1.3 WorkerGlobalScope

在网页上，window对象可以向运行在其中的脚本暴露各种全局变量。在工作者线程内部，没用window的概念。
这里的全局对象是WorkerGlobalScope的实例，通过self关键字暴露出来。

1.WorkerGlobalScope属性和方法

self上可用的属性是window对象上属性的严格子集。其中有些属性会返回特定于工作者线程的版本。

·navigator：返回于工作者线程关联的WorkerNavigator
·self：返回WorkerGlobalScope对象
·location：返回与工作者线程关联的WorkerLocation
·performance：返回（只包含特定属性和方法的）Performance对象
·console：返回与工作者线程关联的console对象；对API没有限制。
·caches：返回与工作者关联的CacheStorage对象；对API没有限制。
·indexDB：返回IDBFactory对象
·isSecureContext：返回布尔值，表示工作者线程上下文是否安全
·origin：返回WorkerGlobalScope的源

类似地，self对象上暴露的一些方法也是window上方法的子集。这些self上的方法也与window上对应的方法
操作一样。

·atob()
·btoa()
·clearInterval()
·clearTimeout()
·createImageBitmap()
·fetch()
·setInterval()
·setTimeout()

WorkerGlobalScope还增加了新的全局方法importScripts()，只在工作者线程内可以用。

2.WorkerGlobalScope的子类

实际上并不是所有地方都实现了WorkerGlobalScope。每种类型的工作者线程都使用了子集特定的全局对象，
这些继承自WorkerGlobalScope。

·专用工作者线程使用DedicatedWorkerGlobalScope。
·共享工作者线程使用SharedWorkerGlobalScope。
·服务工作者线程使用ServiceWorkerGlobalScope。

27.2 专用工作者线程

专用工作者线程是最简单的web工作者线程，网页中的脚本可用创建专用工作者线程来执行在页面线程之外的其他
任务。这样的线程可用于父页面交换信息、发送网络请求、执行文件输入/输出、进行密集计算、处理大量数据，
以及实现其他不适合在页面执行线程里做的任务（否则会导致页面响应迟钝）

注意：在使用工作者线程时，脚本在哪里执行、在哪里加载时非常重要的概念。除非另有说明，否则本章假定main.js
是从https://example.com域的根路径加载并执行的顶级脚本。

27.2.1 专用工作者线程的基本概念

可用把专用工作者线程称为后台脚本（background script）。javascript线程的各个方面，包括生命周期管理、
代码路径和输入/输出，都由初始化线程时提供的脚本来控制。该脚本也可用再请求其他脚本，但一个线程总是从
一个脚本源开始。

1.创建专用工作者线程

创建专用工作者线程最常见的方式是加载js文件。把文件路径提供给Worker构造函数，然后构造函数再在后台
异步加载脚本并实例化工作者线程。传给构造函数的文件路径可用是多种形式。

下面的代码演示了如何创建空的专用工作者线程：

//emptyWorker.js
//空的js工作者线程文件

//main.js
console.log(location.href)
const worker = new Worker(location.href + 'demo1/' + 'emptyWorker.js')
console.log(worker)

这个例子非常简单，但涉及几个基本概念。
·emptyWorker.js文件是从绝对路径加载的。根据应用程序的结构，使用绝对URL经常是多余的。
·这个文件是在后台夹杂的，工作者线程的初始化完全独立于main.js
·工作者线程本身存在于一个独立的js环境中，因此main.js必须以Worker对象为代理实现于工作者线程通信。
在上面的例子中，该对象被赋值给了worker变量。
·虽然响应的工作者线程可能换不存在，但该Worker对象已哎原始环境中可用了。