第八章 对象、类与面向对象编程

理解对象
理解对象创建过程
理解继承
理解类

ECMA-262将对象定义为一组属性的无序集合。严格来说，这意味着对象就是一组没有特定顺序的值。对象的每个
属性或方法都由一个名称来表示，这个名称映射到一个值。正因为如此（以及其他还未讨论的原因），可用把
ECMAScript的对象想象成一张散列表，其中的内容就是一组名/值对，值可用时数据或者函数。

8.1 理解对象

创建自定义对象的通常方法是创建object的一个新实例，然后再给它添加属性和方法，如下列所示：
let person = new Object();
person.name = 'nicholas'
person.age = 29;
person.job = 'software Engineer'
person.sayName = function(){
  console.log(this.name)
}

对象字面量型式

let person = {
  name: 'nicholas',
  age: 29,
  ...
}

8.1.1 属性的类型

ECMA-262使用一些内部特性来描述属性的特征。这些特性是由为javascript实现引擎的规范定义的。因此，
开发者不能再javascript中直接访问这些特性。为了将某个特性表示为内部特性，规范会用两个中括号把
特性的名称括起来，比如[[Enumerable]]
属性分两种：数据属性和访问器属性。

1.数据属性
数据属性包含一个保存数据值的位置。值会从这个位置读取，也会写入到这个位置。数据属性由4个特性描述他们的
行为。
·[[Configurable]]:表示属性是否可用通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把
它改为访问器属性。默认情况下，所有直接定义的对象上的属性的这个特性都是true，如前面的例子所示。
·[[Enumerable]]:表示属性是否可以通过for-in循环返回。默认情况下，所有直接定义在对象上的属性的这个
特性都是true，如前面的例子所示
·[[Writable]]：表示属性的值是否可以被修改。默认情况下，所有直接定义在对象上的属性的这个特性都是true
如前面的例子所示
·[[Value]]:包含属性实际的值。这就是前面提到的那个读取和写入属性值的位置。这个特性的默认值为undefined.

在像前面例子中那样将属性显式添加到对象之后，[[Configurable]],[[Enumerable]]和[[Writable]]都会被
设置为true，而[[Value]]特性会被设置为指定的值。

let person = {
  name: 'Nicholas'
}

要修改属性的默认特性，就必须使用Object.definePropery()方法。这个方法接收3个参数：要给其添加属性
的对象、属性的名称和一个描述符对象。最后一个参数，即描述符对象上的属性可以包含：configurable、
enumerable,writable和value,跟相关特性的名称一一对应。根据要修改的特性，可以设置其中一个或多个值。

let person = {}
Object.defineProperty(person, 'name', {
  writable: false,
  value: 'nicholas'
})

console.log(person.name)  //nicholas
person.name = 'greg'
console.log(person.name)  //nicholas

在非严格模式下尝试给这个属性重新赋值会被忽略。
在严格模式下，尝试修改只读属性的值会配出错误。

类似的规则也适用于创建不可配置的属性。

let person = {}

Object.defineProperty(person, 'name', {
  configurable: false,
  value: 'Nicholas'
})
console.log(person.name)  //Nicholas
delete person.name;
console.log(person.name)  //Nicholas

这个例子把configurable设置为false，意味着这个属性不能从对象上删除。非严格模式下对这个属性调用delete
没有效果，严格模式下会抛出错误。此外，一个属性被定义为不可配置之后，就不能在变回可配置的了。再次
调用Object.defineProperty()并修改任何非writable属性会导致错误：

let person = {}

Object.defineProperty(person, 'name', {
  configruable: false,
  value: 'nicholas'
})

Object.defineProperty(person, 'name', {
  configruable: true,
  value: 'NICHOLAS'
})
//Type Error: cannot redefine property

因此，虽然可以对同一个属性多次调用Object.definePropery()，但在把configurable设置为false之后就
受限制了。

在调用Object.defineProperty()时，configurable,enumerable和writable的值如果不指定，则都默认为
false。多数情况下，可能都不需要Object.defineProperty()提供这些强大的设置，但要理解javascript对象
就要理解这些概念。

2.访问器属性

访问器属性不包含数据值。相反，他们包含一个获取(getter)函数和一个设置(setter)函数，不过这两个函数
不是必须的。在读取访问器属性时，会调用获取函数，这个函数的责任就是返回一个有效的值。在写入访问器属性
时，会调用设置函数并传入新值，这个函数必须决定对数据做处什么修改。访问器属性有4个特性描述他们的行为。

·[[Configurable]]:表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把
它改为数据属性。默认情况下，所有直接定义在对象上的属性的这个特性都是true。
·[[Enumerable]]：表示属性是否可以通过for-in循环返回。默认情况下，所有直接定义在对象上的属性的这个
特性都是true
·[[Get]]: 获取函数，在读取属性时调用。默认值undefined.
·[[Set]]: 设置函数，在写入属性时调用。默认值为undefined

访问器属性时不能直接定义的，必须使用Object.defineProperty()。

let book = {
  year_: 2017,
  edition: 1
}
Object.defineProperty(book, 'year', {
  get(){
    return this.year_;
  },
  set(newValue){
    if(newValue > 2017){
      this.year_ = newValue;
      this.edition += newValue - 2017
    }
  }
})

book.year = 2018;
console.log(book.edition)

获取函数和设置函数不一定都要定义。值定义获取函数意味着属性是只读的，尝试修改属性会被忽略。在严格模式
下，尝试写入之定义了获取函数的属性会抛出错误。类似地，只有一个设置函数的属性是不能读取的。非严格模式
下读取会返回Undefined，严格模式下会抛出错误。

在不支持Object.defineProperty()的浏览器中没有办法修改[[Configurable]]或[[Enumerable]]

注意： 在ECMAScript5以前，开发者会使用两个非标准的访问创建访问器属性：__defineGetter__()和
__defineSetter__().这两个方法最早是Firefox引入的，后来Safari、Chrome和Opera也实现了。

8.1.2 定义多个属性

在一个对象上同时定义多个属性的可能性是非常大的。为此ECMAScript提供了Object.defineProperties()
方法。这个方法可以通过多个描述符一次性定义多个属性。它接收两个参数：要为之添加或修改属性的对象和
另一个描述符对象，其属性与要添加或修改的属性一一对应。

let book = {}
Object.defineProperties(book, {
  year_: {
    value: 2017
  },
  edition: {
    value: 1
  },
  year: {
    get(){
      return this.year_;
    },
    set(newValue){
      if(newValue > 2017){
        this.year_ = newValue;
        this.edition += newValue - 2017;
      }
    }
  }
})

这段代码在book对象上定义了两个数据属性year_和edition，还有一个访问器属性year。
对象和上一节示例一样。唯一的区别是所有属性都是同时定义的，并且数据属性的configurable、enumerable
和writable特性值都是false。
可以使用Object.getOwnPropertyDescriptors(book)查看。

//edition: {value: 1, writable: false, enumerable: false, configurable: false}
//year: {enumerable: false, configurable: false, get: ƒ, set: ƒ}
//year_: {value: 2017, writable: false, enumerable: false, configurable: false}


8.1.3 读取属性的特性

使用Object.getOwnPropertyDescriptor()方法可以取得指定数据的属性描述符。这个方法接收两个参数：
属性所在的对象和要取得其描述符的属性名。返回值是一个对象，对于访问器属性包含configurable、enumerable
get和set数学，对于数据数学包含configurable、enumerable、writable 和 value属性。

let book = {}
Object.defineProperties(book, {
  year_:{
    value: 2017
  },
  edition:{
    value: 1
  },
  year: {
    get: function(){
      return this.year_;
    },
    set: function(){
      if(newValue > 2017){
        this.year_ = newValue;
        this.edition += newValue - 2017;
      }
    }
  }
})

let descriptor = Object.getOwnPropertyDescriptor(book, 'year_')
//{value: 2017, writable: false, enumerable: false, configurable: false}

let descriptor = Object.getOwnPropertyDescriptor(book, 'year')
//{enumerable: false, configurable: false, get: ƒ, set: ƒ}

对于数据属性year_，value等于原来的值，configurable是false，get是undefined。对于访问器属性year,
value是undefined，enumerable是false，get是一个指向获取函数的指针。

ESMAScript2017新增了Object.getOwnPropertyDescriptors()静态方法。这个方法实际上会在每个自有属性
上调用Object.getOwnPropertyDescriptor()并在一个新对象中返回他们。对于前面的例子，使用这个静态方法
返回如下对象：

8.1.4 合并对象

javascript开发者经常觉得“合并”(merge)两个对象很有用。更具体地说，就是把源对象所有的本地属性一起
复制到目标对象上。有时候这种操作也被称为“混入”(mixin)，因为目标对象通过混入源对象的属性得到了增强。

ECMAScript6专门为合并对象提供了Object.assign()方法。这个方法接收一个目标对象和一个或多个源对象
作为参数，然后将每个源对象中可枚举(Object.propertyIsEnumerable()返回true)和自有(Object.hasOwnProperty()
返回true)属性复制到目标对象。以字符串和符号为键的属性会被复制。对每个符合条件的属性，这个方法会使用
源对象上的[[Get]]取得属性的值，然后使用目标对象上的[[Set]]设置属性的值。

let dest, src, result;

dest = {}
src = { id: 'src'}

result = Object.assign(dest, src);

//Object.assign修改目标对象，也会返回修改后的目标对象
console.log(dest === result)  //true
console.log(dest !== src)     //true

//多个源对象
dest = {}

result = Object.assign(dest, {a: 'foo'}, {b: 'bar'})
console.log(result)
//{a: "foo", b: "bar"}

//获取函数与设置函数
let dest = {
  set a(val){
    console.log(`Invoked dest setter with param ${val}`)
  }
}

let src = {
  get a(){
    console.log('Invoked src  getter')
    return 'foo'
  }
}

Object.assign(dest, src);
//调用src的获取方法
//调用dest的设置方法并传入参数'foo'
//因为这里的设置函数不执行复制操作
//所以实际上并没有把值转移过来
console.log(dest);

//Invoked src  getter
//Invoked dest setter with param foo
//{}

Object.assign()实际上对每个元对象指向的是浅复制。如果多个源对象都有相同的属性，则使用最后一个复制
的值。此外，从源对象访问器属性取得的值，比如获取函数，会作为一个静态值赋给目标对象。换句话说，不能
在两个对象间转移获取函数和设置函数。

let dest, src, result;

dest = { id: 'dest'}

result = Object.assign(dest, { id: 'src1', a: 'foo'}, {id: 'src2', b: 'bar'})

console.log(result) //{id:src2, a: foo, b: bar}

dest = {
  set id(x){
    console.log(x)
  }
}

Object.assign(dest, {id: 'first'}, {id: 'second'}, {id: 'third'});
//first
//second
//third
//{}

//对象引用
dest = {}
src = { a: { }}

Object.assign(dest, src);
//复制意味着只会复制对象的引用
console.log(dest)             //{a: {…}}
console.log(dest.a === src.a) //true

//错误处理
dest = {}
src = {
  a: 'foo',
  get b(){
    throw new Error();
  },
  c: 'bar'
}

try{
  Object.assign(dest, src)
}catch(e){}

//Object.assign()没办法回滚以及完成的修改
//因此在抛出错误之前，目标对象上一级完成的修改会继续存在：
console.log(dest) //{a: foo}

8.1.5 对象标识及相等判断

在ECMAScript6之前，有些特殊情况即使是===操作符也无能为力：
//这些是===符合预期的情况
console.log(true === 1) //false
console.log({} == {})   //false
console.log("2" === 2)  //false

//这些情况在不同javascript引擎中表县不同，但仍被认为相等
console.log(+0 === -0)  //true
console.log(+0 === 0)   //true
console.log(-0 === 0)   //true

//要确定NaN的相等性，必须使用极为讨厌的isNaN()
console.log(NaN === NaN)  //false
console.log(isNaN(NaN))   //true

为改善这类情况，ECMAScript6规范新增了Object.is()，这个方法与===很像，但同时也考虑到了上述边界情形。
这个方法必须接收两个参数：
console.log(Object.is(true, 1)) //false
console.log(Object.is({}, {}))  //false
console.log(Object.is('2', 2))  //false

//正确的0，-0， +0 相等/不相等判定
console.log(Object.is(+0, -0))  //false
console.log(Object.is(+0, 0))   //true
console.log(Object.is(-0, 0))   //false

//正确的NaN相等判定
console.log(Object.is(NaN, NaN))//true

要检查超过两个值，递归地利用相等性传递即可：
function recursivelyCheckEqual(x, ...rest){
  return Object.is(x, rest[0]) && 
    (rest.length < 2 || recursivelyCheckEqual(...rest));
}

console.log(recursivelyCheckEqual(1, 1, 1))

8.1.6 增强的对象语法

ECMAScript6为定义和操作对象新增了很多机器有用的语法糖特性。这些特性都没有改变现有引擎的行为，但
极大地提升了处理对象的方便程度。

1. 属性值简写
在给对象添加变量的时候，开发者经常会发现属性名和变量名是一样的

let name = 'matt'
let person = {
  name: name
}

代码压缩程序会在不同作用域间保留属性名，以防止找不到引用，
function makePerson(name){
  return {name}
}
在这里，即使参数表示法只限定于函数作用域，编译器也会保留初始的name标识符。如果使用Google Closure
编译器颜色，那么函数参数会被缩短，而属性名不变：
function makePerson(a){
  return {
    name: a
  }
}

2.可计算属性

在引入可计算属性之前，如果想使用变量的值作为属性，那么必须先声明对象，然后使用中括号语法来添加属性。
换句话说，不能再对象字面量中直接动态命名属性。
const nameKey = 'name'
const ageKey = 'age'
const jobKey = 'job'

let person = {}
person[nameKey] = 'Matt'
person[ageKey] = 27;
person[jobKey] = 'software engineer'
console.log(person)
//{name: "Matt", age: 27, job: "software engineer"}

有了可计算属性，就可以在对象字面量中完成动态属性赋值。中括号包围的对象属性键告诉运行时将其作为
javascript表达式而不是字符串来求值

const nameKey = 'name'
const ageKey = 'age'
const jobKey = 'job'

let person = {
  [nameKey]: 'Matt',
  [ageKey]: 27,
  [jobKey]: 'software engineer'
}
console.log(person)
//{name: "Matt", age: 27, job: "software engineer"}

因为被当作javascript表达式求值，所以可计算属性本身可以是复杂的表达式，在实例化时再求值：

const nameKey = 'name'
const ageKey = 'age'
const jobKey = 'job'
let uniqueToken = 0;

function getUniqueKey(key){
  return `${key}_${uniqueToken++}`;
}

let person = {
  [getUniqueKey(nameKey)]: 'matt',
  [getUniqueKey(ageKey)]: 27,
  [getUniqueKey(jobKey)]: 'software engineer',
}
console.log(person)
//name_0: "matt", age_1: 27, job_2: "software engineer"}

注意： 可计算属性表达式中抛出任何错误都会中断对象创建。如果计算属性的表达式有副作用，那就要小心了
因为如果表达式抛出错误，那么之前完成的计算是不能回滚的。

3.简写方法名

let person = {
  sayName(name){
    console.log(`my name is ${name}`)
  }
}

简写方法名对象获取函数和设置函数也是适用的：
let person = {
  name_: '',
  get name(){
    return this.name_;
  },
  set name(name){
    this.name_ = name;
  },
  sayName(){
    console.log(`My name is ${this.name_}`)
  }
}

简写方法名与可计算属性键相互兼容：

const methodKey = 'sayName';

let person = {
  [methodKey](name){
    console.log(`My name is ${name}`)
  }
}

8.1.7 对象解构

