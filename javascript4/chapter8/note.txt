第八章 对象、类与面向对象编程

理解对象
理解对象创建过程
理解继承
理解类

ECMA-262将对象定义为一组属性的无序集合。严格来说，这意味着对象就是一组没有特定顺序的值。对象的每个
属性或方法都由一个名称来表示，这个名称映射到一个值。正因为如此（以及其他还未讨论的原因），可用把
ECMAScript的对象想象成一张散列表，其中的内容就是一组名/值对，值可用时数据或者函数。

8.1 理解对象

创建自定义对象的通常方法是创建object的一个新实例，然后再给它添加属性和方法，如下列所示：
let person = new Object();
person.name = 'nicholas'
person.age = 29;
person.job = 'software Engineer'
person.sayName = function(){
  console.log(this.name)
}

对象字面量型式

let person = {
  name: 'nicholas',
  age: 29,
  ...
}

8.1.1 属性的类型

ECMA-262使用一些内部特性来描述属性的特征。这些特性是由为javascript实现引擎的规范定义的。因此，
开发者不能再javascript中直接访问这些特性。为了将某个特性表示为内部特性，规范会用两个中括号把
特性的名称括起来，比如[[Enumerable]]
属性分两种：数据属性和访问器属性。

1.数据属性
数据属性包含一个保存数据值的位置。值会从这个位置读取，也会写入到这个位置。数据属性由4个特性描述他们的
行为。
·[[Configurable]]:表示属性是否可用通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把
它改为访问器属性。默认情况下，所有直接定义的对象上的属性的这个特性都是true，如前面的例子所示。
·[[Enumerable]]:表示属性是否可以通过for-in循环返回。默认情况下，所有直接定义在对象上的属性的这个
特性都是true，如前面的例子所示
·[[Writable]]：表示属性的值是否可以被修改。默认情况下，所有直接定义在对象上的属性的这个特性都是true
如前面的例子所示
·[[Value]]:包含属性实际的值。这就是前面提到的那个读取和写入属性值的位置。这个特性的默认值为undefined.

在像前面例子中那样将属性显式添加到对象之后，[[Configurable]],[[Enumerable]]和[[Writable]]都会被
设置为true，而[[Value]]特性会被设置为指定的值。

let person = {
  name: 'Nicholas'
}

要修改属性的默认特性，就必须使用Object.definePropery()方法。这个方法接收3个参数：要给其添加属性
的对象、属性的名称和一个描述符对象。最后一个参数，即描述符对象上的属性可以包含：configurable、
enumerable,writable和value,跟相关特性的名称一一对应。根据要修改的特性，可以设置其中一个或多个值。

let person = {}
Object.defineProperty(person, 'name', {
  writable: false,
  value: 'nicholas'
})

console.log(person.name)  //nicholas
person.name = 'greg'
console.log(person.name)  //nicholas

在非严格模式下尝试给这个属性重新赋值会被忽略。
在严格模式下，尝试修改只读属性的值会配出错误。

类似的规则也适用于创建不可配置的属性。

let person = {}

Object.defineProperty(person, 'name', {
  configurable: false,
  value: 'Nicholas'
})
console.log(person.name)  //Nicholas
delete person.name;
console.log(person.name)  //Nicholas

这个例子把configurable设置为false，意味着这个属性不能从对象上删除。非严格模式下对这个属性调用delete
没有效果，严格模式下会抛出错误。此外，一个属性被定义为不可配置之后，就不能在变回可配置的了。再次
调用Object.defineProperty()并修改任何非writable属性会导致错误：

let person = {}

Object.defineProperty(person, 'name', {
  configruable: false,
  value: 'nicholas'
})

Object.defineProperty(person, 'name', {
  configruable: true,
  value: 'NICHOLAS'
})
//Type Error: cannot redefine property

因此，虽然可以对同一个属性多次调用Object.definePropery()，但在把configurable设置为false之后就
受限制了。

在调用Object.defineProperty()时，configurable,enumerable和writable的值如果不指定，则都默认为
false。多数情况下，可能都不需要Object.defineProperty()提供这些强大的设置，但要理解javascript对象
就要理解这些概念。

2.访问器属性

访问器属性不包含数据值。相反，他们包含一个获取(getter)函数和一个设置(setter)函数，不过这两个函数
不是必须的。在读取访问器属性时，会调用获取函数，这个函数的责任就是返回一个有效的值。在写入访问器属性
时，会调用设置函数并传入新值，这个函数必须决定对数据做处什么修改。访问器属性有4个特性描述他们的行为。

·[[Configurable]]:表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把
它改为数据属性。默认情况下，所有直接定义在对象上的属性的这个特性都是true。
·[[Enumerable]]：表示属性是否可以通过for-in循环返回。默认情况下，所有直接定义在对象上的属性的这个
特性都是true
·[[Get]]: 获取函数，在读取属性时调用。默认值undefined.
·[[Set]]: 设置函数，在写入属性时调用。默认值为undefined

访问器属性时不能直接定义的，必须使用Object.defineProperty()。

let book = {
  year_: 2017,
  edition: 1
}
Object.defineProperty(book, 'year', {
  get(){
    return this.year_;
  },
  set(newValue){
    if(newValue > 2017){
      this.year_ = newValue;
      this.edition += newValue - 2017
    }
  }
})

book.year = 2018;
console.log(book.edition)

获取函数和设置函数不一定都要定义。值定义获取函数意味着属性是只读的，尝试修改属性会被忽略。在严格模式
下，尝试写入之定义了获取函数的属性会抛出错误。类似地，只有一个设置函数的属性是不能读取的。非严格模式
下读取会返回Undefined，严格模式下会抛出错误。

在不支持Object.defineProperty()的浏览器中没有办法修改[[Configurable]]或[[Enumerable]]

注意： 在ECMAScript5以前，开发者会使用两个非标准的访问创建访问器属性：__defineGetter__()和
__defineSetter__().这两个方法最早是Firefox引入的，后来Safari、Chrome和Opera也实现了。

8.1.2 定义多个属性

在一个对象上同时定义多个属性的可能性是非常大的。为此ECMAScript提供了Object.defineProperties()
方法。这个方法可以通过多个描述符一次性定义多个属性。它接收两个参数：要为之添加或修改属性的对象和
另一个描述符对象，其属性与要添加或修改的属性一一对应。

let book = {}
Object.defineProperties(book, {
  year_: {
    value: 2017
  },
  edition: {
    value: 1
  },
  year: {
    get(){
      return this.year_;
    },
    set(newValue){
      if(newValue > 2017){
        this.year_ = newValue;
        this.edition += newValue - 2017;
      }
    }
  }
})

这段代码在book对象上定义了两个数据属性year_和edition，还有一个访问器属性year。
对象和上一节示例一样。唯一的区别是所有属性都是同时定义的，并且数据属性的configurable、enumerable
和writable特性值都是false。
可以使用Object.getOwnPropertyDescriptors(book)查看。

//edition: {value: 1, writable: false, enumerable: false, configurable: false}
//year: {enumerable: false, configurable: false, get: ƒ, set: ƒ}
//year_: {value: 2017, writable: false, enumerable: false, configurable: false}


8.1.3 读取属性的特性

使用Object.getOwnPropertyDescriptor()方法可以取得指定数据的属性描述符。这个方法接收两个参数：
属性所在的对象和要取得其描述符的属性名。返回值是一个对象，对于访问器属性包含configurable、enumerable
get和set数学，对于数据数学包含configurable、enumerable、writable 和 value属性。

let book = {}
Object.defineProperties(book, {
  year_:{
    value: 2017
  },
  edition:{
    value: 1
  },
  year: {
    get: function(){
      return this.year_;
    },
    set: function(){
      if(newValue > 2017){
        this.year_ = newValue;
        this.edition += newValue - 2017;
      }
    }
  }
})

let descriptor = Object.getOwnPropertyDescriptor(book, 'year_')
//{value: 2017, writable: false, enumerable: false, configurable: false}

let descriptor = Object.getOwnPropertyDescriptor(book, 'year')
//{enumerable: false, configurable: false, get: ƒ, set: ƒ}

对于数据属性year_，value等于原来的值，configurable是false，get是undefined。对于访问器属性year,
value是undefined，enumerable是false，get是一个指向获取函数的指针。

ESMAScript2017新增了Object.getOwnPropertyDescriptors()静态方法。这个方法实际上会在每个自有属性
上调用Object.getOwnPropertyDescriptor()并在一个新对象中返回他们。对于前面的例子，使用这个静态方法
返回如下对象：

8.1.4 合并对象

javascript开发者经常觉得“合并”(merge)两个对象很有用。更具体地说，就是把源对象所有的本地属性一起
复制到目标对象上。有时候这种操作也被称为“混入”(mixin)，因为目标对象通过混入源对象的属性得到了增强。

ECMAScript6专门为合并对象提供了Object.assign()方法。这个方法接收一个目标对象和一个或多个源对象
作为参数，然后将每个源对象中可枚举(Object.propertyIsEnumerable()返回true)和自有(Object.hasOwnProperty()
返回true)属性复制到目标对象。以字符串和符号为键的属性会被复制。对每个符合条件的属性，这个方法会使用
源对象上的[[Get]]取得属性的值，然后使用目标对象上的[[Set]]设置属性的值。

let dest, src, result;

dest = {}
src = { id: 'src'}

result = Object.assign(dest, src);

//Object.assign修改目标对象，也会返回修改后的目标对象
console.log(dest === result)  //true
console.log(dest !== src)     //true

//多个源对象
dest = {}

result = Object.assign(dest, {a: 'foo'}, {b: 'bar'})
console.log(result)
//{a: "foo", b: "bar"}

//获取函数与设置函数
let dest = {
  set a(val){
    console.log(`Invoked dest setter with param ${val}`)
  }
}

let src = {
  get a(){
    console.log('Invoked src  getter')
    return 'foo'
  }
}

Object.assign(dest, src);
//调用src的获取方法
//调用dest的设置方法并传入参数'foo'
//因为这里的设置函数不执行复制操作
//所以实际上并没有把值转移过来
console.log(dest);

//Invoked src  getter
//Invoked dest setter with param foo
//{}

Object.assign()实际上对每个元对象指向的是浅复制。如果多个源对象都有相同的属性，则使用最后一个复制
的值。此外，从源对象访问器属性取得的值，比如获取函数，会作为一个静态值赋给目标对象。换句话说，不能
在两个对象间转移获取函数和设置函数。

let dest, src, result;

dest = { id: 'dest'}

result = Object.assign(dest, { id: 'src1', a: 'foo'}, {id: 'src2', b: 'bar'})

console.log(result) //{id:src2, a: foo, b: bar}

dest = {
  set id(x){
    console.log(x)
  }
}

Object.assign(dest, {id: 'first'}, {id: 'second'}, {id: 'third'});
//first
//second
//third
//{}

//对象引用
dest = {}
src = { a: { }}

Object.assign(dest, src);
//复制意味着只会复制对象的引用
console.log(dest)             //{a: {…}}
console.log(dest.a === src.a) //true

//错误处理
dest = {}
src = {
  a: 'foo',
  get b(){
    throw new Error();
  },
  c: 'bar'
}

try{
  Object.assign(dest, src)
}catch(e){}

//Object.assign()没办法回滚以及完成的修改
//因此在抛出错误之前，目标对象上一级完成的修改会继续存在：
console.log(dest) //{a: foo}

8.1.5 对象标识及相等判断

在ECMAScript6之前，有些特殊情况即使是===操作符也无能为力：
//这些是===符合预期的情况
console.log(true === 1) //false
console.log({} == {})   //false
console.log("2" === 2)  //false

//这些情况在不同javascript引擎中表县不同，但仍被认为相等
console.log(+0 === -0)  //true
console.log(+0 === 0)   //true
console.log(-0 === 0)   //true

//要确定NaN的相等性，必须使用极为讨厌的isNaN()
console.log(NaN === NaN)  //false
console.log(isNaN(NaN))   //true

为改善这类情况，ECMAScript6规范新增了Object.is()，这个方法与===很像，但同时也考虑到了上述边界情形。
这个方法必须接收两个参数：
console.log(Object.is(true, 1)) //false
console.log(Object.is({}, {}))  //false
console.log(Object.is('2', 2))  //false

//正确的0，-0， +0 相等/不相等判定
console.log(Object.is(+0, -0))  //false
console.log(Object.is(+0, 0))   //true
console.log(Object.is(-0, 0))   //false

//正确的NaN相等判定
console.log(Object.is(NaN, NaN))//true

要检查超过两个值，递归地利用相等性传递即可：
function recursivelyCheckEqual(x, ...rest){
  return Object.is(x, rest[0]) && 
    (rest.length < 2 || recursivelyCheckEqual(...rest));
}

console.log(recursivelyCheckEqual(1, 1, 1))

8.1.6 增强的对象语法

ECMAScript6为定义和操作对象新增了很多机器有用的语法糖特性。这些特性都没有改变现有引擎的行为，但
极大地提升了处理对象的方便程度。

1. 属性值简写
在给对象添加变量的时候，开发者经常会发现属性名和变量名是一样的

let name = 'matt'
let person = {
  name: name
}

代码压缩程序会在不同作用域间保留属性名，以防止找不到引用，
function makePerson(name){
  return {name}
}
在这里，即使参数表示法只限定于函数作用域，编译器也会保留初始的name标识符。如果使用Google Closure
编译器颜色，那么函数参数会被缩短，而属性名不变：
function makePerson(a){
  return {
    name: a
  }
}

2.可计算属性

在引入可计算属性之前，如果想使用变量的值作为属性，那么必须先声明对象，然后使用中括号语法来添加属性。
换句话说，不能再对象字面量中直接动态命名属性。
const nameKey = 'name'
const ageKey = 'age'
const jobKey = 'job'

let person = {}
person[nameKey] = 'Matt'
person[ageKey] = 27;
person[jobKey] = 'software engineer'
console.log(person)
//{name: "Matt", age: 27, job: "software engineer"}

有了可计算属性，就可以在对象字面量中完成动态属性赋值。中括号包围的对象属性键告诉运行时将其作为
javascript表达式而不是字符串来求值

const nameKey = 'name'
const ageKey = 'age'
const jobKey = 'job'

let person = {
  [nameKey]: 'Matt',
  [ageKey]: 27,
  [jobKey]: 'software engineer'
}
console.log(person)
//{name: "Matt", age: 27, job: "software engineer"}

因为被当作javascript表达式求值，所以可计算属性本身可以是复杂的表达式，在实例化时再求值：

const nameKey = 'name'
const ageKey = 'age'
const jobKey = 'job'
let uniqueToken = 0;

function getUniqueKey(key){
  return `${key}_${uniqueToken++}`;
}

let person = {
  [getUniqueKey(nameKey)]: 'matt',
  [getUniqueKey(ageKey)]: 27,
  [getUniqueKey(jobKey)]: 'software engineer',
}
console.log(person)
//name_0: "matt", age_1: 27, job_2: "software engineer"}

注意： 可计算属性表达式中抛出任何错误都会中断对象创建。如果计算属性的表达式有副作用，那就要小心了
因为如果表达式抛出错误，那么之前完成的计算是不能回滚的。

3.简写方法名

let person = {
  sayName(name){
    console.log(`my name is ${name}`)
  }
}

简写方法名对象获取函数和设置函数也是适用的：
let person = {
  name_: '',
  get name(){
    return this.name_;
  },
  set name(name){
    this.name_ = name;
  },
  sayName(){
    console.log(`My name is ${this.name_}`)
  }
}

简写方法名与可计算属性键相互兼容：

const methodKey = 'sayName';

let person = {
  [methodKey](name){
    console.log(`My name is ${name}`)
  }
}

8.1.7 对象解构

ECMAScript6新增了对象解构语法，可以在一条语句中使用嵌套数据实现一个或多个赋值操作。简单地说，对象
解构就是使用与对象匹配的结构来实现对象属性赋值

let person = {
  name: 'matt',
  age: 27
}

let personName = person.name,
    personAge = person.age;

console.log(personName)
console.log(personAge)

//使用对象解构

let person = {
  name: 'matt',
  age: 27
}

let { name: personName, age: personAge} = person;
console.log(personName)   //matt
console.log(personAge)    //27

使用解构，可以在一个类似对象字面量的结构中，声明多个变量，同时执行多个赋值操作。如果想让变量直接
使用属性的名称，那么可以使用简写语法

let person = {
  name: 'Matt',
  age: 27
}

let { name, age } = person;

console.log(name)
console.log(age)

解构赋值不一定与对象的属性匹配。赋值的时候可以忽略某些属性，而如果引用的属性不存在，则改变量的值就是
undefined;

let person = {
  name: 'matt',
  age: 27
}

let { name, job } = person;

console.log(name)
console.log(job)

也可以在解构赋值的同时定义默认值，这适用于前面刚提到的引用的属性不存在与源对象中的情况。

let person = {
  name: 'Matt',
  age: 27
}

let { name, job = 'software engineer' } = person;
console.log(name)   //Matt
console.log(job)    //software engineer

解构在内部使用函数ToObject()(不能在运行时环境中直接访问)把源数据解构转换为对象。这意味着在对象解构
的上下文中，原始值被当成对象。这也意味着(根据ToObject()的定义)，null和undefined不能被解构，否则会
抛出错误。
let { length } = 'foobar'
console.log(length)       //6

let { constructor: c } = 4;
console.log(c === Number) //true

let { _ } = null;         //TypeError

let { _ } = undefined;    //TypeError

解构并不要求变量必须在解构表达式中声明。不过，如果是给实现声明的变量赋值，则赋值表达式必须包含在一对
括号中：

let personName, personAge;

let person = {
  name: 'Matt',
  age: 27
};

({name: personName, age: personAge} = person);
console.log(personName, personAge);   //Matt 27

1.嵌套解构

解构对于引用嵌套的属性或赋值目标没有限制。为此，可以通过解构来复制对象属性。

let person = {
  name: 'Matt',
  age: 27,
  job: {
    title: 'software engineer'
  }
}
let personCopy = {};

({
  name: personCopy.name,
  age: personCopy.age,
  job: personCopy.job
} = person);

//因为一个对象的引用被赋值给personCopy，所以修改person.job对象的属性也会影响personCopy
person.job.title = 'Hacker'
console.log(person)

//age: 27
//job: {title: "Hacker"}
//name: "Matt"

解构赋值可以使用嵌套结构，以匹配嵌套的属性：
let person = {
  name: 'Matt',
  age: 27,
  job: {
    title: 'Software engineer'
  }
}
//声明title变量并将person.job.title的值赋给它
let { job: { title } } = person;
console.log(title)    //Software engineer

在外层属性没有定义的情况下不能使用嵌套解构，无论源对象还是目标对象都一样：
let person = {
  job: {
    title: 'software engineer'
  }
}

let personCopy = {};

({
  foo: {
    bar: personCopy.bar
  }
} = person);
VM419:11 Uncaught TypeError: Cannot read property 'bar' of undefined

({
  job: {
    title: personCopy.job.title
  }
} = person);
//Uncaught TypeError: Cannot set property 'title' of undefined

2.部分解构

需要注意的是，涉及多个属性的解构赋值是一个输出无关的顺序化操作。如果一个解构表达式涉及多个赋值，开始
的赋值成功而后面的赋值出错，则整个解构赋值只会完成一部分：

let person = {
  name: 'Matt',
  age: 27
}
let personName, personBar, personAge;

try{
  ({name: personName, foo: { bar: personBar }, age: personAge} = person);
}catch(e){}

console.log(personName, personBar, personAge);
//Matt undefined undefined

3.参数上下文匹配

在函数参数列表中也可以进行解构赋值。对参数的解构赋值不会影响arguments对象，但可以在函数签名中声明
在函数体内使用局部变量：

let person = {
  name: 'Matt',
  age: 27
}

function printPerson(foo, {name, age}, bar){
  console.log(arguments)
  console.log(name, age)
}

function printPerson2(foo, {name: personName, age: personAge}, bar){
  console.log(arguments)
  console.log(personName, personAge)
}

printPerson('1st', person, '2nd');
//Arguments(3) ["1st", {…}, "2nd", callee: (...), Symbol(Symbol.iterator): ƒ]
//Matt 27

printPerson2('1st', person, '2nd')
//Arguments(3) ["1st", {…}, "2nd", callee: (...), Symbol(Symbol.iterator): ƒ]
//Matt 27

8.2 创建对象

虽然使用Object构造函数或对象字面量可以方便地创建对象，但这些方式也有明显
不足：创建具有同样接口的多个对象需要重复编写很多代码。

8.1.2 概述

综观ECMAScript规范的历次发布，每个版本的特性似乎都出人意料。ECMAScript5.1
并没有正式支持面向对象解构，比如类或继承。但是，正如接下来几节会介绍的，巧妙
地运用原型式继承可以成功地模拟同样的行为。

ECMAScript6开始正式支持类和继承。ES6的类旨在完全涵盖之前规范设计的基于原型
的继承模式。不过，无论从哪方面看，ES6的类都仅仅式封装了ES5.1构造函数加原型
继承的语法糖而已.

注意 不要误会:采用面向对象编程模式的javascript代码还是应该使用ECMAScript6
的类.但不管怎么说,理解ES6类出现之前的惯例总是有益无害的.特别是ES6的类定义本身
就相当于对原有结构的封装,因此,在介绍ES6的类之前,本书会循序渐进地介绍被类取代
的那些底层概念.

8.2.2 工厂模式

工厂模式是一种众所周知的设计模式,广泛应用于软件工厂领域,用于抽象创建特定
对象的过程,下面的例子展示了一种按照特定接口创建对象的方式.

function createPerson(name, age, job){
  let o = new Object();
  o.name = name;
  o.age = age;
  o.job = job;
  o.sayName = function(){
    console.log(this.name)
  }
  return o;
}

let person1 = createPerson('nicholas', 29, 'software Engineer');
let person2 = createPerson('Greg', 26, 'Doctor');

这里,函数createPerson()接收3个参数,根据这几个参数构建了一个包含Person
信息的对象.可以用不同的参数多次调用这个函数,每次都会返回包含3个属性和一个
方法的对象.这种工厂模式虽然可以解决多个类似对象的问题,但没有解决对象标识
问题(即新创建的对象是什么类型).

8.2.3 构造函数模式

前面几章提到过,ECMAScript中的构造函数时用于创建特定类型对象的.像Object
和Array这样的原生构造函数,运行时可以直接在执行环境中使用.当然也可以自定义
构造函数,以函数的形式为自己的对象类型定义属性和方法.

比如,前面的例子使用构造函数模式可以这样写:
function Person(name, age, job){
  this.name = name;
  this.age = age;
  this.job = job;
  this.sayName = function(){
    console.log(this.name)
  }
}

let person1 = new Person('nicholas', 29, 'software Engineer')
let person2 = new Person('greg', 27, 'Doctor')

person1.sayName();
person2.sayName();

在这个例子中,Person()构造函数代替了createPerson()工厂函数.实际上,Person()
内部的代码跟createPerson()基本是一样的,只有如下的区别.

`没有显式地创建对象
`属性和方法直接赋值给了this
`没有return

另外,要注意函数名Person的首字母大写了.按照惯例,构造函数名称的首字母都是要
大写的,非构造函数则以小写字母开头.这是从面向对象编程语言那里借鉴的,有助于在ECMAScript中区分构造函数
和普通函数.毕竟ECMAScript的构造函数就是能创建对象的函数.

要创建Person的实例,应使用new操作符.以这种方式调用构造函数会执行如下操作.
1.在内存中创建一个新对象
2.这个新对象内部的[[Prototype]]特性被赋值为构造函数的prototype属性.
3.构造函数内部的this被赋值为这个新对象(即this指向新对象).
4.执行构造函数内部的代码(给新对象添加属性).
5.如果构造函数返回非空对象,则返回该对象;否则,返回刚创建的新对象

上一个例子的最后,person1和person2分别保存着Person的不同实例.这两个对象都有一个constructor属性
指向Person, 如下所示:
console.log(person1.constructor == Person)  //true
console.log(person2.constructor == Person)  //true

constructor本来是用于标识对象类型的.不过,一般认为instanceof操作符是确定对象类型更可靠的方式.
前面例子中的每个对象都是Object的实例,同时也是Person的实例,如下面调用instanceof操作符的结果所示:

console.log(person1 instanceof Object)  //true
console.log(person1 instanceof Person)  //true
console.log(person2 instanceof Object)  //true
console.log(person2 instanceof Person)  //true

定义自定义构造函数可以确保实例被标识为特定类型,相比于工厂模式,这是一个很大的好处.在这个例子中,
person1和person2之所以也被认为是Object的实例,是因为所有自定义对象都继承自Object(后面再详细
讨论这一点)

构造函数不一定要写成函数声明的形式.赋值给变量的函数表达式也可以表示构造函数:

let Person = function(name, age, job){
  this.name = name;
  this.age = age;
  this.job = job;
  this.sayName = function(){
    console.log(this.name)
  }
}

let person1 = new Person('nicholas', 29, 'software Engineer')
let person2 = new Person('Greg', 27, 'Doctor')

person1.sayName();
person2.sayName();

console.log(person1 instanceof Object)  //true
console.log(person1 instanceof Person)  //true
console.log(person2 instanceof Object)  //true
console.log(person2 instanceof Person)  //true

在实例化时,如果不想传参数,那么构造函数后面的括号可加可不加.只要有new操作符,就可以调用相应的构造函数

function Person(){
  this.name = 'jake'
  this.sayName =function(){
    console.log(this.name)
  }
}

let person1 = new Person();
let person2 = new Person;

person1.sayName()
person2.sayName();

console.log(person1 instanceof Object)  //true
console.log(person1 instanceof Person)  //true
console.log(person2 instanceof Object)  //true
console.log(person2 instanceof Person)  //true

1.构造函数也是函数

构造函数与普通函数唯一的区别就是调用方式不同.除此之外,构造函数也是函数.并没有把某个函数定义为构造
函数的特殊语法.任何函数只要使用new操作符调用就是构造函数,而不使用new操作符调用的函数就是普通函数.
比如,前面的例子中定义的Person()可以像下面这样调用:

//作为构造函数
let person = new Person('nicholas', 29, 'software Engineer')
person.sayName();

//作为函数调用
Person('Greg', 27, 'Doctor'); //添加到weindow对象
window.sayName()  //Greg

//在另一个对象的作用域中调用
let o = new Object();
Person.call(o, 'kristen', 25, 'nurse')
o.sayName()

这个例子一开始展示了典型的构造函数调用方式,即使用new操作符创建一个新对象.然后是普通函数的调用方式,
这时候没有使用new操作符调用Person(),结果会将属性和方法添加到window对象.这里要记住,在调用一个函数
而没有明确设置this值得情况下(即没有作为对象的方法调用,或者没有使用没有使用call()/apply()调用),
this始终指向Global对象(在浏览器中就是window对象).因此在上面的调用之后,window对象上就有了一个sayName()
方法,调用它会返回'Greg'.最后展示的调用方式是通过call()(或apply())调用函数,同时将特定对象指定为
作用域.这里的调用将对象o指定为Perons()内部的this值.因此指向完函数后,所有属性和sayName()方法都会
添加到对象o上面.

2.构造函数的问题

构造函数虽然有用,但也不是没有问题.构造函数的主要问题在于,其定义的方法会在每个实例上都创建一遍.因此
对前面的例子而言,person1和person2都有名为sayName()的方法,但这两个方法不是同一个Function实例.
我们知道,ECMAScript中函数是对象,因此每次定义函数时,都会初始化一个对象.逻辑上讲,这个构造函数实际
上是这样的:

function Person(name, age, job){
  this.name = name;
  this.age = age;
  this.job = job;
  this.sayName = new Function('console.log(this.name)') //逻辑等价
}

这样理解这个构造函数可以更清除地知道,每个Person实例都会有自己的Function实例用于显示name属性.当然
以这种方式创建函数会带来不同的作用域链和标识符解析.但创建新Function实例的机制是一样的.因此不同
实例上的函数虽然同名却不相等,如下所示:

console.log(person1.sayName == person2.sayName)   //false

因为都是做一样的事,所以没必要定义两个不同的Function实例.况且,this对象可以把函数与对象的绑定推迟
到运行时.

要解决这个问题,可以把函数定义转移到构造函数外部:

function Person(name, age, job){
  this.name = name;
  this.age = age;
  this.job = job;
  this.sayName = sayName;
}

function sayName(){
  console.log(this.name)
}

let person1 = new Person('nicholas', 29, 'software Engineer')
let person2 = new Person('Greg', 27, 'Doctor')

person1.sayName();  //nicholas
person2.sayName();  //Greg

在这里,sayName()被定义在了构造函数外部.在构造函数内部,sayName属性等于全局sayName()函数,因为这一次
sayName属性中包含的只是一个指向外部函数的指针,所以person1和person2共享了定义在全局作用域上的
sayName()函数.这样虽然解决了相同逻辑的函数重复定义的问题,但全局作用域也因此被搞乱了,因为那个函数
实际上只能在一个对象上调用.如果这个对象需要多个方法,那么就要在全局作用域中定义多个函数.这回导致
自定义类型引用的代码不能很好地聚集在一起.这个新问题可以通过原型模式来解决.


8.2.4 原型模式

每个函数都会创建一个prototype属性,这个属性是一个对象,包含应该由特定引用类型的实例共享的属性和方法.
实际上,这个对象就是通过调用构造函数创建的对象的原型.使用原型对象的好处是,在它上面定义的属性和方法
可以被对象实例共享.原来在构造函数中直接赋值给对象实例的值,可以直接赋值给他们的原型,如下所示:

function Person() {}

Person.prototype.name = 'Nicholas'
Person.prototype.age = 29
Person.prototype.job ='software Engineer'
Person.prototype.sayName = function(){
  console.log(this.name)
}

let person1 = new Person();
person1.sayName();  //Nicholas

let person2 = new Person();
person2.sayName();  //Nicholas

console.log(person1.sayName == person2.sayName)   //true

使用函数表达式也可以:
let Person = function() {}

Person.prototype.name = 'Nicholas'
Person.prototype.age = 29
Person.prototype.job ='software Engineer'
Person.prototype.sayName = function(){
  console.log(this.name)
}

let person1 = new Person();
person1.sayName();  //Nicholas

let person2 = new Person();
person2.sayName();  //Nicholas

console.log(person1.sayName == person2.sayName)   //true

这里,所有属性和sayName()方法都直接添加到了Person的prototype属性上,构造函数体中什么也没有.但这样
定义之后,调用构造函数创建的新对象仍然拥有相应的属性和方法.域构造函数模式不同,使用这种原型模式定义
的属性和方法是由所有实例共享的.因此person1和person2访问的都是相同的属性和相同的sayName()函数.要
理解这个过程,就必须理解ECMAScript中原型的本质.

1.理解原型

无论何时,只要创建一个函数,就回按照特定的规则为这个函数创建一个prototype属性(指向原型对象).默认情况
下,所有原型对象自动获得一个名为constructor的属性,指回与之关联的构造函数.对前面的例子而言,Person.
prototype.constructor指向Person.然后,因构造函数而异,可能会给原型对象添加其他属性和方法.

在自定义构造函数时,原型对象默认只会获得constructor属性,其他的所有方法都继承自Object.每次调用
构造函数创建一个新实例,这个实例的内部[[Prototype]]指针就会被赋值为构造函数的原型对象.脚本中没有
访问这个[[Prototype]]特性的标准方式,但FireFox,safari和chrome回在每个对象上暴露__proto__属性,
通过这个属性可以访问对象的原型.在其他实现中,这个特性完全被隐藏了.关键在于理解这一点:实例与构造
函数原型之间由直接的联系,但实例域构造函数之间没有.

这种关系不好可视化,但可以通过下面的代码来理解原型的行为.

//构造函数可以是函数表达式
//也可以是函数声明,因此以下两种形式都可以:
//function Person() {}
//let Person = function() {}

function Person() {}

//声明之后,构造函数就有了一个与之关联的原型对象
console.log(typeof Person.prototype)    
// object

console.log(Person.prototype) 
// constructor: ƒ Person()
// __proto__: Object

//如前面所述,构造函数有一个prototype属性引用其原型对象,
//而这个原型对象也有一个constructor属性,引用这个构造函数
//换句话说,两者循环引用
console.log(Person.prototype.constructor == Person) //true

//正常的原型链都会终止域Object的原型对象
//Object原型的原型是null
console.log(Person.prototype.__proto__ === Object.prototype);   //true
console.log(Person.prototype.__proto__.constructor === Object)  //true
console.log(Person.prototype.__proto__.__proto__ === null)      //true

console.log(Person.property.__proto__)
//{
//  constructor: f Object(),
//  toString: ...
//  ....
//}

let person1 = new Person();
let person2 = new Person();

//构造函数,原型对象和实例时3个完全不同的对象;
console.log(person1 !== Person)           //true
console.log(person1 !== Person.property)  //true
console.log(Person.prototype !== Person)  //true

//实例通过__proto__链接到原型对象,
//它实际上指向隐藏特性[[Prototype]]

//构造函数通过prototype属性链接到原型对象
//实例与构造函数没有直接关系,与原型对象有直接关系.
console.log(person1.__proto__ === Person.prototype)   //true
console.log(person1.__proto__.constructor === Person) //true

//同一个构造函数创建的两个实例共享同一个原型对象
console.log(person1.__proto__ === person2.__proto__)  //true

//instanceof检查实例的原型链中是否包含指定构造函数的原型;
console.log(person1 instanceof Person);         //true
console.log(person1 instanceof Object)          //true
console.log(Person.prototype instanceof Object) //true

对于前面例子中Person构造函数和Person.prototype,可以通过图8-1看出各个对象之间的关系.
         |<------------------------------------------------------<
         |                                                       |
      Person          |-->-->-->-->   Person Prototype           | 
                      |                                          | 
prototype   ·  ------>|         constructor     ·       -------->|
                      |         name            Nicholas
                      |         age             29
                      |         job             software Engineer
                      |         sayName         (function)
                      |
                      |<----------------------------------|
                      |                                   |
      person1         |                  person2          |
                      |                                   |
[[Prototype]]   · --->|           [[Prototype]]   · ------|


图展示了Person构造函数,Person的原型对象和Person现有两个实例之间的关系.注意,Person.prototype指向
原型对象,而Person.prototype.constructor指回Person构造函数.原型对象包含constructor属性和其他
后来添加的属性.Person的两个实例person1和person2都只有一个内部属性指回Person.prototype,而且两者
都与构造函数没有直接关系.另外要注意,虽然这两个实例都没有属性和方法,但person1.sayName()可以正常
调用.这是由于对象属性查找机制的原因.

虽然不是所有实现都对外暴露了[[Prototype]],但可以使用isPrototypeOf()方法确定两个对象之间的这种
关系.本质上isPrototypeOf()会在传入参数的[[Prototype]]指向调用它的对象时返回true

console.log(Person.prototype.isPrototypeOf(person1))  //true
console.log(Person.prototype.isPrototypeOf(person2))  //true

这里通过原型对象调用isPrototypeOf()方法检查了person1和person2.因为这两个例子内部有链接指向
Person.prototype,所以结果都返回true.

ECMAScript的Object类型有一个方法叫Object.getPrototypeOf(),返回参数的内部特性[[Prototype]]的值

console.log(Object.getPrototypeOf(person1) == Person.prototype)   //true
console.log(Object.getPrototypeOf(person1).name)                  //Nicholas

第一行代码简单确认了Object.getPrototypeOf()返回的对象就是传入对象的原型对象.
第二行代码则取得了原型对象上name属性的值,即"Nicholas".
使用Object.getPrototypeOf()可以方便地取得一个对象的原型,而这在通过原型实现继承时显得尤为重要.

Object类型还有一个setPrototypeOf()方法,可以向实例的私有特性[[Prototype]]写入一个新值.这样就
可以重写一个对象的原型继承关系:

let biped = {
  numLegs: 2
}

let person = {
  name: 'Matt'
}

Object.setPrototypeOf(person, biped)

console.log(person.name);   //Matt
console.log(person.numLegs) //2
console.log(Object.getPrototypeOf(person) === biped)  //true

警告 Object.setPrototypeOf()可能会严重影响代码性能.Mozilla文档说得很清楚:"在所有浏览器和javascript"
引擎中,修改继承关系得影响都是微妙且深远得.这种影响并不仅是执行Object.setPrototypeOf()语句那么
简单,而是会涉及所有访问了那些修改过[[Prototype]]的对象的代码.

为避免使用Object.setPrototypeOf()可能造成的性能下降,可以通过Object.create()来创建一个新对象,
同时为其指定原型:

let biped = {
  numLegs: 2
}

let person = Object.create(biped)
person.name = 'Matt'

console.log(person.name)                              //Matt
console.log(person.numLegs)                           //2
console.log(Object.getPrototypeOf(person) === biped)  //true

Object.create(biped) 改方法里传参(对象),则参数作为新创建对象的原型

2.原型层级

在通过对象访问属性时,会按照这个属性的名称开始搜索.搜索开始于对象实例本身.如果在这个实例上发现了
给定的名称,则返回该名称的值.如果没有找到这个属性,则搜索会沿着指针进入原型对象,然后在原型对象上
找到属性后,在返回对应的值.因此,在调用person1.sayName()时,会发生两步搜索.首先,javascript引擎
会问: 'person1'实例有sayName属性吗? 答案时没有.然后继续搜索并问: person1的原型有sayName属性吗
答案是有.于是就返回了保存在原型上的这个函数.在调用person2.sayName()时,会发生同样的搜索过程,而且
也会返回相同的结果.这就是原型用于在多个对象实例键共享属性的方法的原理.

注意: 前面提到的constructor属性只存在于原型对象,因此通过实例对象也是可以访问到的.

虽然可以通过实例读取原型对象上的值,但不可能通过实例重写这些值.如果在实例上添加了一个与原型对象
中同名的属性,那就会在实例上创建这个属性,这个属性会遮住原型对象上的属性.下面看一个例子:

function Person() {}

Person.prototype.name = 'Nicholas'
Person.prototype.age = 29;
Person.prototype.job = 'software Engineer'
Person.prototype.sayName = function() {
  console.log(this.name)
}

let person1 = new Person();
let person2 = new Person();

person1.name = 'Greg'

console.log(person1.name) //Greg
console.log(person2.name) //Nicholas

这个例子中,person1的name属性遮蔽了原型对象上的同名属性.虽然person1.name和person2.name都返回了
值,但前者返回的是"Greg"(来自实例),后者返回的是"Nicholas"(来自原型).当console.log()访问
person.name时,会先在实例上搜索这个属性.因为这个属性在实例上存在,所以就不会再搜索原型对象了.而在
访问person2.name时,并没有在实例上找到这个属性,所以会继续搜索原型对象并使用定义在原型上的属性.

只要给对象实例添加一个属性,这个属性就会遮蔽(shadow)原型对象上的同名属性,也就是虽然不会修改它,
但会屏蔽对它的访问.即使在实例上把这个属性设置为null,也不会恢复它和原型的联系.不过,使用delete
操作符可以完全删除实例上的这个属性,从而让标识符解析过程能够继续搜索原型对象.

function Person() {}

Person.prototype.name = 'Nicholas'
Person.prototype.age = 29;
Person.prototype.job = 'software Engineer'
Person.prototype.sayName = function() {
  console.log(this.name)
}

let person1 = new Person();
let person2 = new Person();

person1.name = 'Greg'

console.log(person1.name) //Greg
console.log(person2.name) //Nicholas

delete person1.name;
console.log(person1.name) //Nicholas

这个修改后的例子使用delete删除了person1.name,这个属性之前以"Greg"遮蔽了原型上的同名属性.然后
原型上name属性的联系就恢复了,因此再访问peron1.name时,就会返回原型对象上这个属性的值.

hasOwnProperty()方法用于确定某个实例是在实例上还是在原型上.这个方法是继承自Object的,
会在--属性存在于 调用它的对象实例上时 返回true,如下面的例子所示:

function Person() {}

Person.prototype.name = 'Nicholas'
Person.prototype.age = 29;
Person.prototype.job = 'software Engineer'
Person.prototype.sayName = function() {
  console.log(this.name)
}

let person1 = new Person();
let person2 = new Person();

console.log(person1.name) //Greg
console.log(person2.name) //Nicholas

console.log(person1.hasOwnProperty('name')) //false

person1.name = 'Greg'
console.log(person1.name)   //Greg
console.log(person1.hasOwnProperty('name')) //true

console.log(person2.name)   //Nicholas
console.log(person2.hasOwnProperty('name')) //false

delete person1.name;
console.log(person1.name)   //Nicholas
console.log(person1.hasOwnProperty('name')) //false

在这个例子中,通过调用hasOwnProperty()能够清楚地看到访问的是实例属性还是原型属性.
调用person1.hasOwnProperty('name')只在重写person1上name属性的情况下才会返回true,表明此时
name是一个实例属性,不是原型属性.图8-2形象地展示了上面例子中各个步骤的状态

注意: ECMAScript的Object.getOwnPropertyDescriptor()方法只对实例属性有效.要取得原型属性的描述符
就必须直接在原型对象上调用Object.getOwnPropertyDescriptor().

3.原型和in操作符

有两种方式使用in操作符:单独使用和在for-in循环中使用.
在单独使用时,in操作符会在可以通过对象访问指定属性时返回true,无论该属性是在实例上还是在原型上.

function Person() {}

Person.prototype.name = 'Nicholas'
Person.prototype.age = 29;
Person.prototype.job = 'software Engineer'
Person.prototype.sayName = function() {
  console.log(this.name)
}

let person1 = new Person();
let person2 = new Person();

console.log(person1.hasOwnProperty('name')) //false
console.log('name' in person1)              //true

person1.name = 'Greg'
console.log(person1.name)                     //Greg
console.log(person1.hasOwnProperty('name'))   //true
console.log('name' in person1)                //true

console.log(person2.name)                     //Nicholas
console.log(person2.hasOwnProperty('name'))   //false
console.log('name' in person2)                //true

delete person1.name;
console.log(person1.name)                     //Nicholas
console.log(person1.hasOwnProperty('name'))   //false
console.log('name' in person1)                //true

在上整个例子中,name随时可以通过实例或原型访问到.因此,调用'name' in person1时始终返回true,无论
这个属性是否在实例上.如果要确定某个属性是否存在于原型上,则可以向下面这样同时使用hasOwnProperty()
和in操作符:
function hasPrototypeProperty(object, name){
  return !object.hasOwnProperty(name) && (name in object)
}

只要通过对象可以访问,in操作符就返回true,而hasOwnProperty()只有属性存在于实例上时才返回true.
因此,只要in操作符返回true且hasOwnProperty()返回false,就说明该属性是一个原型属性.

function Person() {}

Person.prototype.name = 'Nicholas'
Person.prototype.age = 29;
Person.prototype.job = 'software Engineer'
Person.prototype.sayName = function() {
  console.log(this.name)
}

let person = new Person();
console.log(hasPrototypeProperty(person, 'name')) //true

person.name = 'Greg'
console.log(hasPrototypeProperty(person, 'name')) //false

在这里,name属性首先只存在于原型上,所以hasPrototypeProperty()返回true.而在实例上重写这个属性后,
实例上也有了这个属性,因此hasPrototypeProperty()返回false.即便此时原型对象还有name属性,但因为
实例上的属性遮蔽了它,所以不会用到.

在for-in循环中使用in操作符时,可以通过对象访问且可以被枚举的属性都会返回,包括实例属性和原型属性.
遮蔽原型中不可枚举([[Enumerable]]特性被设置为false)属性的实例属性也会在for-in循环中返回,因为
默认情况下开发者定义的属性都是可枚举的.

//自己写的例子
for(let k in p1){console.log(k)}
// name
// age
// job
// sayName

要获得对象上所有可枚举的实例属性,可以使用Object.keys()方法.这个方法接收一个对象作为参数,返回包含
该对象所有可枚举属性名称的字符串数组.比如:

function Person() {}

Person.prototype.name = 'Nicholas'
Person.prototype.age = 29;
Person.prototype.job = 'software Engineer'
Person.prototype.sayName = function() {
  console.log(this.name)
}

let keys = Object.keys(Person.prototype)
console.log(keys)   //(4) ["name", "age", "job", "sayName"]

let p1 = new Person();
p1.name = 'Rob'
p1.age = 31;

let p1keys = Object.keys(p1)
console.log(p1keys)  //(2) ["name", "age"]

这里,keys变量保存的数组中包含'name','age','job'和'sayName'.这是正常情况下通过for-in返回的顺序
如果想列出所有实例属性,无论是否可以枚举,都可以使用Object.getOwnPropertyNames();

let keys = Object.getOwnPropertyNames(Person.prototype)
console.log(keys) //(5) ["constructor", "name", "age", "job", "sayName"]

注意,返回的结果中包含了一个不可枚举的属性constructor.Object.keys()和Object.getOwnPropertyNames()
在适当的时候都可用来代替for-in循环

在ECMAScript6新增符号类型后,相应地出现了增加一个Object.getOwnPropertyNames()的兄弟方法的需求,
因为以符号位键的属性没有名称的概念.因此,Object.getOwnPropertySymbols()方法就出现了,这个方法与
Object.getOwnPropertyNames()类似,只是针对符号而已;

let k1 = Symbol('k1'),
    k2 = Symbol('k2');

let o = {
  [k1]: 'k1',
  [k2]: 'k2'
}

console.log(Object.getOwnPropertySymbols(o))
//(2) [Symbol(k1), Symbol(k2)]

4.属性枚举顺序

for-in循环, Object.keys(), Object.getOwnPropertyNames(), Object.getOwnPropertySymbols()
以及Object.assign()在数学枚举顺序方面有很大区别.for-in循环和Object.keys()的枚举顺序是不确定的,
取决于javascript引擎,可能因浏览器而异.

Object.getOwnPropertyNames(), Object.getOwnPropertySymbols()和Object.assign()的枚举顺序是
确定性的.先以升序枚举数值键,然后以插入顺序枚举字符串和符号键.在对象字面量中定义的键以他们逗号分隔
的顺序插入.

let k1 = Symbol('k1'),
    k2 = Symbol('k2');

let o = {
  1: 1,
  first: 'first',
  [k1]: 'sym2',
  second: 'second',
  0: 0
}

o[k2] = 'sym2'
o[3] = 3;
o.third = 'third'
o[2] = 2;

console.log(Object.getOwnPropertyNames(o))
//(7) ["0", "1", "2", "3", "first", "second", "third"]

8.2.5 对象迭代

在javascript有史以来的大部分时间内,迭代对象属性都是一个难题。ECMAScript2017新增了两个静态方法，
用于讲对象内容转换位序列化的--更重要的是可迭代的--格式。这两个静态方法Object.values()和Object.entries()
接收一个对象，返回他们内容的数组。Object.values()返回对象值得数组，Object.entries()返回键值对的数组。

const o = {
  foo: 'bar',
  baz: 1,
  qux: {}
}

console.log(Object.values(o)) //(3) ["bar", 1, {…}]

console.log(Object.entries(o))

0: (2) ["foo", "bar"]
1: (2) ["baz", 1]
2: (2) ["qux", {…}]


注意，非字符串属性会被转换为字符串输出。另外，这两个方法执行对象的浅复制：
const o = {
  qux : {}
}

console.log(Object.values(o)[0] === o.qux)  //true

console.log(Object.entries(o)[0][1] === o.qux)  //true

符号属性会被忽略：

const sym = Symbol();
const o = {
  [sym]: 'foo'
}

console.log(Object.values(o))   //[]
console.log(Object.entries(o))  //[]

1.其他原型语法

有读者可能注意到了，在前面的例子中，每次定义一个属性或方法都会把Person.prototype重写一遍。为了
减少代码冗余，也为了从视觉上更好地封装原型功能，直接通过一个包含所有属性和方法的对象字面量来重写
原型成为了一种常见的作法，如下面的例子所示：

function Person() {}

Person.prototype = {
  name: 'nicholas',
  age: 29,
  job: 'software Engineer',
  sayName(){
    console.log(this.name)
  }
}

在这个例子中，Person.prototype被设置为等于一个通过对象字面量创建的新对象。最终结果是一样的，
只有一个问题：这样重写之后，Person.prototype的constructor属性就不指向Person了。在创建函数
时，也会创建它的prototype对象，同时会自动给这个原型的constructor属性赋值。而上面的写法完全
重写了默认的prototype对象，因此其constructor属性也指向了完全不同的新对象（Object构造函数）
不再指向原来的构造函数。虽然instanceof操作符还能可靠地返回值，但我们不能再依靠constructor属性
来识别类型了，如下面的例子所示：

let friend = new Person()

console.log(friend instanceof Object) //true
console.log(friend instanceof Person) //true

console.log(friend.constructor == Person) //false
console.log(friend.constructor == Object) //true

这里，instanceof仍然对Object和Person都返回true。但constructor属性现在等于Object而不是Person
了。如果constructor的值很重要，则可以像下面这样在重谢原型对象时专门设置一下它的值

function Person() {}

Person.prototype = {
  constructor: Person,
  name: 'nicholas',
  age: 29,
  job: 'software Engineer',
  sayName(){
    console.log(this.name)
  }
}

这种代码中特意包含了constructor属性，并将它设置为Person，保证了这个属性仍然包含恰当的值。
但要注意，以这种方式恢复constructor属性会创建一个[[Enumerable]]为true的属性。而原生constructor
属性默认是不可枚举的。因此，如果你使用的是兼容ECMAScript的javascript引擎，那可能会改为使用
Object.defineProperty()方法来定义constructor属性：

function Person() {}

Person.prototype = {
  name: 'nicholas',
  age: 29,
  job: 'software Engineer',
  sayName(){
    console.log(this.name)
  }
}

Object.defineProperty(Person.prototype, 'constructor', {
  enumerable: false,
  value: Person
})

2.原型的动态性

因为从原型上搜索值得过程是动态得，所以即使实例在修改原型之前已经存在，任何时候对原型对象所做得修改
也会在实例上反映出来。下面是一个例子：

let friend = new Person();

Person.prototype.sayHi = function(){
  console.log('hi')
}

friend.sayHi()  

以上代码先创建了一个Person实例并保存在friend中。然后一条语句在Person.prototype上添加了一个名为
sayHi()的方法。虽然friend实例是在添加方法之前创建的，但它仍然可以访问这个方法。之所以会这样，
主要原因是实例与原型之间松散的联系。在调用friend.sayHi()时，首先会从这个实例中搜索名为sayHi的
属性。在没有找到的情况下，运行时会继续搜索原型对象。因为实例和原型之间的链接就是简单的指针，而
不是保存的副本，所以会在原型上找到sayHi属性并返回这个属性保存的函数

虽然随时能给原型添加属性和方法，并能够理解反映在所有对象实例上，但这跟重写整个原型是两回事。实例
的[[Prototype]]指针式在调用构造函数时自动赋值的，这个指针即使把原型修改为不同的对象也不会变。
从写整个原型会切断最初原型与构造函数的联系，但实例引用的仍然时最初的原型。记住，实例只有指向
原型的指针，没有指向构造函数的指针。

实例和原型之间的联系时松散的。
实例和原型之间的链接就是简单的指针，而不是保存的副本
实例的[[Prototype]]指针是在调用构造函数时自动赋值的，这个指针即使把原型修改为不同的对象也不会变.
重写整个原型会切断最初原型与构造函数的联系，但实例引用的仍然是最初的原型

实例只有指向原型的指针，没有指向构造函数的指针。

function Person(){}
let friend = new Person();
Person.prototype = {
  constructor: Person,
  name: 'nicholas',
  age: 29,
  job: 'sofware Engineer',
  sayName(){
    console.log(this.name)
  }
}

friend.sayName()  //firend.sayName is not function

在这个例子中，Person的新实例是在重写原型对象之前创建的。在调用firend.sayName()的时候，会导致错误。
这是因为firend指向的原型还是最初的原型，而这个原型上并没有sayName属性。

重写构造函数上的原型后再创建的实例才会引用新的原型。而再次之前创建的实例仍然会引用最初的原型。

3.原生对象原型

原型模式之所以重要，不仅体现在自定义类型上，而且还因为它也是实现所有原生引用类型的模式。
所有原生引用类型的构造函数（包括Object、Array、String等）都在原型上定义了实例方法。
比如，数组实例的sort()方法就是Array.prototype上定义的，而字符串包装对象的substring()方法也是
在String.prototype上定义的。如下所示：

console.log(typeof Array.prototype.sort)        //function
console.log(typeof String.prototype.substring)  //function

通过原生对象的原型可以取得所有默认方法的引用，也可以给原生类型的实例重新定义新的方法。可以像修改
自定义对象原型一样修改原生对象原型，因此随时可以添加方法。比如，下面的代码就给String原始值包装
类型的实例添加了一个startsWith()方法：
String.prototype.startsWith = function(text){
  return this.indexOf(text) === 0;
}
let msg = 'Hello world'
console.log(msg.startsWith('Hello'))  //true

如果给定字符串的开头出现了调用startsWith()方法的文本，那么该方法就会返回true。因为这个方法是被
定义在String.prototype上的，所以当前环境下所有的字符串都可以使用这个方法。msg是个字符串，在读取
它的属性时，后台会自动创建String的包装实例，从而找到并调用startsWith()方法

注意： 尽管可以这么做，但并不推荐在产品环境中修改原生对象原型。这样做很可能造成误会，而且可能会引发
命名冲突（比如一个名称在某个浏览器实现中不存在，在另一个实现中却存在）。另外还有可能意外重写原生的
方法。推荐的做法是创建一个自定义的类，继承原生类型。

4.原型的问题

原型模式也不是没有问题。首先，它弱化了向构造函数传递初始化参数的能力，会导致所有实例默认都取得
相同的属性值。虽然这回带来不变，但还不是原型的最大问题。原型的最主要问题源自它的共享特性。
我们知道，原型上的所有属性是在实例间共享的，这对函数来说比较适合。另外包含原始值的属性也还好，
如前面例子中所示，可以通过在实例上添加同名属性来简单遮蔽原型上的属性。正则的问题是来自包含引用值
的属性。

function Person(){ }

Person.prototype = {
  constructor: Person,
  name: 'Nicholas',
  age: 29,
  job: 'sofeware Engineer',
  friends: ['shelby', 'court'],
  sayName(){
    console.log(this.name)
  }
}

let person1 = new Person();
let person2 = new Person();

person1.friends.push('Van')

console.log(person1.friends)      //(3) ["shelby", "court", "Van"]
console.log(person2.friends)      //(3) ["shelby", "court", "Van"]
console.log(person1.friends === person2.friends)  //true

这里，Person.prototype有一个名为friends的属性，它包含一个字符串数组。然后这里创建了两个Person
的实例。Person1.friends通过push方法向数组中添加了一个字符串。由于这个friends属性存在于
Person.prototype而非person1上，新加的这个字符串也会在（指向同一个数组的）person2.friends上
反映出来。如果这是有意在多个实例间共享数组，那没什么问题。但一般来说，不同的实例应该有属于自己的
属性副本。这就是实际开发中通常不单独使用原型模式的原因。

8.3 继承

继承是面向对象编程中讨论最多的话题。很多面向对象语言都支持两种继承：接口继承和实现继承。前者只
继承方法签名，后者继承实际的方法。接口继承在ECMAScript中是不可能的，因为函数没有签名。实现继承
是ECMAScript唯一支持的继承方式，而这主要是通过原型链实现的。

8.3.1 原型链

ECMA-262把原型链定义为ECMScript的主要继承方式。其基本思想就是通过原型继承多个引用类型的属性和方法
重温以下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而
实例有一个内部指针指向原型。如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针
指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数。这样就在实例域原型之间构造了一条
原型链。这就是原型链的基本构想。
实现原型链涉及如下代码模式：
function SuperType(){
  this.property = true;
}

SuperType.prototype.getSuperValue = function(){
  return this.property;
}

function SubType(){
  this.subproperty = false;
}

SubType.prototype = new SuperType();

SubType.prototype.getSubValue = function(){
  return this.subproperty;
}

let instance = new SubType()
console.log(instance.getSuperValue()) //true

以上代码定义了两个类型：SuperType和SubType。这两个类型分别定义了一个属性和方法。这两个类型的主要
区别是SubType通过创建SuperType的实例并将其赋值给自己的原型SupType.prototype,实现了对SuperType的
继承。这个赋值重写了SubType最初的原型，将其替换为SuperType的实例。这意味着SuperType实例可以访问
的所有属性和方法也会存在于SubType.prototype。这样实现继承之后，代码紧接着又给SubType.prototype，
也就是这个SuperType的实例添加了一个新方法。最后又创建了SubType的实例并调用了它继承的getSuperValue
方法。


这个例子中实现继承的关键，是SubType没有使用默认原型，而是将其替换成了一个新的对象。这个新的对象
恰好是SuperType的实例。这样一来，SubType的实例不仅能从SuperType的实例中继承属性和方法，而且还
与SuperType的原型挂上了钩。于是instance(通过内部的[[Prototype]])指向SubType.prototype，而
SubType.prototype(作为SuperType的实例又通过[[prototype]])指向SuperType.prototype。注意，
getSuperValue()方法还在SuperType.prototype对象上，而prototype属性则在SupType.prototype上。
这是因为getSuperValue()是一个原型方法，而property是一个实例属性。SubType.prototype现在是
SuperType的一个实例，因此protpery才会存储在它上面。还要注意，由于SubType.prototype的constructor
属性被重写为指向SuperType，所以instanc.constructor也指向SuperType。

原型链扩展了签名描述的原型搜索机制。我们知道，读取实例上的属性时，首先会在实例上搜索这个属性。
如果没找到，则会继续搜索实例的原型。在通过原型链实现继承之后，搜索就可以继承向上，搜索原型的原型。
对前面的例子而言，调用instance.getSuperValue()经过了3步骤搜索:instance、SubType.prototype和
SuperType.prototype，最后一步才找到了这个方法。对属性和方法的搜索会一直持续到原型链的末端。

1.默认原型

实际上，原型链中还又一环。默认情况下，所有引用类型都继承自Object，这也是通过原型链实现的。任何函数
的默认原型都是一个Object的实例，这意味着这个实例有一个内部指针指向Object.prototype。着也是为什么
自定义类型能够继承包括toString()、valueOf()在内的所有默认方法的原因。因此前面的例子还有额外一层
继承关系。

SubType继承SuperType，而SuperType继承Object。在调用instance.toString()时，实际上调用的时保存
在Object.prototype上的方法。

2.原型与继承关系

原型与实例的关系可以通过两种方式来确定。第一种方式是使用instanceof操作，如果一个实例的的原型链
中出现过相应的构造函数，则instanceof返回ture。

console.log(instance instanceof Object)     //true
console.log(instance instanceof SuperType)  //true
console.log(instance instanceof SubType)    //true

从技术上讲，instance是Object、SuperType和SubType的实例，因为instance的原型链中包含这些构造函数
的原型。结果就是instanceof对所有这些构造函数都返回true。

确定这种关系的第二种方法是使用isPropertyOf()方法。原型链中的每个原型都可以调用这个方法，如下例
所示，只要原型链中包含这个原型，这个方法就返回true

console.log(Object.prototype.isPrototypeOf(instance))     //true
console.log(SuperType.prototype.isPrototypeOf(instance))  //true
console.log(SubType.prototype.isPrototypeOf(instance))    //true

3.关于方法

子类有的时候需要覆盖父类的方法，或者增加父类没有的方法。为此，这些方法必须在原型赋值之后再添加
到原型上。来看下面的例子：
function SuperType(){
  this.property = true;
}

SuperType.prototype.getSuperValue = function(){
  return this.property;
}

function SubType(){
  this.subproperty = false;
}

SubType.prototype = new SuperType();

SubType.prototype.getSubValue = function(){
  return this.subproperty;
}

SubType.prototype.getSuperValue = function(){
  return false;
}

let instance = new SubType();
console.log(instance.getSuperValue())

在上面的代码中，加粗的部分涉及两个方法。第一个方法getSubValue()是SubType的新方法，而第二个方法
getSuperValue()是原型链上已经存在但这里被遮蔽的方法。后面在SubType实例上调用getSuperValue（）
时调用的就是这个方法。而SuperType的实例仍然会调用最初的方法。重点在于上述两个方法都是在把原型赋值
为SuperType的实例之后定义的。

另一个要理解的重点是，以对象字面量方式创建原型方法会破环之前的原型链，因为着相当于重写了原型链。

function SuperType(){
  this.property = true;
}
SuperType.prototype.getSuperValue = function(){
  return this.property;
}
function SubType(){
  this.subproperty = false;
}

SubType.prototype = new SuperType();

SubType.prototype = {
  getSubValue(){
    return this.subproperty;
  },
  someOtherMethod(){
    return false;
  }
}

let instance = new SubType();
console.log(instance.getSuperValue())

这段代码中，子类的原型被赋值为SuperType的实例后，又被一个对象字面量覆盖了。覆盖后的原型是一个
Object的实例，而不再是SuperType的实例。因此之前的原型链就断了。SubType和SuperType之间也没有
关系了。

4.原型链的问题

原型链虽然是实现继承的强大工具，但它也有问题。主要问题出现在原型中包含引用值得时候。前面在谈到
得原型得问题时也提到过，原型中包含的引用值会在所有实例间共享，这也时为什么属性通常会在构造函数
中定义而不会定义在原型上的原因。在使用原型实现继承时，原型实际上变成了另一个类型的实例。着意味
着原先的实例属性摇身一变成为了原型属性。

function SuperType(){
  this.colors = ['red', 'blue', 'green']
}

function SubType(){}

SubType.prototype = new SuperType();

let instance1 = new SubType();
instance1.colors.push('black')
console.log(instance1.colors)
//(4) ["red", "blue", "green", "black"]

let instance2 = new SubType();
console.log(instance2.colors)
//(4) ["red", "blue", "green", "black"]

在这个实例中，SuperType构造函数定义了一个colors属性，其中包含一个数组（引用值）。每个SuperType
的实例都会有自己的colors属性，包含自己的数组。但时，当SubType通过原型继承SuperType后，SubType.
prototype变成了SuperType的一个实例，因而也获得了自己的colors属性。着类似于床了SubType.prototype.colors
属性。最终结果时，SubType的所有实例都会共享这个colors属性。这一点通过instance1.colors上的修改
也能反映到instance2.colors上就可以看出来。

