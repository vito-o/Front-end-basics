第24章 网络请求与远程资源

本章内容
·使用XMLHttpRequest对象
·处理XMLHttpRequest事件
·源域Ajax限制
·Fetch API
·Streams API

注意 本章会全面介绍XMLHttpRequest，但它实际上是过时web规范的产物，应该只在旧版浏览器中使用，实际开发
中尽可能使用fetch()

24.1 XMLHttpRequest对象

所有现代浏览器都通过XMLHttpRequest构造函数原生支持XHR对象：

let xhr = new XMLHttpRequest()

24.1.1 使用XHR

使用XHR对象首先要调用open()方法，这个方法接收3个参数：请求类型('get'、'post'等)，请求URL，以及
表示请求是否异步的布尔值
xhr.open('get', 'example.php', false)

调用open()不会实际发送请求，只是为发送请求做好准备。

注意 是能访问同源URL，也就是域名相同、端口相同、协议相同。如果请求的URL与发送请求的页面在任何方面
有所不同，则会抛出安全错误。

xhr.open('get', 'example.php', false)
xhr.send(null)

send()方法接收一个参数，是作为请求体发送的数据，如果不需要发送请求体，则必须传入null，因为这个
参数在某些浏览器中是必须的。调用send()之后，请求就会发送到服务器。

因为这个请求时同步的，所以js代码会等待服务器响应之后再继续执行。收到响应后，xhr对象的以下属性会被
填充上数据
·responeseText:作为响应体返回的文本
·responseXML:如果响应的内容类型是'text/xml'或'application/xml'，那就是包含响应数据的xml dom文档
·status：响应的http状态
·statusText：响应的http状态描述。

XHR对象有一个readyState属性，表示当前处在请求/响应过程的哪个阶段。

·0：未初始化
·1：已打开(open)
·2：以发送(send)
·3：接收中(Receiving)
·4：完成(Complete)

每次readyState从一个值变成另一个值，都会触发readystatechange事件。

let xhr = new XMLHttpRequest()
xhr.onreadystatechange = function(){
  if(xhr.readyState == 4) {
    console.log('xxx')
  } else {
    console.log('unsuccessful')
  }
}
xhr.open('get', 'http://www.baidu.com', true);
xhr.send(null)


在收到响应之前如果向取消异步请求，可以调用abort()方法

xhr.abort()

调用这个方法后，XHR对象会停止触发事件，并阻止访问这个对象上任何与响应相关的属性。
中断请求后，应该取消XHR对象的引用。由于内存问题，不推荐重用XHR对象。

24.1.1 HTTP 头部

每个HTTP请求和响应都会携带一些头部字段，这些字段可能对开发者有用。XHR对象会通过一些方法暴露与请求和
响应相关的头部字段。

默认情况下，XHR请求会发送一下头部字段。

·accept：浏览器可以处理的内容类型
·accept-charset：浏览器可以显示的字符集
·accept-Encoding：浏览器可以处理的压缩编码类型
·Accept-Language：浏览器使用的语言。
·Connection：浏览器与服务器的连接类型。
·Cookie：页面中设置的Cookie
·Host：发送请求的页面所在的域。
·Referer：发送请求的页面的URI。注意，这个字段在HTTP规范中就拼错了，所以考虑到兼容性也必须将错就错。
·User-Agent：浏览器的用户代理字符串

xhr.setRequestHeader('MyHeader', 'myvalue')
xhr.send(null)


可以使用getResponseHeader()方法从XHR对象获取响应头部，
getAllResponseHeaders()可以取得所有响应头部


24.1.3 GET请求

发送GET请求最常见的一个错误是查询字符串格式不对。查询字符串中的每个名字和值都必须使用encodeURIComponent()
编码，所有名/值对必须以和号(&)分隔，

xhr.open('get', 'example.php?name1=value1&name2=value2', true)


可以使用以下函数将查询字符串参数添加到现有的URL末尾：

function addURLParam(url, name, value) {
  url += (url.indexOf('?') == -1 ? '?' : '&')
  url += encodeURIComponent(name) + '=' + encodeURIComponent(value)
  return url;
}

24.1.4 POST请求

默认情况下，对服务器而言，POST请求与提交表单时不一样的。服务器逻辑需要读取原始POST数据才能取得浏览器
发送的数据。不过，可以使用XHR模拟表单提交。为此，第一步需要把Content-Type头部设置为application/x-www-formurlencoded
这是提交表单时的内容类型。第二步是创建对应格式的字符串。POST数据此时使用与查询字符串相同的格式。如果
网页中确实有一个表单需要序列表并通过XHR发送到服务器，可以使用serialize()函数来创建响应的字符串。

24.1.5 XMLHttpRequest Level 2

1.FormData类型

现代web应用程序经常需要对表单数据进行序列化，因此2新增了FormData类型。FormData类型便于表单序列化，
也便于创建于表单类似格式的数据然后通过XHR发送

let data = new FormData()
data.append('name', 'nicholsa')


-------------------------

let form = document.getElementById('user-info')
xhr.send(new FormData(form))

使用FormData的另一个方便之处是不再需要给XHR对象显式设置任何请求头部了。XHR对象能够识别作为FormData
实例传入的数据类型并自动配置相应的头部。

2.超时

xhr.timeout = 1000 //设置1秒超时
xhr.ontimeout = function(){
  alert(xxx)
}

3.overrideMimeType()方法

overrideMimeType()方法用于重写xhr响应的MIME类型。

因为响应返回的MIME类型决定了XHR对象如何处理响应，所以如果有办法覆盖服务器返回的类型，那么是有帮助的。

let xhr = new XMLHttpRequest()
xhr.open('get', 'text.php', true)
xhr.overrideMimeType('text/xml')
xhr.send(null)

这个例子强制让XHR把响应当初xml而不是纯文本来处理。为了正确覆盖响应的MIME类型，必须在调用send之前
overrideMimeType()

24.2 进度事件

24.3 跨资源共享

通过XHR进行ajax同学的一个主要限制是跨源安全策略。默认情况下，XHR只能访问于发起请求的页面在同一个
域内的资源。这个安全限制可以放置某些恶意行为。不过，浏览器也需要支持合法跨源访问的能力

跨源资源共享（CORS, Cross-Origin Resource Sharing）定义了浏览器域服务器如何实现跨源通信。CORS背后
的基本思路就是使用自定义的HTTP头部允许浏览器和服务器相互了解，以确实请求活响应应该成功还是失败。

对于简单的请求，比如GET或POST请求，没有自定义头部，而且请求体是text/plain类型，这样的请求在发送时
会有一个额外的头部叫Origin。Origin头部包含发送请求的页面的源（协议、域名和端口），以便服务器确定
是否为其提供响应。

Origin: http://www.nczonline.net

如果服务器决定响应请求，那么应该发送Access-Control-Allow-Origin头部，包含相同的源或者如果资源是公开
的，那么就包含“*”。比如：
Access-Control-Allow-Origin: http://www.nczonline.net

如果没有这个头部，或者有但源不匹配，则表示不会响应浏览器请求。否则，服务器就会处理这个请求。注意，无论
请求还是响应都不会包含cookie信息。

24.3.1 预检请求

CORS通过一种预检请求(preflighted request)的服务器验证机制，允许使用自定义头部。除了GET和POST之外
的方法，以及不同请求体内容类型。在要发送涉及上述某种高级选项的请求时，会先向服务器发送一个“预检”请求。
这个请求使用OPTIONS方法发送并包含以下头部

·Origin：与简单请求相同。
·Access-Control-Request-Method：请求希望使用的方法
·Access-Control-Request-Headers：（可选）要使用的逗号分隔的自定义头部列表。

在这个请求发送后，服务器可以确定是否允许这种类型的请求。服务器会通过在响应中发送如下头部与浏览器沟通
这些信息。
·Access-Control-Allow-Origin：与简单请求相同
·Access-Control-AllowMethods：允许的方法（逗号分隔的列表）
·Access-Control-Allow-Headers：服务器允许的头部（逗号分隔的列表）
·Access-Control-Max-Age：缓存预检请求的秒数。

预检请求返回后，结果会按响应指定的时间缓存一段时间。换句话或，只有第一次发送这种类型的请求时才会
多发送一次额外的HTTP请求

24.3.2 凭据请求

默认情况下，跨源请求不提供凭据（cookie、HTTP认证和客户端SSL证书）。可以通过将withCredentials属性
设置为true来表明请求会发送凭据。如果服务器允许带凭据的请求，那么可以在响应中包含如下的HTTP头部

Access-Control-Allow-Credentials: true

如果发送了凭据请求而服务器返回的响应中没有这个头部，则浏览器不会把响应交给javascript（responseText
是空字符串，status是0，onerror()被调用了）。注意，服务器也可以在预检请求的响应中发送这个HTTP头部，
以表明这个源允许发送凭据请求。

24.4 代替性跨源技术

24.4.1 图片探测

24.4.2 JSONP

JSONP是“JSON with padding”的简写，是在web服务上留下的一种json变体。JSONP看起来和JSON一样，只是
会被包含在一个函数调用里，比如：
callback({'name':'nicholas'})

JSONP格式包含两部分：回调和数据。回调是在页面接收到响应之后应该调用的函数，通常回调函数的名称是通过
请求来动态指定的。而数据就是作为参数传给传给回调函数的JSON数据。
如下：
http://freegeoip.net/json/?callback=handleResponse

JSONP调用时通过动态创建<script>元素并为src属性指定跨域URL实现的。此时的<script>与<img>元素类似，
能够不受限制地从其他域加载资源。因为JSONP是有效的javasciprt，所以JSONP响应在被加载完成之后会立即
执行。

JSONP缺点

1.JSONP是从不同的域拉取可执行代码，如果这个域并不可信，则可能在响应中加入恶意内容
2.不好确定JSONP请求是否加载失败。虽然html5规定<script>元素的onerror时间处理程序，但还没有任何浏览器
实现。

24.5 Fetch API

Fetch API能够执行XMLHttpRequest对象的所有任务，但更容易使用，接口也更现代化，能够在web工作线程
等现代工具中使用。XMLHttpRequest可以选择异步，而Fetch API则必须是异步。

24.4.1 基本用法

fetch()方法是暴露在全局作用域中的，包括主页面执行线程、模块和工作线程。调用这个方法，浏览器就会
向给定URL发送请求。

1.分派请求

fetch()只有一个必须的参数input。多数情况下，这个请求是要获取资源的URL。这个方法返回一个期约：
let r = fetch('/bar')
console.log(r); //Promise <pending>


fetch('bar.txt')
  .then(res => {
    console.log(res)
  })

2.读取响应
读取响应内容的最简单方法是取得纯文本格式的内容，这要用到text()方法。这个方法返回一个期约

fetch('bar.txt')
  .then(res => {
    res.text().then(data => {
      console.log(data)
    })
  })

fetch('bar.txt')
  .then(res => res.text())
  .then(data => console.log(data))

3.处理状态码和请求失败

状态码
res.status  //200
状态文本
res.statusText  //OK

fetch('/bar')
  .then(res => {
    console.log(res.status)
    console.log(res.statusText)
  })


24.7 Web Socket

Web Socket(套接字)的目标是通过一个长时连接实现域服务器全双工、双向的通信。

在js中创建web Socket时，一个HTTP请求会发送到服务器以初始化连接。服务器响应后，连接使用HTTP的
Upgrade头部从HTTP协议切换到Web Socket协议。这意味着Web Socket不能通过标准HTTP服务器实现，而
必须使用支持该协议的专有服务器。

使用自定义协议而非HTTP协议的好处时，客户端域服务器之间可以发送非常少的数据，不会对HTTP造成任何
负担。使用更小的数据包让WebSocket非常适合带宽和延迟问题比较明显的移动应用。
使用自定义协议的确定是，定义协议的时间比定义js API要长。

web Socket得到了所有主流浏览器支持。

24.7.1 API

let socket = new WebSocket('ws://www.example.com/server.php')

注意，必须给WebSocket构造函数传入一个绝对URL。同源策略不适用于WebSocket，因此可以打开到任意站点
的连接。至于是否与来自特定源的页面通信，则完全取决于服务器

24.7.2 发送和接收数据

//客户端
let socket = new WebSocket('ws://www.example.com/server.php')

let stringData = 'Hello world'

socket.send('stringData)

//服务端
socket.onmessage = function(event) {
  let data = event.data;
}


24.8 安全

CSRF cross-site request forgery 跨站请求伪造

关于安全防护Ajax相关URL的一般理论认为，需要验证请求发送着拥有对资源的访问权限。
可以通过如下方式实现：
·要求通过SSL访问能够被Ajax访问的资源
·要求每个请求都发送一个按约定算法计算好的令牌

注意，以下手段对防护CSRF攻击时无效的

·要求POST而非GET请求（很容易修改请求方法）
·使用来源URL验证来源（来源URL很容易伪造）
·基于cookie验证（同样很容易伪造）

24.9 小结

Ajax四无须刷新当前页面即可从服务器获取数据的一个方法，具有如下特点。

·让Ajax迅速流行的中心对象时XMLHttpRequest(XHR)

XHR的一个主要限制时同源策略，即通信只能在相同域名、相同端口和相同协议的提前下完成。访问超出这些
限制之外的资源会导致安全错误，除非使用了正式的跨域方案。这个方案叫做跨源资源共享（CORS, Cross-
Origin Resource Sharing）,XHR对象原生支持CORS。图片探测和JSONP时另外两种跨域通信技术，但没有
CORS可靠。

Fetch API是作为对XHR对象的一种端到端的代替方案而提出的。这个API提供了优秀的基于期约的结构、更
直观的接口，以及对Stream API的最好支持。

Web Socket时与服务器的全双工、双向通信渠道。与其他方案不同，Web Socket不使用HTTP，而使用了自定义
协议，目的时更块地发送小数据。这需要专用的服务器，但速度优势明显。


