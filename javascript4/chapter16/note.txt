第16章 DOM2和DOM3

·DOM2到DOM3的变化
·操作样式的DOM API
·DOM遍历于范围

DOM1(DOM Level 1) 主要定义了HTML和XML文档的底层结构。
DOM2(DOM Level 2) 和 DOM3(DOM Level 3)在这些结构之上加入了更多交互能力，提供了更高级的XML特性。

实际上，DOM2和DOM3时按照模块化的思路来指定标准的，每个模块之间有一定关联，但分别针对某个DOM子集。

·DOM Core：在DOM1核心部分的基础上，为节点增加方法和属性。
·DOM Views：定义基于样式信息的不同视图
·DOM Events：定义通过事件实现DOM文档交互
·DOM Style：定义以编程方式访问和修改CSS样式的接口
·DOM Traversal and Range：新增遍历DOM文档及选择文档内容的接口
·DOM HTML：在DOM1 HTML部分的基础上，增加属性、方法和新接口
·DOM Mutation Observers：定义基于DOM变化触发回调的接口。这个模块时DOM4级模块，用于取代Mutation Event

16.1 DOM的演进

DOM2和DOM3 core模块的目标时扩展DOM API，满足xml的所有需求并提供更好的错误处理和特性检测。很大程度
上，这意味着支持XML命名空间的概念。DOM2 Core没有新增任何类型，仅仅在DOM1 Core基础上增加了一些方法
和属性。DOM3 Core则除了增强原有类型，也新增了一些新类型。

16.1.1 XML命名空间

xml命名空间可以实现在一个格式规范的文档中混用不同的xml语言，而不必单校元素命名冲突。严格来讲，xml
命名空间在XHTML中才支持，html并不支持。因此本节示例使用XHTML.

命名空间是使用xmlns指定的。XHTML的命名空间是"http://www.w3.org/1999/xhtml"。应该包含在任何格式
规范的XHTML页面的<html>元素中。如下：

<html xmlns="http://www.w3.org/1999/xhtml">
  <head></head>
  <body></body>
</html>

对这个例子来说，所有元素都默认属于XHTML命名空间。可以使用xmlns给命名空间创建一个前缀，格式为
“xmlns：前缀”，如下所示：

<xhtml:html xmlns:xhtml="http://www.w3.org/1999/xhtml">
  <xhtml:head></xhtml:head>
  <xhtml:body></xhtml:body>
</xhtml:html>

这里为XHTML命名空间定义了一个前缀xhtml，同时所有XHTML元素都必须加上这个前缀。为了避免混淆，属性
也可以加上命名空间前缀。

<xhtml:html xmlns:xhtml="http://www.w3.org/1999/xhtml">
  <xhtml:head></xhtml:head>
  <xhtml:body xhtml:class="home">
    hello
  </xhtml:body>
</xhtml:html>

这里的class属性被加上了xhtml前缀。如果文档中只使用一种XML语言，那么命名空间前缀其实是多余的，
只有一个文档混合使用多种xml语言时才有必要。比如下面这个文档就使用了XHTML和svg两种语言

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Example XHTML page</title>
  </head>
  <body>
    <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 100 100" style="width:100%;height:100%">
      <rect x="0" y="0" width="100" height="100" style="fill:red"/>
    </svg>
  </body>
</html>

在这个例子中，通过给<svg>元素设置自己的命名空间，将其标识为当前文档的外来元素。这样一来，<svg>
元素及其属性，包括它的后代都会被认为属于"http://www.w3.org/2000/svg"命名空间。虽然这个文档从
技术角度讲是XHTML文档，但由于使用了命名空间，其中包含的SVG代码也是有效的。

对于这样的文档，如果调用某个方法与节点交互，就会出现一个问题。比如，创建了一个新元素，那这个元素
属于哪个命名空间？查询特定标签名时，结果中应该包含哪个命名空间下的元素？DOM2 Core为了解决这些
问题，给大部分DOM1方法提供了特定于命名空间的版本。

1.Node的变化
在DOM2中，Node类型包含以下特定于命名空间的属性：
·localName，不包含命名空间前缀的节点名
·namespaceURI，节点的命名控件URL，如果未指定则为null
·prefix，命名空间前缀，如果未指定则为null。

在节点使用命名空间前缀的情况下，nodeName等于prefix + ':' + localName。

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Example XHTML page</title>
  </head>
  <body>
    <s:svg xmlns="http://www.w3.org/2000/svg" version="1.1"
       viewBox="0 0 100 100" style="width:100%;height:100%">
      <s:rect x="0" y="0" width="100" height="100" style="fill:red"/>
    </s:svg>
  </body>
</html>

DOM3进一步增加了如下与命名空间相关的方法：
·isDefaultNamespace(namespaceURI)，返回布尔值，标识namespaceURI是否未节点的默认命名空间；
·lookupNamespaceURI(prefix)，返回给定prefix的命名空间URI
·lookupPrefix(namespaceURI)，返回给定namespaceURI的前缀。

2.Document的变化
DOM2在Document类型上新增了如下命名空间特定的方法：

·createElementNS(namespaceURI, tagName)，以给定的标签名tagName创建指定命名空间namespaceURI
的一个新元素；
·createAttributeNS(namespaceURI, attributeName)，以给定的属性名attributeName创建指定命名空间
namespaceURI的一个新属性；
·getElementsByTagNameNS(namespaceURI, tagName)，返回指定命名空间namespaceURI中所有标签名为
tagName的元素的NodeList。

使用这些方法都需要传入相应的命名空间URI（不是命名空间前缀），如下：

//创建一个新svg元素
let svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')

//创建一个任意命名空间的新属性
let att = document.createAttributeNS('http://www.somewhere.com', 'random')

//获取所有XHTML元素
let elems = document.getElementsByTagNameNS('http://www.w3.org/1999/xhtml', '*');

这些命名空间特定的方法只在文档中包含两个或两个以上命名空间时才有用。

3.Element 的变化

DOM2 Core对Element类型的更新主要集中在对属性的操作上。

·getAttrobiteNS(namespaceURI, localName), 
·getAttributeNodeNS(namespaceURI, localName)
·getElementsByTagNameNS(namespaceURI, tagName)
·hasAttributeNS(namespaceURI, localName)
·removeAttributeNS(namespaceURI, localName)
·setAttributeNS(namespaceURI, qualifiedName, value)

4.NamedNodeMap的变化

NamedNodeMap主要标识属性，所以这些方法大都适用于属性：

`getNamedItemNS(namespaceURI, localName)
`removeNamedItemNS(namespaceURI, localName)
`setNamedItemNS(node)

16.1.2 其他变化

DOM API的完整性与可靠性

1.DocumentType的变化

DocumentType新增了3个属性：publicId、systemId和internalSubset。

publicId、systemId属性标识文档类型声明中有效但无法使用DOM1 API访问的数据。

document.doctype.publicId
"-// W3C// DTD HTML 4.01// EN"
document.doctype.systemId
"http://www.w3.org/TR/html4/strict.dtd"

internalSubset用于访问文档类型声明中可能包含的额外定义

2.Document的变化

importNode()方法跟cloneNode()方法类似，同样接收两个参数：要复制的节点和表示是否同时复制子树的
布尔值，返回结果时适合在当前文档中使用的新节点。
let newNode = document.importNode(oldNode, true)
document.body.appendChild(newNode)

3 Node的变化

DOM3 新增了两个用于比较节点的方法：isSameNode()和isEqualNode()。

4.内嵌窗格的变化

DOM2 HTML 给 HTMLIFrameElement（即<iframe>，内嵌窗格）类型新增了一个属性，叫contentDocument。
这个属性包含代表子内嵌窗格中内容的document对象的指针。

let iframe = document.getElementById('myIframe')
let iframeDoc = iframe.contentDocument;

contentDocument 和 contentWindow属性。

注意：跨源访问子内嵌窗格的document对象会受到安全限制。如果内嵌窗格中加载了不同域名（或子域名）的
页面，或者该页面使用了不同协议，则访问其document对象会抛出错误。

16.2 样式

HTML中的样式有3中定义方式：外部样式、文档样式和元素特定样式

DOM2 style为这3中应用样式的机制都提供了API

16.2.1 存取元素样式

let myDiv = document.getElementById('myDiv')

myDiv.style.backgroundColor = 'red'
myDiv.style.width = '100px'
myDiv.style.height = '200px'
myDiv.style.border = '1px solid black'

console.log(myDiv.style.backgroundColor)

1.DOM样式属性和方法

·cssText, 包含style属性中的css代码
·length, 应用给元素的css属性数量
·parentRule，表示css信息的CSSRule对象
·getPropertyPriority(propertyName),如果css属性propertyName使用了!important则返回“important”
  否则返回空字符串。
·getPropertyValue(propertyName),返回属性propertyName的字符串值
·item(index),返回索引为index的css属性名
·removeProperty(propertyName)，从样式中删除css属性propertyName
·serProperty(propertyName, value, priority)，这只css属性propertyName的值为value,priority是
  important或空字符串

myDiv.style.cssText
//background-color: red; width: 100px; height: 200px; border: 1px solid black;

cssText 一次性修改元素多个样式，原来的样式会丢失。

myDiv.style.length
//20

for(let i = 0, len = myDiv.style.length; i < len; i++){
  console.log(myDiv.style[i]) //或者用myDiv.style.item(i)
}

//background-color
//width
//height
//border-top-width
//border-right-width
//...

myDiv.style.getPropertyValue('background-color')
//"red"

myDiv.style.removeProperty('border')
//''

2.计算样式

style对象中包含支持style属性的元素为这个属性设置的样式信息，但不包含从其他样式表层叠继承的同样影响
该元素的样式信息。

DOM2 Style在document.defaultView上增加了getComputedStyle()方法
该方法接收两个参数，该方法返回一个CSSStyleDeclaration对象，包含元素的计算样式

意思：style对象上只有元素上设置的样式，对引入或者头部的样式是没有的，DOM2增加了一个方法，就可以有了

16.2.2 操作样式表

<link>  HTMLLinkElement
<style> HTMLStyleElement

CSSStyleSheet类型是一个通用样式表类型，可以表示以任何方式在HTML中定义的样式表

CSSStyleSheet类型继承StyleSheet，后者可用作非css样式表的基类。以下是CSSStyleSheet从StyleSheet
继承的属性。

`disabled
`href
`media
`ownerNode
`parentStyleSheet
`title
`type
`cssRules
`ownerRule
`deleteRule(index)
`insertRule(rule, index)

document.styleSheets表示文档中可用的样式表集合。

1.css规则


16.2.3 元素尺寸

1.偏移尺寸

·offsetHeight 元素在垂直方向上占用的像素尺寸，包括他的高度，水平滚动条高度（如果可见）和上下边框的高度
·offsetLeft 元素左边框外侧距离 包含元素 左边框内测的像素数。
·offsetTop 元素上边框外侧距离 包含元素 上边框内测的像素数。
·offsetWidth 元素在水平方向上占用的像素尺寸，包括他的宽度、垂直滚动条宽度和左右边框的宽度

注意：所有这些偏移尺寸属性都是只读的，每次访问都会重写计算。因此，应该尽量减少查询他们的次数。比如
把查询的值保存在局量中，就可用避免影响性能。

2.客户端尺寸

包含元素内容及其内边距所占用的空间

·clientWidth  内容区宽度加 左右内边距（padding） 宽度
·clientHeight 内容区高度加 上下内边距（padding） 高度

注意：客户端尺寸也是只读的，而且每次访问都会重新计算。

3.滚动尺寸

提供了元素内容滚动距离的信息

·scrollHeight 没有滚动条出现时，元素内容的总高度
·scrollLeft 内容区左侧隐藏的像素数，设置这个属性可用改变元素的滚动位置
·scrollTop 内容区顶部隐藏的像素数，设置这个属性可用改变元素的滚动位置
·scrollWidth 没有滚动条出现时，元素内容的总宽度

4.确定元素尺寸

浏览器在每个元素上都暴露了getBoundingClientRect()方法，返回一个DOMRect对象，包含6个属性：
left, top, right, bottom, height, width。这些属性给出了元素在页面中相对于视口的位置。

16.3 遍历