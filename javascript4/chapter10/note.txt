第十章 函数

本章内容
·函数表达式、函数声明及箭头函数
·模式参数及扩展操作符
·使用函数实现递归
·使用闭包实现私有变量

函数实际上是对象。
每个函数都是Function类型的实例，而Function也有属性和方法，跟其他引用类型一样。
因为函数是对象，所以函数名就是指向函数对象的指针，而且不一定与函数本身紧密绑定。

函数通常以
函数声明的方式定义：
function sum(num1, num2){
  return num1 + num2;
}

函数表达式
let sum = function(num1, num2){
  return num1 + num2;
}

函数表达式与函数声明几乎是等价的。

还有一种定义函数的方式与函数表达式很像，叫做“箭头函数”(arrow function)

let sum = (num1, num2) => {
  return num1 + num2
}

最后一种定义函数的方式是使用Function构造函数。这个构造函数接收 任意多个字符串参数，最后一个参数
始终会被当成函数体，而之前的参数都是新函数的参数。
let sum = new Function('num1', 'num2', 'return num1 + num2'); //不推荐

不推荐原因：
这段代码会被解释两次
第一次：是将它作为常规ECMAScript代码，
第二次：是解释传给构造函数的字符串。
很影响性能。

不过，把函数想象为对象，把函数名想象为指针式很重要的。

注意：这几种实例化函数对象的方式之间存在微妙但重要的差别。
      无论如何，通过其中任何一种方式都可以创建函数。

10.1 箭头函数

ECMAScript6新增。很大程度上，箭头函数实例化的函数对象与正式的函数表达式创建的函数对象行为式相同的。
任何可以使用函数表达式的地方，都可以使用箭头函数。

let arrowSum = (a, b) => {
  return a + b;
}

let functionExpressionSum = function(a, b){
  return a + b;
}

箭头函数简洁的语法非常适合嵌入函数的场景
let ints = [1, 2, 3]
ints.map((i) => {return i + 1})

如果只有一个参数，那也可以不用括号。只有没有参数，或者多个参数情况下，才需要使用括号

//等价
let double = x => { return 3 * x }
let double = (x) => { return 3 * x }

//没有参数要括号
let getRandom = () => { return Math.random() }

//多个参数需要括号
let sum = (a, b) => { return a + b }

箭头函数也可以不用大括号，但这样会改变函数的行为。使用大括号就说明包含“函数体”，可以在一个函数中
包含多条语句，跟常规的函数一样。如果不使用大括号，那么箭头后面就只能有一行代码，比如一个赋值操作，
或者一个表达式。而且，省略大括号会隐式返回这行代码的值。

let double = (x) => {return x * 3}
let triple  = (x) => 3 * x

箭头函数虽然语法简洁，但也有很多场合不适用。箭头函数不能使用arguments、super和new.target，也不能
用作构造函数。此外，箭头函数也没有prototype属性。

10.2 函数名

因为函数名就是指向函数的指针，所以他们跟其他包含对象指针的变量来具有相同的行为。这意味着一个函数
可以有多个名称

function sum(num1, num2){
  return num1 + num2;
}

console.log(sum(10, 10))          //20

let anotherSum = sum;
console.log(anotherSum(10, 10))   //20

sum = null;
console.log(anotherSum(10, 10))   //20

注意，使用不带括号的函数名会访问函数指针，而不会执行函数。

ECMAScript6的所有函数对象都会暴露一个只读的name属性，其中包含关于函数的信息。多数情况下，这个属性
中保存的就是一个函数标识符。或者说是一个字符串化的变量名。即使函数没用名称，也会如实显示成空字符串。
如果它是使用Function构造函数创建的，则会标识成"anonymous"

function foo() {}
let bar = function(){ }
let baz = () => {}

console.log(foo.name)               //foo
console.log(bar.name)               //bar
console.log(baz.name)               //baz
console.log((() => {}).name)        //
console.log((new Function()).name)  //anonymous

如果函数是一个获取函数、设置函数，或者使用bind()实例化，那么标识符前面会加上一个前缀：

function foo(){ }
console.log(foo.bind(null).name)    //bound foo

let dog = {
  years: 1,
  get age(){
    return this.years;
  },
  set age(newAge){
    this.years = newAge;
  }
}

let propertyDescriptor = Object.getOwnPropertyDescriptor(dog, 'age')
console.log(propertyDescriptor.get.name)  //get age
console.log(propertyDescriptor.set.name)  //set age

10.3 理解参数

ECMAScript函数的参数跟大多数其他语言不同。ECMAScript函数既不关心传入的参数个数，也不关心参数的
数据类型。定义函数时要接收两个参数，并不意味着调用时就传两个参数。你可以传一个、三个，甚至要给也
不穿，解释器都不会报错。

之所以这样，主要是因为ECMAScript函数的参数再内部表现为一个数组。函数被调用时总会接收一个数组，但
函数并不关心这个数组中包含什么。如果数组中什么也没有，那没问题；如果数组的元素超出了要求，那也没
问题。事实上，再使用function关键字定义(非箭头)函数是，可以在函数内部访问arguments对象，从中取得
传进来的每个参数值。

arguments对象是一个类数组对象（但不是Array的实例），隐藏可以使用中括号语法访问其中的元素（第一个参数
是arguments[0]，第二个参数是arguments[1]）。而要确定传进来多少个参数可以访问arguments.length属性

function sayHi(name, message){
  console.log('Hello ' + name + ', ' + message)
}

function sayHi(){
  console.log('Hello ' + arguments[0] + ', ' + arguments[1])
}

表明，ECMAScript函数的参数只是为了方便才写出来的，并不是必须写出来的。与其他语言不同，在ECMAScript中
的命名参数不会创建让之后的调用必须匹配的函数签名。这是因为根本不存在验证命名参数的机制。

arguments对象的另一个有意思的地方就是，它的值始终会与对应的命名参数同步。

function doAdd(num1, num2){
  arguments[1] = 10;
  console.log(arguments[0] + num2)
}

这个doAdd()函数把第二个参数的值重写为10.因为arguments对象的值会自动同步到对应的命名参数，所以
修改arguments[1]也会修改num2的值，因此两者的值都是10.但这并不意味着他们都访问同一个内存地址，他们
在内存中还是分开的，只不过会保持同步而已。另外还要记住一点：如果只传一个参数，然后把arguments[1]
这只为某个值，那么这个值并不会反映到第二个命名参数。这是因为arguments对象的长度是根据传入的参数
个数，而非定义函数时给出的命名参数的个数决定的。

对于命名参数而言，如果调用函数时没有传给这个参数，那么它的值就是Undefined。这就类似于定义了变量
而没有初始化。比如，如果址给doAdd()传了一个参数，那么Num2的值就是undefined。

严格模式下，arguments会有一些变化。首先，像签名那也给arguments[1]赋值不会再影响num2的值。就算把
arguments[1]设置为10，num2的值仍然还是传入的值。其次，再函数中尝试重写arguments对象会导致语法错误。

箭头函数中的参数

如果函数是使用箭头语法定义的，那么穿给函数的参数将不能使用arguments关键字访问，而只能通过定义的
命名参数访问。

注意：ECMAScript中的所有参数都按值传递的。不可能按引用传递参数。如果把对象作为参数传递，那么传递
的值就是这个对象的引用。

10.4 没有重载

ECMAScript函数不能像传统编程那样重载。再其他语言比如java中，一个函数可以有两个定义，只要签名（
接收参数的类型和数学）不同就行。如前所示ECMAScript函数没有签名，因为参数是由包含零个或多个值的
数组标识的。没有函数签名，字然也就没有重载了。

如果再ECMAScript中定义了两个同名函数，则后定义的会覆盖先定义的。

10.5 默认参数

在ECMAScript5.1及以前，实现默认参数的一种常用方式就是检测某个参数是否等于undefined,如果是则意味
这没有传这个参数，那就给它赋一个值：

function makeKing(name = 'Henry'){
  return `king ${name} VIII`
}

在使用默认参数时，arguments对象的值不反映参数的默认值，只反映传给函数的参数。当然，跟ES5严格模式
一样，修改命名参数也不会影响arguments对象，它始终以调用函数时传入的值为准：

function makeKing(name = 'Henry'){
  name = 'Louis'
  return `King ${arguments[0]}`
}
console.log(makeKing())         //King undefined
console.log(makeKing('Louis'))  //King Louis

默认参数值并不限于原始值或对象类型，也可以使用调用返回的值
let romanNumberals = ['1', '2', '3', '4']
let ordinality = 0;

function getNumberals(){
  return romanNumberals[ordinality++]
}

function makeKing(name = 'Henry', numerals = getNumberals()){
  return `King ${name} ${numerals}`
}

console.log(makeKing())   //King Henry 1

函数的默认参数只有在函数被调用时才会求值，不会在函数定义时求值。而且，计算默认值的函数只有在调用
函数但未传相应参数时才会被调用。

箭头函数统一也可以这样使用默认参数，只不过在只有一个参数时，就必须使用括号而不能省略了；

let makeKing = (name = 'Henry') => `King ${name}`


默认参数作用域于暂时性死区

因为在求值默认参数时可以定义对象，也可以动态调用函数，所以函数参数肯定是在某个作用域中求值的。
function makeKing(name = 'Henry', numberals = 'VIII'){
  return `King ${name} ${numerals}`
}
console.log(makeKing())

这里的默认参数会按照定义他们的顺序依次被初始化。

因为参数是按顺序初始化的，所以后定义默认值的参数可以引用先定义的参数。

function makeKing(name = 'Henry', numerals = name){
  return `King ${name} ${numerals}`
}

console.log(makeKing())
//King Henry Henry

参数初始化顺序遵循“暂时性死区”规则，即签名定义的参数不能引用后面定义的。像这样会抛出错误：
function makeKing(name = numerals, numerals = 'VIII'){
  return `King ${name} ${numerals}`
}
console.log(makeKing())
//VM106:1 Uncaught ReferenceError: Cannot access 'numerals' before initialization

参数也存在于自己的作用域中，他们不能引用函数体的作用域
function makeKing(name = 'Henry', numerals = defaultNumeral){
  let defaultNumeral = 'VIII'
  return `King ${name} ${numerals}`
}
console.log(makeKing())
//Uncaught ReferenceError: defaultNumeral is not defined

10.6 参数扩展于收集
ECMAScript6新增了扩展操作符，使用它可以非常简洁地操作和组合集合数据。扩展操作符最有用的场景就是
使用函数定义中的参数列表，在这里可以充分利用这门语言的弱类型及参数长度可变的特点。扩展操作符既可以
用于调用函数时传参，也可以用于定义函数参数。

10.6.1 扩展参数

10.6.1 收集参数
在构思函数定义时，可以使用扩展操作符把不同长度的独立参数组合未一个数组。这有点类似arguments对象的
构造机制，只不过收集参数的结果会得到一个Array实例。

function getSum(...values){
  return values.reduce((x, y) => x + y, 0)
}

console.log(getSum(1,2 ,3))

使用收集参数并不影响arguments对象，它仍然反映调用时传给函数的参数。

10.7 函数声明于函数表达式

javascript引擎在加载数据时对他们是区别对待的。javascript引擎在任何代码执行之前，会先读取函数声明
并在执行上下文中生成函数定义。而函数表达式必须等到代码执行到它那一行，才会在执行上下文中生成函数
定义。

console.log(sum(10, 10))
function sum(num1, num2){
  return num1 + num2;
}

以上代码可以正常允许，因为函数声明会在任何代码执行之前被读取并添加到执行上下文。这个过程叫作
函数声明提升（function declaration hoisting）。在执行代码时，javascript引擎会先执行一遍扫描，
把发现的函数声明提升到原代码数的顶部。因此即使函数定义出现在调用他们的代码之后，引起也会把函数
声明提升到顶部。如果改为函数表达式，那么执行的适合就会出错：

注意： 在使用函数表达式初始化变量时，也可以给函数一个名称，比如let sum = function sum(){}

10.8 函数作为值

因为函数名在ECMASCript中就是变量，所以函数可以用在任何可以使用变量的地方。这意味着不仅可以把
函数作为参数传给另一个函数，而且还可以在一个函数中返回另一个函数。

function callSomeFunction(someFunction, someArgument){
  return someFunction(someArgument)
}

function add10(num){
  return num + 10;
}

let result1 = callSomeFunction(add10, 10)
console.log(result1)    //20

function getGreeting(name){
  return 'hello, ' + name;
}

let result2 = callSomeFunction(getGreeting, 'nicholas')
console.log(result2)    //hello, nicholas



function createComparisonFunction(propertyName){
  return function(object1, object2){
    let value1 = object1[propertyName]
    let value2 = object2[propertyName]

    if(value1 < value2){
      return -1;
    }else if(value1 > value2){
      return 1;
    }else {
      return 0;
    }
  }
}

let data = [
  {name: 'Zachary', age: 28},
  {name: 'Nicholas', age: 29},
]

data.sort(createComparisonFunction('name'))
console.log(data)
// 0: {name: "Nicholas", age: 29}
// 1: {name: "Zachary", age: 28}

10.9 函数内部

在ECMAScript5中，函数内部存在两个特殊的对象：arguments和this。ECMAScript6又新增了new.target属性

10.9.1 arguments

arguments对象前面讨论了多次，它是一个类数组对象，包含调用函数时传入的所有参数。这个对象只有以
function关键字定义函数（相对于箭头函数创建函数）时才会有。对然主要用于包含函数参数，但arguments
对象其实还有一个callee属性，是一个指向arguments对象所在函数的指针。

function factorial(num){
  if(num <= 1){
    return 1;
  }else {
    return num * factorial(num - 1)
  }
}

function factorial(num){
  if(num <= 1){
    return 1;
  }else {
    return num * arguments.callee(num - 1)
  }
}

10.9.2 this

另一个特殊的对象是this，它在标准函数和箭头函数中又不同的行为。

在标准函数中，this引用的是把函数当成方法调用的上下文对象，这时候通常称其为this值（在网页的全局上下
文中调用函数时，this指向windows）

window.color = 'red'

let o = {
  color: 'blue'
}

function sayColor(){
  console.log(this.color)
}

sayColor();   //red

o.sayColor = sayColor;
o.sayColor()  //blue

在箭头函数中，this引用的是定义箭头函数的上下文。下面的例子演示了这一点。在对sayColor()的两次
调用中，this引用的都是window对象，因为这个箭头函数是在window上下文中定义的。

window.color = 'red'

let o = {
  color: 'blue'
}

let sayColor = () => console.log(this.color)

sayColor();   //red

o.sayColor = sayColor;
o.sayColor()  //red

注意： 函数名只是保持指针的变量。因此全局定义的sayColor()函数和o.sayColor()是同一个函数，只不过
执行的上下文不同。

10.9.3 caller

ECMAScript5 也会给函数对象上添加一个属性：caller。虽然ECMAScript3中并没有定义，但所有浏览器除了
早期版本的Opera都支持这个属性。这个属性引用的是调用当前函数的函数，或者如果是在全局作用域中调用的
则为null。

function outer(){
  inner()
}

function inner(){
  //console.log(inner.caller)
  console.log(arguments.callee.caller)
}

outer();
//  ƒ outer(){ inner() }

在严格模式下访问arguments.callee会报错。ECMAScript也定义了arguments.caller，但在严格模式下访问
它会报错，在非严格模式下则始终是undefined。这是为了分清arguments.caller和函数的caller而故意为之。
而作为对这门语言的安全防护，这些改动也会让第三方代码无法监测同一上下文中允许的其他代码。
严格模式下还有一个限制，就是不能给函数的caller属性赋值。否则会导致错误。

10.9.4 new.target属性

ECMAScript6 新增了检测函数是否使用new关键字调用的new.target属性。如果函数是正常调用的则new.target
的值是undefined;如果是使用new关键字调用的，则new.target将引用被调用的构造函数。

function King(){
  if(!new.target){
    throw 'King must be instantiated using "new"'
  }
  console.log('King instantiated using "new"')
}

new King(); //King instantiated using "new"
King()      //Uncaught King must be instantiated using "new"

10.10 函数属性和方法

ECMAScript中的函数是对象，因此有属性和方法。每个函数都有两个属性：length和prototype。其中，
length属性保存函数定义的命名参数的个数，

function sayName(name){
  console.log(name)
}
function sum(num1, num2){
  return num1 + num2
}

function sayHi(){
  console.log('hi')
}

console.log(sayName.length) //1
console.log(sum.length)     //2
console.log(sayHi.length)   //0

prototype属性也许是ECMAScript核心中最有趣的部分。prototype是保存引用类型所有实例方法的地方，
这意味着toString()、valueOf()等方法实际上都保存在prototype上，进而由所有实例共享。在ECMAScript5
中，prototype属性是不可枚举的，因此使用for-in循环不会返回这个属性。

函数还有两个方法: apply()和call()。这两个方法都会以指定的this值来调用函数，即会设置调用函数时
函数体内this对象的值。apply()方法接收两个参数:函数内this的值和一个参数数组，第二个参数可以是
数组的实例，但也可以是arguments对象。

function sum(num1, num2){
  return num1 + num2;
}

function callSum1(num1, num2){
  return sum.apply(this, arguments)
}
function callSum2(num1, num2){
  return sum.apply(this, [num1, num2])
}
console.log(callSum1(10, 10))   //20
console.log(callSum2(10, 10))   //20

注意： 在严格模式下，调用函数时如果没有指定上下文对象，则this值不会指向window。除非使用apply()或
call()把函数指定欸一个对象，否则this的值会变成undefined。

ECMAScript5处于同样的目的定义了一个新方法:bind()。bind()方法会创建一个新的函数实例。其this值会
被绑定到传给bind()的对象。
window.color = 'red'
var o = {
  color: 'blue'
}
function sayColor(){
  console.log(this.color)
}
let objectSayColor = sayColor.bind(o)
objectSayColor();   //blue

10.11 函数表达式

函数声明的关键特点是函数声明提升，即函数声明会在代码执行之前获得定义。意味着函数声明可以出现在调用
它的代码之后。

任何时候，只要函数被当作值来使用，它就是一个函数表达式。
function a(){
  return function(){}
}
一个匿名函数被返回，函数被当作值来使用。

10.12 递归

function factorial(num){
  if(num <= 1){
    return 1
  }else{
    return num * arguments.callee(num - 1)
  }
}

arguments.callee就是一个指向正在执行的函数的指针，因此可以在函数内部递归调用。

不过，在严格模式下运行的代码时不能访问arguments.callee的，因为访问会出错。此时，可以使用命名函数
表达式达到目的。
const factorial = (function f(num){
  if(num <= 1){
    return 1;
  }else{
    return num * f(num - 1)
  }
})

10.13 尾调用优化

ECMAScript6规范新增了一项内存管理优化机制，让javascript引擎在满足条件时可以重用栈帧。具体来说，
这项优化非常适合“尾调用”，即外部函数的返回值是一个内部函数的返回值。比如
function outerFunction(){
  return innerFunction()  //尾调用
}

在ES6优化之前，执行这个例子会在内存中发生如下操作。
1.执行到outerFunction函数体，第一个栈帧被推到了栈上
2.执行outerFunction函数体，到return语句。计算返回值必须先计算innerFunction
3.执行到innerFunction函数体，第二个栈帧被推到了栈上
4.执行innerFunction函数体，计算其返回值
5.将返回值传回outerFunction，然后outerFunction再返回值。
6.将栈帧弹出栈外

在ES6优化之后，执行这个例子会在内存发生如下操作。
1.执行到outerFunction函数体，第一个栈帧被推到栈上。
2.执行outerFunction函数体，到达return语句。为求值返回语句，必须先求值innerFunction。
3.引擎发现把第一个栈帧弹出栈外也没问题，因为innerFunction的返回值也是outerFunction的返回值。
4.弹出outerFunction的 栈帧
5.执行到InnerFunction函数体，栈帧被推到栈上。
6.执行innerFunction函数体，计算其返回值
7.将innerFunction的栈帧弹出栈外。

很明显，第一种情况下没多调用依次嵌套函数，就会增加一个栈帧。而第二种情况下无论多少次嵌套函数，都只有
一个栈帧。这就是ES6尾调用优化的关键：如果函数的逻辑运行基于尾调用将其销毁，则引擎就会那么做。

注意 现在还没有办法测试尾调用优化是否起作用。不过，因为这是ES6规范所规定的，兼容的浏览器实现都能
保障在代码满足条件的情况下应用这个优化。

10.13.1 尾部调用优化的条件

尾调用优化的条件就是确定外部栈帧真的没有必要存在了。涉及的条件如下：
1.代码在严格模式下执行；
2.外部函数的返回值是对尾调用函数的调用；
3.尾调用函数返回后不需要执行额外的逻辑
4.尾调用函数不是引用外部函数作用域中自由变量的闭包

这个优化在递归场景下的效果最明显，因为递归代码最容易在栈内迅速产生大量栈帧。

注意 之所以要求严格模式，主要因为在非严格模式下函数调用中允许使用f.arguments和f.caller,而他们都会
引用 外部函数的栈帧。显然，这意味着不能应用优化了。因此尾调用优化要求必须在严格模式下有效，以防止
引用这些属性。

10.13.2 尾调用优化的代码

"use strict"

function fib(n){
  return fibImpl(0, 1, n)
}

function fibImpl(a, b, n){
  if(n === 0){
    return a;
  }

  return fibImpl(b, a + b, n - 1);
}

10.14 闭包

匿名函数经常被人误认为是闭包（closure）。闭包指的是那些引用了另外一个函数作用域中变量的函数，
通常是在嵌套函数中实现的。比如

function createComparisonFunction(propertyName){
  return function(object1, object2){
    let value1 = object1[propertyName]; //加粗
    let value2 = object2[propertyName]; //加粗

    if(value1 < value2){
      return -1;
    }else if(value1 > value2){
      return 1
    }else {
      return 0;
    }
  }
}

这里加粗的代码位于内部函数（匿名函数）中，其中引用了外部函数的变量propertyName。在这个内部函数
被返回并在其他地方被使用后，它仍然应用这那个变量。这是因为内部函数的作用域链包含createComparisonFunction()
函数的作用域

在调用一个函数时，会为这个函数调用创建一个执行上下文，并创建一个作用域链。然后用arguments和其他
命名参数来初始化这个函数的活动对象。外部函数的活动对象是内部函数作用域链上的第二个对象。这个作用域
链一直向外串起了所有包含函数的活动对象，直到全局执行上下文才终止。

在函数执行时，要从作用域链中查找变量，以便读、写值。

function compare(value1, value2){
  if(value1 < value2){
    return -1
  }else if (value1 > value2){
    return 1;
  }else{
    return 0
  }
}

let result = compare(5, 10)

这里定义的compare()函数是在全局上下文中调用的。第一次调用compare()时，会为它创建一个包含
arguments、value1和value2的活动对象，这个对象是其作用域链上的第一个对象。而全局上下文的变量
对象则是compare()作用域链上的第二个对象，其中包含this、result和compare。

注意  因为闭包会保留他们包含函数的作用域，所以比其他函数更占用内存。过度使用闭包可能导致内存过度占用
因此建议仅在是否必要时使用。v8等优化的js引擎会努力回收被闭包困住的内存，不过我们还是建议在使用闭包时
要谨慎。


10.14.1 this对象

在闭包中使用this会让代码变得复杂。如果内部函数没有使用箭头函数定义，则this对象会在运行时绑定到执行
函数的上下文。如果在全局函数中调用，则this在非严格模式下等于window，在严格模式下等于undefined。
如果作为某个对象的方法调用，则this等于这个对象。匿名函数在这种情况下不会绑定到某个对象，这就意味
着this会指向window，除非在严格模式下this是undefined。不过，由于闭包的写法所致，这个事实有时候没有
那么容易看出来。

window.identity = 'The Window'

let object = {
  identity: 'My Object',
  getIdentityFunc(){
    return function(){
      return this.identity;
    }
  }
}

console.log(object.getIdentityFunc()())

前面介绍过，每个函数在被调用时都会自动创建两个特殊变量：this和arguments。内部函数永远不可能直接
访问外部函数的这两个变量。但是，如果把this保存到闭包可以访问的另一个变量中，则是行得通的。

注意： this和arguments都是不能直接在内部函数中访问的。如果想访问包含作用域中的arguments对象，
则同样需要将其引用先保存到闭包能访问的另一个变量中。

10.14.2 内存泄漏

由于IE在IE9之前对JScript对象和COM对象使用了不同的垃圾回收机制，所以闭包在这些旧版本IE中可能会
导致问题。在这些版本的IE中，把HTML元素保存在某个闭包的作用域中，就相当于宣布该元素不能被销毁。

function assignHandler(){
  let element = document.getElementById('xxx');
  element.onclick = () => console.log(element.id)
}

//解决引用无法被垃圾回收
function assignHandler(){
  let element = document.getElementById('xxx');
  let id = element.id;
  element.onclick = () => console.log(element.id)

  element = null;
}

10.15 立即调用的函数表达式
//IIFE

(function(){

})();

由于被包含在括号中，所以会被解释为函数表达式。紧跟在第一组括号后面的第二组括号会立即调用前面的函数
表达式。

使用IIFE可以模拟块级作用域，即在一个函数表达式内部声明变量，然后立即调用这个函数。这样位于函数体
作用域的变量就像是在块级作用域中一样。

在ECMAScript6以后，IIFE就没有那么必要了，因为块级作用域中的变量无须IIFE就可以实现同样的隔离。

//内嵌块级作用域
{
  let i;
  for(i = 0; i < count; i++){
    console.log(i)
  }
}
console.log(i)    //Uncaught ReferenceError: count is not defined

//循环块级作用域
for(let i = 0; i < count; i++){
  console.log(i)
}
console.log(i)    //Uncaught ReferenceError: count is not defined

10.16 私有变量

function add(num1, num2){
  let sum = num1 + num2;
  return sum;
}

特权方法：能够访问函数私有变量（及私有函数）的公有方法。
在对象上有两种方式创建特权方法

1.在构造函数中实现

function MyObject(){
  let privateVariable = 10;

  function privateFunction(){
    return false;
  }

  this.publicMethod = function(){
    privateVariable++;
    return privateFunction();
  }
}


function Person(name){
  this.getName = function(){
    return name;
  }
  this.setName = function(value){
    name = value;
  }
}

10.16.1 静态私有变量

