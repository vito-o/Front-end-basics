第十章 函数

本章内容
·函数表达式、函数声明及箭头函数
·模式参数及扩展操作符
·使用函数实现递归
·使用闭包实现私有变量

函数实际上是对象。
每个函数都是Function类型的实例，而Function也有属性和方法，跟其他引用类型一样。
因为函数是对象，所以函数名就是指向函数对象的指针，而且不一定与函数本身紧密绑定。

函数通常以
函数声明的方式定义：
function sum(num1, num2){
  return num1 + num2;
}

函数表达式
let sum = function(num1, num2){
  return num1 + num2;
}

函数表达式与函数声明几乎是等价的。

还有一种定义函数的方式与函数表达式很像，叫做“箭头函数”(arrow function)

let sum = (num1, num2) => {
  return num1 + num2
}

最后一种定义函数的方式是使用Function构造函数。这个构造函数接收 任意多个字符串参数，最后一个参数
始终会被当成函数体，而之前的参数都是新函数的参数。
let sum = new Function('num1', 'num2', 'return num1 + num2'); //不推荐

不推荐原因：
这段代码会被解释两次
第一次：是将它作为常规ECMAScript代码，
第二次：是解释传给构造函数的字符串。
很影响性能。

不过，把函数想象为对象，把函数名想象为指针式很重要的。

注意：这几种实例化函数对象的方式之间存在微妙但重要的差别。
      无论如何，通过其中任何一种方式都可以创建函数。

10.1 箭头函数

ECMAScript6新增。很大程度上，箭头函数实例化的函数对象与正式的函数表达式创建的函数对象行为式相同的。
任何可以使用函数表达式的地方，都可以使用箭头函数。

let arrowSum = (a, b) => {
  return a + b;
}

let functionExpressionSum = function(a, b){
  return a + b;
}

箭头函数简洁的语法非常适合嵌入函数的场景
let ints = [1, 2, 3]
ints.map((i) => {return i + 1})

如果只有一个参数，那也可以不用括号。只有没有参数，或者多个参数情况下，才需要使用括号

//等价
let double = x => { return 3 * x }
let double = (x) => { return 3 * x }

//没有参数要括号
let getRandom = () => { return Math.random() }

//多个参数需要括号
let sum = (a, b) => { return a + b }

箭头函数也可以不用大括号，但这样会改变函数的行为。使用大括号就说明包含“函数体”，可以在一个函数中
包含多条语句，跟常规的函数一样。如果不使用大括号，那么箭头后面就只能有一行代码，比如一个赋值操作，
或者一个表达式。而且，省略大括号会隐式返回这行代码的值。

let double = (x) => {return x * 3}
let triple  = (x) => 3 * x

箭头函数虽然语法简洁，但也有很多场合不适用。箭头函数不能使用arguments、super和new.target，也不能
用作构造函数。此外，箭头函数也没有prototype属性。

10.2 函数名
