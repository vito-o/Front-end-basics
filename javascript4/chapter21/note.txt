第21章 错误处理与调试

本章内容
·理解浏览器错误报告
·处理错误
·调试js代码

21.1 浏览器错误报告

21.1.1 桌面控制台

控制台

21.1.2 移动控制台

21.2.1 try/catch语句

ECMA-262第3版新增了try/catch语句，作为在js中处理异常的一种方式。

try {
  //可能出错的代码
} catch (error) {
  //出错时要做什么
  console.log(error.message)
}

1.finally子句

不论try还是catch运行完都会运行finally, 即使语句里面包括return

注意： 只要代码中包含了finally子句，try块中的return语句就会被忽略，理解这一点很重要。在使用
finally时一定要仔细确认代码的行为。

2.错误类型
代码执行过程中会发生各种类型的错误。每种类型都会对应一个错误发生时抛出的错误对象。

ECMA-262定义了以下8中错误类型：
·Error
`InternalError
`EvalError
`RangeError
`ReferenceError
`SyntaxError
`TypeError
`URIError

Error时基类型，其他错误类型继承该类型。因此，所有错误类型都共享相同的属性（所有错误对象上的方法
都是这个默认类型定义的方法）。浏览器很少会抛出Error类型的错误，该类型主要用于开发者抛出自定义错误。

try {
  someFunction()
} catch (error) {
  if(error instanceof TypeError){
    //处理类型错误
  } else if (error instanceof ReferenceError) {
    //处理引用错误
  } else {
    //处理所有其他类型的错误
  }
}

3.当try/catch中发生了错误时，浏览器会认为错误被处理了，因此就不会在使用本章前面提到的机制报告错误。
如果应用程序的用户不懂技术，那么他们即使看到错误也看不懂，这是一个理想的错误。
使用try/catch可以针对特定错误类型实现自定义的错误处理。

21.2.2 抛出错误

与try/catch语句对应的一个机制是throw操作符，用于在任何适合跑错自定义错误，throw操作符必须有一个值，
但值得类型不限。

throw 12321;
throw 'Hello world'
throw true
throw { name: 'javascript' }

使用throw操作符时，代码立即停止执行，除非try/catch语句捕获了抛出得值。

21.2.3 error事件