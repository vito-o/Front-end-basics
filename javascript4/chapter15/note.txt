第15章 DOM扩展

·理解Selectors API
·使用HTML5 DOM扩展

15.1 Selectors API

Selectors API 是W3C推荐标准，规定了浏览器原生支持的CSS查询API。

Selectors API Level 1的核心是两个方法：querySelector()和querySelectorAll()。

Selectors API Level 2规范在Element类型上新增了更多方法，比如matches()、find()和findAll()

目前还没有浏览器实现或宣称实现find()和findAll()

15.1.1 querySelecctor()

querySelector()方法接收css选择符参数，返回匹配该模式的第一个后代元素，如果没有匹配项则返回Null.

let body = document.querySelector('body')

let myDiv = document.querySelector('#myDiv')

let selected = document.querySelector('.selected')

let img = document.boy.querySelector('img.button')

在Document上使用querySelector()方法时，会从文档元素开始搜索；
在Element上使用querySelector()方法时，则只会从当前元素的后代中查询。

15.1.2 querySelectorAll()

返回所有匹配的节点，而不是一个。
querySelectorAll()返回的NodeList实例一个属性和方法都不缺，但它是一个静态的“快照”，而非“实时”的查询。
这样的底层实现避免了使用NodeList对象可能造成的性能问题。

与querySelector()一样，querySelectorAll()也可以在Document、DocumentFragment和Element类型上
使用。

15.1.3 matches()

matches()方法接收一个css选择符参数，如果元素匹配则该选择符返回true，否则返回false。
if(document.body.matches('body.page1')){
  //true
}

15.2 元素遍历

15.3 HTML5

HTML5代表着与以前的HTML截然不同的方向。在所有以前的HTML规范中，从未出现过描述js接口的情形，HTML就是
一个纯标记语言。js绑定的事，一概交给DOM规范去定义。

然而，html5给范却包含了与标记相关的大量js API。其中由的API与DOM重合，定义了浏览器应该提供的DOM扩展


15.3.1 css类扩展

1.getElementsByClassName()  

接收一个参数，即包含一个或多个类名的字符串，返回类名中包含相应类的
元素的NodeList。如果提供了多个类名，则顺序无关紧要

//取得所有类名中包含username和current元素
//两个类名的顺序无关紧要
let xxx = document.getElementsByClassName('username current')


2.classList

要操作类名，可以通过className属性实现添加、删除和替换

html5通过给所有元素增加classList属性为这些操作提供了更简单也更安全的实现方法。

add()
contains()  给定的值是否存在
remove()
toggle()    如果存在就删除，如果不存在就添加

div.classList.remove('user')

15.3.2 焦点管理

document.activeElement

15.3.3 HTMLDocument扩展

1.readyState属性

document.readyState 属性有两个可能的值：
·loading，标识文档正在加载
·complete，标识文档加载完成

2.compatMode属性    浏览器渲染模式

if(document.compatMode == 'CSS1Compat'){
  console.log('standards mode')
}else{
  console.log('Quirks mode')
}

3.head属性

let head = document.head;

15.3.4 字符集属性

document.characterSet

//标识文档使用的字符集，也可以用来指定新字符集

15.3.5 自定义数据属性

html5匀速给元素指定非标准的属性，但要使用前缀data-以便告诉浏览器，这些属性即不包含与渲染有关的信息
也不包含元素的语言信息。处理前缀，自定义属性对命名时没有限制的。

15.3.6 插入标记

1.innerHTML属性

注意：设置innerHTML会导致浏览器将HTML字符串解析为相应的DOM树。这意味着设置innerHTML属性后马上
再读出来会得到不同的字符串。这是因为返回的字符串是将原始字符串对应的DOM子树序列化之后的结果

2.旧IE中的innerHTML

在所有现代浏览器中，通过innerHTML插入的<script>标签是不会执行的。而在IE8及之前的版本中，只要这样
插入的<script>元素指定了defer属性，且<script>之前是“受控元素”(scoped element)，那就是可以执行的。
<script>元素与<style>或注释一样，都是“非受控元素”(NoScope element)， 也就是在页面上看不到他们。
IE会把innerHTML中从非受控元素开始的内容都删掉，也就是说下面的例子是行不通的：
div.innerHTML = "<script defer>console.log('hi')</script>"

3.outerHTML属性

读取outerHTML属性时，会返回调用它的元素（及所有后代元素）的HTML字符串。在写入outerHTML属性时，
调用它的元素会被传入的HTML字符串经解释之后生成的DOM子树取代。

console.log(div.outerHTML = '<p>This is a paragraph.</p>')

4.insertAdjacentHTML()与insertAdjacentText()

关于插入标签的最后两个新增方法是insertAdjacentHTML()和insertAdjacentText()。这两个方法最早来源于
IE，他们都接收两个参数：要插入标记的位置和要插入的HTML或文本。

第一个参数
  'beforebegin'     插入当前元素前面，作为前一个同胞节点
  'afterbegin'      插入当前元素内部，作为新的子节点或放在第一个子节点前面
  'beforeend'       插入当前元素内部，作为新的子节点或放在最后一个子节点后面
  'afterend'        插入当前元素后面，作为下一个同胞节点。

第二个参数会作为HTML字符串解析


//作为前一个同胞节点插入
element.insertAdjacentHTML('beforebegin', '<p>hellow world!</p>')
element.insertAdjacentText('beforebegin', 'hello world')

//作为第一个子节点插入
element.insertAdjacentHTML('afterbegin', '<p>hellow world!</p>')
element.insertAdjacentText('afterbegin', 'hello world')

//作为最后一个子节点插入
element.insertAdjacentHTML('beforeend', '<p>hellow world!</p>')
element.insertAdjacentText('beforeend', 'hello world')

//作为下一个同胞节点插入
element.insertAdjacentHTML('afterend', '<p>hellow world!</p>')
element.insertAdjacentText('afterend', 'hello world')

5.内存与性能问题

使用本节介绍的方法替换子节点可能在浏览器（特别是IE）中导致内存问题。比如，如果被移除的子树元素中
之前有关联的事件处理程序或其他js对象（作为元素的属性），那他们之间的绑定关系会滞留在内存中。如果
这种替换操作频繁发送，页面的内存占用就会持续攀升。在使用InnerHTML,outerHTML和insertAdjacentHTML
之前，最好手动删除要被替换元素上关联的事件处理程序和js对象。

6.跨站点脚本

尽管innerHTML不会执行创建的<script>标签，但仍然向恶意用户暴露了很大的攻击面，因为通过它可以毫不
费力地创建元素并执行onclick之类的属性。

如果页面中要使用用户提供的信息，则不建议使用innerHTML。与使用InnerHTML获取的方便相比，防止XSS攻击
更让人头疼。此时一定要隔离要插入的数据，在插入页面前面必须毫不犹豫地使用相关的库对他们进行转义。

15.3.7 scrollIntoView()

scrollIntoView()方法存在于所有HTML元素上，可以滚动浏览器唱K或容器元素以便包含元素进入视口。

方法参数如下：

alignToTop 是个布尔值
  true  窗口滚动后元素的顶部于视口顶部对齐
  false 窗口滚动后元素的底部于视口底部对齐

scrollIntoViewOptions 是一个选项对象。
  behavior  定义过渡动画，可取的值为'smooth', 'auto'
  block     定义垂直对齐方式，可取得值为'start', 'center', 'end', 'nearest'
  inline    定义水平对象，可取得值为start, center, end, nearest

不传参数等于alignToTop为true

dom.scrollIntoView({
  behavior: 'smooth',
  block: 'center' 
});

15.4 专有扩展

不同浏览器为弥补功能确实而为DOM添加专有扩展

15.4.1 children 属性

dom.children 
children属性是一个HTMLCollection，只包含元素的Element类型的子元素，即不包含空白节点

15.4.2 contains()方法

Dom编程中经常需要确定一个元素是不是另一个元素的后代，iE首先引入了contains()方法。

compareDocumentPosition也可以判断，

15.4.3 插入标记

没有加入标准
innerText和outerText

15.4.4 滚动