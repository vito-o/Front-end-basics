基础语法

大小写区分

标识符
第一个字符必须是字母、下划线或美元符号
剩下的其他字符可以是字母、下划线、美元符号或数字
标识符的字母可以实扩展的ASCII中的字母，也可以是Unicode的字母字符
驼峰大小写形式，第一个单词首字母小写，后面每个单词首字母大写

"use strict"

//也可以单独指定一个函数在严格模式下执行
function doSomething(){
  "use strict"
}


//语句

js语句以分号结尾（推荐）。省略分号意味着由解释器确定语句在哪里结尾

变量

ECMAScript变量是松散类型的，意思是变量可以用于保存任何类型的数据
有三个关键字可以声明变量：var、const和let

var 关键字

var message; 
可以保存任何类型，不初始化变量保存一个特殊的undefined

var 声明作用域
使用 var操作符定义的变量会成为包含它的函数的局部变量
function test(){
  var message = 'hi'
}
test()
console.log(message) //出错

var 声明提升

//不会报错，因为使用这个关键字声明的变量会自动提升到函数作用域顶部
function foo(){
  console.log(age)    //undefined
  var age = 26;
}
foo();

let 声明
与var区别，let声明的范围是块作用域，而var声明的范围是函数作用域

if(true){
  var name = 'matt'
  console.log(name) //matt
}
console.log(name)   //matt

if(true){
  let age = 25;
  console.log(age)  //26
}
console.log(age)    //ReferenceError

//暂时性死区
let 与 var 的另一个重要的区别，就是let声明的变量不会再作用域中被提升

全局声明

与var关键字不同，使用let再全局作用域中声明的变量不会成为window对象的属性
let age = 25;
console.log(window.age) //undefined

不过let声明仍然实在全局作用域中发送的，相应变量会在页面的声明周期内续存

const

const的行为与let基本相同，唯一区别就是声明的同时初始化

1.不能赋值
2.不能重复声明
3.声明的作用域也是块

注：const声明的限制只适用与它指向的变量的引用，如果const变量引用的是一个对象，那么修改这个
对象内部的属性并不违反const的限制
const name = {}
name.aa = '123'


数据类型

ECMAScript 有6中简单数据类型（也称为原始类型）:
undefined、null、boolean、number、string和symbol

还有一种复杂数据类型：Object

typeof

"undefined" 未定义
"boolean"   布尔值
"string"    字符串
"number"    数值
"object"    对象（而不是函数）或null
"function"  函数
"symbol"    符号

number

IEEE754

let n = 55 十进制
let n = 07 八进制       以0开头
let n = 0xlf  十六进制  以0x开头

浮点值使用的空间是整数的两倍， 所以ECMAScript总是想方设法的把值转换为整数

对于非常大或者非常肖的数值，浮点值使用科学计数法来标识

浮点值得精确度最高可达17位小数，但在算数运算中远不如整数精确。
如0.1 + 0.2 != 0.3

ECMAScript并不支持标识这个世界上得所有数值

parseInt(val, type) 第二参数表示进制
parseFloat() 只解析十进制值


string

ECMAScript 中得字符串是不可变得，意思是一旦创建，他们得值就不能变了。要修改某个变量中得字符串，
必须先销毁原始字符串，然后将包含新值得另一个字符串保存到该变量

toString
默认情况下，toString()返回数值的十进制字符串表示。而通过传入参数，可以得到数值的二进制、八进制
十六进制或者其他任何有效技术的字符串表示

let num = 10;
num.toString()
num.toString(2)
num.toString(8)
num.toString(10)
num.toString(16)

//模板字面量标签函数

模板字面量也支持定义标签函数，而通过标签函数可以自定义插值行为。标签函数会接收
被插值记号分割后的模板和对每个表达式求值的结果

标签函数本身是一个常规函数，通过前缀到模板字面量来应用自定义行为，如下例所示：
标签函数接收到的参数依次是原始字符串数组和对每个表达式求值的结果。

let a = 6;
let b = 9;

let untaggedResult = `${a} + ${b} = ${ a + b}`
//index.html:16 6 + 9 = 15

console.log(untaggedResult)

function simpleTag(strings, aValExpression, bValExpression, sumExpression){
  console.log(strings)
  console.log(aValExpression)
  console.log(bValExpression)
  console.log(sumExpression)
}

let taggedResult = simpleTag`${a} + ${b} = ${a + b}`;

//(4) ["", " + ", " = ", "", raw: Array(4)]
//6
//9
//15

因为表达式参数的数量是可变的，所以通常应该使用剩余操作符（rest operator）
将他们收集到一个数组中：

let a = 6;
let b = 9;

function simpleTag(strings, ...expressions){
  console.log(strings)
  for(const expression of expressions){
    console.log(expression)
  }
}
let taggedResult = simpleTag`${a} + ${b} = ${a + b}`

//(4) ["", " + ", " = ", "", raw: Array(4)]
//6
//9
//15

对于有n个插值的模板字面量，传给标签函数的表达式参数的个数始终是n，而传给标签函数的第一个参数
所包含的字符串参个数始终是n+1。

let a = 6;
let b = 9;

function zipTag(strings, ...expressions){
  return strings[0] + expressions.map((e, i) => `${e}${strings[i + 1]}`).join('')
}

let untaggedResult = `${a} + ${b} = ${a + b}`
let taggedResult = zipTag`${a} + ${b} = ${a + b}`;

console.log(untaggedResult)
console.log(taggedResult)

//6 + 9 = 15
//6 + 9 = 15

function printRaw(strings){
  console.log('Actual characters:')
  for(const string of strings){
    console.log(string)
  }

  console.log('Escaped characters:')
  for(const rawString of strings.raw){
    console.log(rawString)
  }
}

printRaw`\u00A9${'and'}\n`;

//Actual characters:
//©
//
//Escaped characters:
//\u00A9
//\n

symbol类型

let sym = Symbol();
console.log(typeof sym) //symbol

调用Symbol()函数时，也可以传入一个字符串参数作为对符号的描述（description），将来可以通过这个字符串
来调试代码。但是，这个字符串参数与符号定义或标识无关：

let genericSymbol = Symbol();
let otherGenericSymbol = Symbol();

let fooSymbol = Symbol('foo')
let otherFooSymbol = Symbol('foo')

console.log(genericSymbol == otherGenericSymbol)
console.log(fooSymbol == otherFooSymbol)

符号没有字面量语法，这也是他们发挥作用的关键。按照规范，你找要创建Symbol()实例并将其作用对象的新特性
就可以保证它不会覆盖已有的对象属性，无论是符号属性还是字符串属性。

使用全局符号注册表

如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号
let fooGlobalSymbol = Symbol.for('foo')
console.log(typeof fooGlobalSymbol)

Symbol.for()对每个字符串键都指向幂等操作。第一次使用某个字符串调用时，他会检查全局运行时注册表
发现不存在对应的符号，于是就会生成一个新符号实例并添加到注册表中。后续使用相同字符串的调用同样会
检测注册表，发现存在与该字符串对应的符号，然后就会返回该符号实例。
let fooGlobalSymbol = Symbol.for('foo')
let otherFooGlobalSymbol = Symbol.for('foo')
console.log(fooGlobalSymbol === otherFooGlobalSymbol) //true

即使采用相同的符号描述，在全局注册表中定义的符号根使用Symbol()定义的符号也并不等同：
let localSymbol = Symbol('foo')
let globalSymbol = Symbol.for('foo')

console.log(localSymbol === globalSymbol) //false

全局注册标中的符号必须使用字符串键来创建，因此作为参数给Symbol.for()的任何值都会被转换位字符串，
此外，注册表中使用的键同时也会被用作符号描述。
let emptyGlobalSymbol = Symbol.for()
console.log(emptyGlobalSymbol);//Symbol(undefined)

还可以使用Symbol.keyFor()来查询全局注册表。这个方法接收符号，返回该全局符号对应的字符串。
如果查询的不是全局符号，则返回Undefined

let s = Symbol.for('foo')
console.log(Symbol.keyFor(s));


let s1 = Symbol('foo')
let s2 = Symbol('foo')

let o = {
  [s1]: 'foo val',
  [s2]: 'bar val',
  baz: 'baz val',
  qux: 'qux val',
}

console.log(Object.getOwnPropertySymbols(o))
console.log(Object.getOwnPropertyNames(o))
console.log(Object.getOwnPropertyDescriptors(o))
console.log(Reflect.ownKeys(o))

因为符号属性是对内存中符号的一个引用，所以直接创建并用作属性的符号不会丢失，但是，如果没有显式
地保存对这些属性的引用，那么必须遍历对象的所有符号属性才能找到对应的属性键

let o = {
  [Symbol('foo')]: 'foo val',
  [Symbol('bar')]: 'bar val'
}

console.log(o)
//{Symbol(foo): "foo val", Symbol(bar): "bar val"}

let barSymbol = Object.getOwnPropertySymbols(o)
                        .find((symbol) => symbol.toString().match(/bar/))
//Symbol(bar)

所有内置符号属性都是不可写、不可枚举、不可配置的

Symbol.asyncIterator

根据ECMAScript规范，这个符号作为一个属性表示 “一个方法，该方法返回对象默认的AsyncIterator”。
由于for-await-of语句使用” 换句话说，这个符号表示实现异步迭代器API的函数。
for-await-of循环会利用这个函数指向异步迭代操作。循环时，他们会调用以Symbol.asyncIterator为键的函数
并期望这个函数会返回一个实现迭代器AIP的对象。很多时候，返回的对象时实现该API的AsyncGenerator

class Foo{
  async *[Symbol.asyncIterator](){}
}

let f = new Foo();
console.log(f)
console.log(f[Symbol.asyncIterator]())
//Foo {}
//AsyncGenerator {<suspended>}

class Emitter{
  constructor(max){
    this.max = 10;
    this.asyncIdx = 0;
  }

  async *[Symbol.asyncIterator](){
    while(this.asyncIdx < this.max){
      yield new Promise(resolve => resolve(this.asyncIdx++))
    }
  }
}

async function asyncCount(){
  let emitter = new Emitter(5);
  console.log(emitter)
  for await(const x of emitter){
    console.log(x);
  }
}

asyncCount();

// 0
// 1
// 2
// 3
// 4
//Promise {<fulfilled>: undefined}

6.Symbol.hasInstance
表示:一个方法，该方法决定一个构造器对象是否认可一个对象是它的实例。由instanceof操作符使用。
instanceof操作符可以用来确定一个对象实例的原型链上是否有原型。

function Foo(){}
let f = new Foo();

console.log(f instanceof Foo); 
//true

class Bar {}
let b = new Bar();
console.log(b instanceof Bar)
// true

在ES6中，instanceof操作符会使用Synbol.hasInstance函数来确定关系。以Symbol.hasInstance为键的
函数会指向同样的操作，只是操作数对调了一下

function Foo(){}
let f = new Foo();

console.log(Foo[Symbol.hasInstance](f)) 
//true

class Bar{}
let b = new Bar();
console.log(Bar[Symbol.hasInstance](b))
//true

//这个属性定义在Function的原型上，因此默认在所有函数和类上都可以调用。由于instanceof操作符会
在原型链上寻找这个属性定义，就跟在原型链上寻找其他属性一样，因此可以在继承的类上通过静态方法重新
定义这个函数：
class Bar{}
class Baz extends Bar{
  static [Symbol.hasInstance](){
    return false;
  }
}
let b = new Baz();
console.log(
  Bar[Symbol.hasInstance](b)
);
//true
console.log(
  Baz[Symbol.hasInstance](b)
)
//false

7.Symbol.isConcatSpreadable
表示：一个布尔值，如果是true，则意味着对象应该用Array.prototype.concat()打平其数组元素。
ES6中的Array.prototype.concat()方法会根据接收到的对象类型选择如何将一个类数组对象拼接成数组实例。
覆盖Symbol.isConcatSpreadable的值可以修改这个行为。

数组对象默认情况下会被打平到已有的数组，false或假值会导致整个对象被追加到数组末尾。
类数组对象默认情况下会被追加到数组末尾，true或真值会导致这个类数组对象被打平到数组实例。
其他不是类数组对象的对象在Symbol.isConcatSpreadable被设置为true的情况下将被忽略。

let initial = ['foo']
let array = ['bar']

console.log(array[Symbol.isConcatSpreadable])
//undefined
console.log(initial.concat(array))
//["foo", "bar"]

array[Symbol.isConcatSpreadable] = false;
console.log(initial.concat(array))
//(2) ["foo", Array(1)]
//0: "foo"
//1: ["bar", Symbol(Symbol.isConcatSpreadable): false]
//length: 2

let arrayLikeObject = { length: 1, 0: 'baz'}
console.log(arrayLikeObject[Symbol.isConcatSpreadable])
//undefined
console.log(initial.concat(arrayLikeObject))
//(2) ["foo", {…}]
//0: "foo"
//1: {0: "baz", length: 1}
//length: 2

arrayLikeObject[Symbol.isConcatSpreadable] = true;
console.log(initial.concat(arrayLikeObject));
//(2) ["foo", "baz"]

let otherObject = new Set().add('qux');
console.log(otherObject[Symbol.isConcatSpreadable])
//undefined

console.log(initial.concat(otherObject))
//(2) ["foo", Set(1)]
//0: "foo"
//1: Set(1) {"qux"}
//length: 2

otherObject[Symbol.isConcatSpreadable] = true;
console.log(initial.concat(otherObject))
//["foo"]

8.Symbol.iterator