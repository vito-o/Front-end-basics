1.http

1.get和post的请求的区别

·应用场景：
  （get请求是一个幂等的请求）一般get请求用于对服务请求资源不会产生影响的场景，
    如请求网页资源
  （post不是一个幂等的请求）对服务器资源产生影响，如注册
  幂等是指一个请求方法执行多次和仅执行一次的效果完全相同
·是否缓存：浏览器一般对get请求缓存，对post请求很少缓存
·传参方式不同：get通过查询字符串传参，post通过请求体传参
·安全性：
  get请求可以将请求的参数放入url中想服务器发请求，这样的做法相对于post请求来说
  是不太安全，因为请求的url会被保留再历史记录中。
·请求长度：浏览器对于url长度的限制，所以会影响get请求发送数据时的长度。这个限制
  时浏览器规定的，并不是RFC规定的。
·参数类型：get参数只允许ASCII字符，post的参数支持更多的数据类型（如文件，图片）

2.post和put请求的区别

put请求时向服务器段发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是
说无论进行多少次PUT操作，其结果并没有不同（理解为更新数据）

post请求时向服务器端2发送数据，该请求会改变数据的种类等资源，它会创建新的内容
（可以理解为创建数据）

为什么post请求会发送两次请求？
1.第一次请求为options预检请求，状态码为204
  ·作用：
    1.查询服务器是否支持修改的请求头，如果服务器支持，则再第二次中发送真正的请求
    2.检测服务器是否为同源请求，是否支持跨域
2.第二次为真正的post请求

3.常见的HTTP请求头和响应头

HTTP Request Header

·accept：浏览器能够处理的内容类型
    accept: text/css,*/*;q=0.1
·accept-charset：浏览器能够显示的字符集
·accept-encoding：浏览器能够处理的压缩编码
    accept-encoding: gzip, deflate, br
·accept-language：浏览器当前设置的语言
    accept-language: zh-CN,zh;q=0.9,en;q=0.8
·connection：浏览器与服务器之间连接的类型
    Connection: keep-alive
·cookie：当前页面设置的任何cookie
·host：发出请求的页面所在的域
·referer：发出请求的页面的url
    referer: https://juejin.cn/
·user-agent：浏览器的用户代理字符串
    user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36

HTTP Responses Header

·date:表示消息发送的时间，时间的描述格式由rfc822定义
    date: Sun, 09 Oct 2022 15:10:24 GMT
·server：服务器名称
    server: nginx
    server: JSP3/2.0.14
·connection：浏览器与服务器之间连接的类型
    Connection: keep-alive
·cache-control：控制http缓存
    cache-control: no-store, no-cache, must-revalidate
    cache-control: max-age=2592000
·content-type：表示后面的文档属于什么MIME类型
    content-type: application/json; charset=utf-8
    content-type: application/x-javascript


Content-Type

常见的content-type属性值有以下四种：
1.application/x-www-form-urlencoded：浏览器的原生form
表单，如果不设置enctype属性，那么最终就会以application/
x-www-form-urlencoded方式提交数据。该种方式提交的数据放在
body里面，数据按照key1=val1&key2=val2的方式进行编码，
key和val都进行URL转码

2.multipart/form-data：该种方式也是创建的post提交方式
通常表单上传文件时使用该种方式

3.application/json：服务器消息主题时序列化后的json字符串

4.text/xml：该种方式主要用来提交XML格式的数据

4.HTTP状态码304是多好还是少好

为什么会有304

服务器为了提高网站访问速度，对之前访问的部分页面指定缓存机制，当客户端再次对
这些页面进行请求，服务器会根据缓存内容判断页面与之前是否相同，若相同便直接返回
304，此时客户端调用缓存内容，不必进行二次下载

状态码304不应该认为是一种错误，而是对客户端有缓存情况下服务端的一种响应

产生较多304状态码的原因：
·页面更新周期长或者不更新
·纯静态页面或强制生成静态html

304状态码出现过多会造成一下问题：
·网站快照停止
·收录减少
·权重下降

5.常见的http请求方法

·get：向服务器获取数据
·post：发送数据给服务器，通常会造成服务器资源的新增修改
·put：用户全量修改目标资源（看接口，也可以用于添加）
·patch：用于对资源进行部分修改
·delete：用于删除指定的资源
·head：获取报文首部，与get相比，不返回报文主体部分；使用场景是比如下载一个大文件
       前，先获取其大小再决定是否要下载，依次可以节约带宽资源
·options：（浏览器自动执行）、询问支持的请求方法，用来跨域请求、预检请求、判断目标是否安全
·connect：请求在与代理服务器通信时建立管道，使用管道进行TCP通信；（把服务器作为
跳板，让服务器代替用户去访问其他网页，之后把数据原原本本的返回给用户）
·trace：该方法会让服务器原样返回任意客户端请求的信息内容，主要用于测试或诊断。


说说ajax的组成部分

ajax：全称Asynchronous javascript and XML(异步的js与xml)

用js 发送异步的网络请求

ajax中的x： XML与XMLHttpRequest
           xml:解决跨平台数据传输
           在json没有出来以前，网络传输主要以xml格式数据为主。后来json问世，
           逐渐取代xml。但是由于jaax技术出来比json早，因此xml这个称呼一直保留至今

7.请介绍一下XMLHTTPRequest对象

Ajax的核心是XMLHTTPRequest。它是一种支持异步请求的技术。XMLHTTPRequest使您
可以使用js向服务器提出请求并处理响应，而不用阻塞用户。可以再页面加载以后进行
页面的局部更新。

使用方法

1.实例化ajax对象
2.open()：传教http请求，
    第一个参数是指定请求方式（get、post）
    第二个参数是指定要提交的地址是哪里，
    第三个参数是指定 请求时同步还是异步（true表示异步，false表示同步）
    第四和第五参数再http认证时候会用到。是可选的。
3.设置请求头
    setRequestHeader(stringheader,stringvalue)
4.发送请求
    send(content)：发送请求给服务器，如果是get方式，并不需要填写参数，或者填写null
    如果是post方式，要把提交的参数写上去
5.注册回调函数

1.实例化ajax对象
let xhr = new XMLHttpRequest();
2.设置请求方法和地址
xhr.open("post", 'http://www.liulongbin.top:3009/api/login')
3.设置请求头，
xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded")
4.发送请求：参数格式'key=value'
xhr.send("username=admin&password=123456)
5.注册回调函数
xhr.onreadystatechange = function() {
    //onreadystatechange会触发多次，一般需要判断xhr.reaadState == 4才获取响应数据
    if(xhr.readyState == 4) {
        console.log(xhr.responseText)
    }    
}

1.onload事件：接收服务器响应的数据（依次请求，只会执行一次）
2.onreadystatechange事件：作用与onload事件一致（一次请求，会执行多次）

XMLHttpRequest对象状态码 xhr.readyState
0：请求未建立（创建了xhr对象，但是还没有调用open）
1：服务器连接建立
2：请求已接收（send之后，服务器已经接收了请求）
3：请求处理中
4：请求已完成，且响应已就绪（44状态码等同于onload事件）



8.OPTIONS请求方法及使用场景

options是除了get和post之外的其中一种HTTP请求方法（浏览器
自动执行）

options方法是用于请求获得由Request-URI标识得资源在请求/
响应的通信过程中可以使用的功能选项。通过这个方法，客户端
可以在采取具体资源请求之前，决定对该资源采取何种必要措施
或者了解服务器得性能。该请求方法得响应不能缓存。

options请求方法的主要用途有两个：
·获得服务器支持的所有http请求方法
·用来检查访问权限。例如：在进行CORS跨域资源共享时，对于复杂
请求，就是使用options方法发送嗅探请求，以判断是否有对指定
资源的访问权限。

9.http1.0和http1.1之间有哪些区别

·连接方面，http1.0默认使用非持久连接，而http1.1默认使用
持久连接。http1.1通过使用持久连接来使多个http请求复用
同一个TCP连接，一次来避免使用非持久连接时每次需要建立连接
的时延。

·资源请求方面，在http1.0中，存在一些浪费带宽的现象，例如
客户端只是需要某个对象的一部分，而服务器却将整个对象送了
过来，并且不支持断点续传功能，http1.1则在请求头引入了range
头域，它允许之请求资源的某个部分，及返回码时206（Partial
content），这样就方便了开发者自由的选择以便于充分利用带宽
和连接。

·缓存方面，在http1.0中主要使用header里的If-Modified-Since、
Expires作为缓存判断的标准，http1.1则引入了更多的缓存控制
策略，例如Etag、If-Unmodified-Since、If-Match、If-None-match
等更多可供选择的换成头来控制缓存策略。

·http1.1中新增了host字段，用来指定服务器的域名。http1.0
中认为每台服务器都绑定一个唯一的ip，因此，请求消息中的url
并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在
一台服务器上可以存在多个虚拟主机，并且他们共享一个ip地址。
因此有了host字段，这样就可以将请求发往到同一台服务器上的不同
网站。

·http1.1相对于http1.0还新增了很多请求方法，例如PUT、HTED、
options等


10.HTTP1.1和HTTP2.0的区别

·二进制协议：http/2是一个二进制协议。在http/1.1版中，报文的
头部信息必须是文本（ASCII编码）,数据体可以是文本，也可以
是二进制。http/2则是一个彻底的二进制协议，头部信息和数据
体都是二进制，并且统称为“帧”，可以分为头信息帧和数据帧。
帧的概念是它实现多路复用的基础。

·多路复用：HTTP/2实现了多路复用，http/2仍然复用TCP连接，
但是在一个连接里，客户端和服务器都可以同时发送多个请求或
响应，而且不用按照顺序一一发送，这样就避免了“队头阻塞”
的问题

·数据流：http/2使用了数据流的概念，因为http/2的数据包
是不按顺序发送的，同一个连接里面连接的数据包，可能属于
不同的请求。因此，必须要对数据包做标记，指出它属于哪个
请求。http/2将每个请求或响应的所有数据包，称为一个数据流
每个数据流都有一个独一无二的编号。数据包发送时，都必须
标记数据流ID，用来区分它属于哪个数据流。

·头信息压缩：http/2实现了头信息压缩，由于http/1.1协议不带
状态，每次请求都必须附上所有信息。所以，请求的很多字段都
时重复的，比如cookie和user agent，一模一样的内容，每次
请求都必须附带，这回浪费很多带宽，也影响速度。http/2对这一
点做了优化，引入了头信息压缩机制。一方面，头信息使用gzip
或compress压缩后再发送；另一方面，客户端和服务器同时维护
一张头信息表，所有字段都会存入这个表，生成一个索引号，以后
就不发送同样字段了，只发送索引号，这样就能提高速度了。

·服务器推送：http/2允许服务器未经请求，主动向客户端发送
资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要
的资源，这样就可以相对减少一些延迟时间。这里需要注意的是
http2下服务器主动推送的是静态资源，和websocket以及使用sse
等方式向客户端发送即时诗句的推送是不同的。


11.什么是队头阻塞

队头阻塞是由http基本的“请求 - 应答”模式所导致的。http规定
报文必须是“一发一收”，这就形成了一个先进先出的“串行”队列。
队列里的请求是没有优先级的，只有入队的先后顺序，排在最前面
的请求会被优先处理。如果队首的请求因为处理的太慢耽误了时间，
那么队列里后面的所有请求也不得不跟着一起等待，结果就是其他
的请求承担了不应由的时间成本，造成了队头阻塞的现象。

11.2队头堵塞的解决方案

1.并发连接：对于一个域名允许分配多个长连接，那么相当于增加了
任务队列，不至于一个队伍的任务阻塞其他所有任务

2.域名分片：将域名分出很多二级域名，他们都指向同样的一台
服务器，能够并发的长连接数变多了，解决了队头阻塞的问题。


12.http和https协议的区别

·https协议需要ca证书，费用比较高，而http协议不需要
·http协议是超文本传输协议，信息是明文传输的，https则是具有
安全性的ssl加密传输协议；
·使用不同的连接方式，端口也不同，http协议端口是80，https协议
的端口是443
·http协议连接很简单，是无状态的；https协议是由ssl和http协议
构建的可进行加密传输、身份认证的纹螺协议，比http更加安全


13.get方法url长度限制的原因

实际上http协议规范并没有对get方法请求的url长度进行限制，
这个限制是特定的浏览器及服务器对它的限制。ie对url长度的限制
是2083字节（2k + 35）.由于ie浏览器对url长度的允许值是最小
的，所以开发过程中，只要url不超过2083字节，那么再所有浏览器
中工作都不会有问题。

GET的长度值 = URL（2083） - （你的Domain+path）- 2 (2是get请求中?=两个字符串的长度)

主流浏览器对get方法中url的长度限制范围
·IE：对url的最大限制为2083个字符，如果超过这个数字，提交按钮
没有任何反应
·Firefox：对url的长度限制为65536个字符
·Safari：url最大长度限制为80000个字符
·Opera：url最大长度限制为19000个字符
·chrome：url最大长度限制为8182字符

主流服务器对get方法中url的长度限制范围

·Apache（Server）：能接受最大url长度为8192个字符。
·Microsoft Internet Information Server（IIS）：最大16384个字符

14.一个页面从输入url到页面加载显示完成，这个过程都发生了什么

1.解析url：首先会对url进行解析，分析所需要使用的传输协议和
请求的资源的路径。如果输入的rul中的协议或者主机名不合法，
将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览
器会检查url中是否出现了非法字符，如果存在非法字符，则对非法
字符进行转义后再进行下一个过程。

2.缓存判断：浏览器会判断所请求的资源是否再缓存里，如果请求
的资源再缓存里并且没有失效，那么就直接使用，否则向服务器发
起新的请求。

3.dns解析：下一步首先需要获取的是输入的url中的域名的ip地址
首先会判断本地是否有该域名的ip地址的缓存，如果有则使用，如果
没有则向本地dns服务器发起请求。本地dns服务器也会先检查是否
存在缓存，如果没有就会先向根域名发起请求，获得负责的顶级域名
服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威
域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名
ip地址后，本地DNS服务器再将这个ip地址返回给请求的用户。用户
向本地dns服务器发起请求属于递归请求，本地NDS服务器向各级域名
服务器发起请求后属于迭代请求。

4.获取mac地址（选说）：当浏览器得到ip地址后，数据传输还需要
知道目的主机MAC地址，因为应用层下发数据给传输层，TCP协议会指定
源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为
源地址，获取ip地址作为目的地址。然后将下发给数据链路层。数据
链路层的发送需要加入通信双方的MAC地址，本机的mac地址作为源
MAC地址，目的MAC地址需要分情况处理。通过将ip地址与本机的子网
掩码相与，可以判断是否与请求主机再同一个子网里，如果再同一个
子网里，可以使用ARP协议获取到目的主机的MAC地址，如果不在一个
子网里，那么请求应该转发给网关，由网关代为转发，此时同样可以
通过ARP协议来获取网关的MAC地址，此时目的主机的MAC地址应该为
网关的地址。

5.TCP三次握手：确认客户端与服务器的接受与发送能力，下面是
TCP建立的三次握手的过程，首先客户端向服务器发送一个SYN连接
请求报文段和一个随机序号，服务端接收到请求后向客户端发送一个
SYN ACK报文段，确认连接请求，并且也向客户端发送一个随机序列
号。客户端接收服务器的确认应答后，进入连接建立的状态，同时
向服务器也发送一个ACK确认报文段，服务器端接收到确认后，也进入
连接建立状态，此时双方的连接就建立启来了。

6.HTTPS握手（选说）：如果使用的是HTTPS协议，再通信前还存在
TLS的一个四次握手的过程。首先由客户端向服务器端发送使用的
协议的版本号、一个随机数和可以使用的加密方法。服务器端收到
后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。
客户端收到后，首先检查数字证书是否有效，如果有效，则再生成
一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器
端，并且还会提供一个前面所有内容的hash值供服务器端校验。
服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个
前面所有内容的hash值供客户端校验。这个时候双方都有了三个
随机数，按照之前所约定的加密方法，使用着三个随机数生成一把
密钥，以后双方通信前，就使用这个密钥对数据进行加密后再传输。

7.发送HTTP请求

服务器处理请求，返回http报文（响应）（文件）

8.页面渲染：浏览器首先会根据html文件建立DOM树，根据解析
到的css文件构建CSSOM树，如果遇到script标签，则判断是否
含有defer或者async属性，要不然script的加载和执行会造成
页面的渲染的阻塞。当DOM树和cssom树建立好后，根据他们来构建
渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后
最后使用浏览器的ui接口对页面进行绘制。这个 时候整个页面就
显示出来了。

9.tcp四次挥手：最后一步是tcp断开连接的四次挥手过程。若客户端
认为数据发送完成，则它需要向服务器端发送连接释放请求。
服务器端接收到连接释放请求后，会告诉应用层要释放TCP链接。
然后会发送ACK包，并进入CLOSE_WAIT状态，此时表明客户端到
服务端的链接已经释放，不再接收客户端发的数据了。但因为TCP
连接时双向的，所以服务端仍然可以发送连接释放请求，然后服务端
便进入LAST-ACK状态。客户端收到释放请求后，向服务端发送
确认应答，此时客户端进入TIME-WAIT状态。该状态会持续2MSL
（最大段生存期，指报文段再网络中生存的时间，超时会被抛弃）
时间，若该段时间内没有服务端的重发请求的话，就进入CLOSED
状态。当服务端收到确认应答后，也便进入CLOSED状态。


15.页面有多张图片，http是怎样的加载表现

在http1下，浏览器对一个域名下最大TCP连接数为6，所以会请求多次。可以用
多域名部署解决。这样可以提高同时请求的数目，加快页面图片的获取速度。

在http2下，可以一瞬间加载出来很多资源，因为，HTTP2支持多路复用，可以在
一个TCP连接中发送多个http请求。


16.HTTP2的头部压缩算法是怎样的

http2的头部压缩是HPACK算法。在客户端和服务器两端建立“字典”，用索引号表示
重复的字符串，采用哈夫曼编码来压缩整数和字符串，可以达到50%~90%的高压缩率。

具体来说：
·在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的
数据，不再通过每次请求和响应发送；
·首部表在http/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新
·每个新的首部键值对要么被追加到当前表的末尾，要么替换表中之前的值。

17.http请求报文是什么样的

请求报文由4部分组成：

·请求行
·请求头
·空行
·请求体

其中：
1.请求行（包括）：请求方法字段、url字段、http协议版本字段。他们用空格分隔。
例如：GET /index.html HTTP/1.1

2.请求头部：请求头部由关键字/值对组成，每行一对，关键字和值用英文冒号":"分隔

·User-Agent: 产生请求的浏览器类型
·Accept：客户端可识别的内容类型列表。
·Host：请求的主机名，允许多个域名同处一个IP地址，即虚拟地址。

3.请求体：post put等请求携带的数据


18.http响应报文是什么样的

响应报文有4部分组成：
·响应行：由网络协议版本，状态码和状态码的原因短语组成，例如:HTTP/1.1 200 OK
·请求头：响应部首组成
·空行
·响应体：服务器响应的数据


19.http协议的优点和缺点

http是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用
80端口。它使用TCP作为传输协议，保证了数据传输的可靠性。

http协议具有以下优点：

·支持客户端/服务器模式
·简单快速：客户向服务器请求时，只需传送请求方法和路径。由于http协议简单，使得
http服务器的程序规模小，因而通信速度快。
·无连接：无连接就是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到
客户的应答后，立即断开连接，采用这种方式可以节省传输时间。
·无状态：http协议时无状态协议，这里的状态是指通信过程的上下文信息。缺少状态意味
着如果后续处理需要前面的信息，则它必须重传，这样可能会导致连接传送的数据量增大。
另一方面，再服务器不需要先去信息时它的应答就比较快。
·灵活：http允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。

http协议具有以下缺点：

·无状态：http是一个无状态的协议，http服务器不会保存关于客户的任何信息
·明文传输：协议中的报文使用的时文本形式，这就直接暴露给外界，不安全。
·不安全
    1.通信使用明文（不加密），内容可能会被窃听
    2.不验证通信方的身份，因此有可能遭遇伪装
    3.无法证明报文的完整性，所以有可能已遭到篡改

20.说一下http3.0

http3.0，也称作http voer QUIC。http3.0的核心时QUIC（读音quick）协议，由Google
在2015年提出的SPDY v3演化而来的新协议，传统http协议时基于传输层tcp的协议，而
QUIC是基于传输层UDP上的协议，可以定义成http3.0基于UDP的安全可靠的http2.0协议。

21.http的两种连接模式

http协议是基于TCP/IP，并且使用了请求-应答的通信模式

http协议由两种连接模式，一种是持续连接，一种非持续连接。
1.非持续连接指的是服务器必须为每一个请求的对象建立和维护一个全新的连接
2.持续连接下，tcp连接默认不关闭，可以被多个请求复用。采用持续链接的好处是可以
避免每次建立tcp连接三次握手所花费的时间。

23.与缓存相关的HTTP请求头有哪些

强缓存：
·Expires
·Cache-Control

协商缓存
·Etag、If-None-Match
·Last-Modified、If-Modified-Since

24.强缓存和协商缓存

1.强缓存：：不会向服务器发送请求，直接从缓存中读取资源，再chrome控制台的Network
选项中可以看到请求返回200的状态码，并且显示from disk cache或from memory cache
两种（灰色表示缓存）。

2.协商缓存：向服务器发送请求，服务器会根据这个请求的request header的一些参数来
判断是否命中协商缓存，如果命中，则返回304状态码并带上新的response header通知浏览
器从缓存中读取资源。

共同点：都是从客户端缓存中读取资源；区别是强缓存不会发请求，协商缓存会发请求。

25.HTTP的keep-alive有什么作用？

http1.0默认关闭，需要手动开启。http1.1后默认开启

作用：是客户端到服务器端的连接持续有效（长连接），当出现对服务器的后续请求时，
keep-Alive功能避免了建立或者重新建立连接。

使用方法：再请求头中加上Connection:keep-alive

优点：
·减少的CPU和内存的占用（因为要打开的连接数变少了，复用了连接）
·减少了后续请求的延迟（无需在进行握手）

缺点：本来可以是释放的资源仍然被占用。有的请求已经结束了，但是一直连接着。

解决方法：服务器设置过期时间和请求次数，超过这个时间或者次数就断掉连接。


26.OSI的七层模型是什么

ISO于1978年开发的一套标准架构ISO模型，被引用来说明数据通信协议的结构和功能。

OSI在功能上可以分为两组：

网络群组：物理层、数据链路层、网络层
使用者群组：传输层、会话层、表示层、应用层

OSI七层         TCP/IP四层
网络模型        概念模型    对应网络协议

7：应用层       应用层      HTTP、RTSP TFTP（简单文本传输协议）、FTP、NFS（数域筛法，数据加密）、WAIS（广域信息查询系统）
6：表示层       应用层      Telnet（internet远程登陆服务的标准协议）、Rlogin、SNMP（网络管理协议）、Gopher
5：会话层       应用层      SMTP（简单邮件传输协议）、DNS（域名系统）
4：传输层       传输层      TCP（传输控制协议）、UDP（用户数据报协议）
3：网络层       网络层      ARP（地理解析协议）、RARP、AKP、UUCP
2：数据链路层   数据链路层  
1：物理层       物理层      SMTP（邮件传输协议）、DNS（域名系统）


二、HTTPS

1.什么是HTTPS协议

超文本安全协议（Hypertext Transfer Protocol Secure，简称：HTTPS）是一种通过
计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，利用SSL/TLS来加密数据包。
HTTPS的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。

  HTTP    |    加|     HTTP      ⬆ 解
   TCP    |    密⬇ 安全层 SSL/TLS | 密
   IP     |            TCP
数据链路层 |            IP
          |         数据链路层
          |  
  HTTP    |           HTTPS

HTTP采用明文传输信息，存在信息窃听、信息篡改和信息劫持的风险，而协议TLS\SSL具有
身份验证、信息加密和完整性校验的功能，可能避免此类问题发生。

安全层的主要职责就是对发起的http请求的数据进行加密操作和对接收到的http的内容进行
解密操作。


2.TLS/SSL的工作原理

TLS全称安全传输层协议（Transport Layer Security）及其前身安全套接层（Secure Socket
Layer，缩写ssl）是介于TCP和http之间的一层安全协议，不影响原有的TCP协议和http协议，
所以使用HTTPS基本上不需要对HTTP页面进行太多的改造。


TLS/SSL的功能实现主要依赖三类基本算法：散列hash、对称加密、非对称加密。这三类算法
的作用如下：
·散列算法用来验证信息的完整性
·对称加密算法采用协商的密钥对数据加密
·非对称加密实现身份和密钥协商

TLS/SSL =  RSA ECC DH      |  AES DES RC4          |   MD5 SHA
           非对称加密       |   对称加密             |   散列算法
                           |                       |
           ·1 v N          |  ·1 v 1               |   ·函数不可逆
           ·客户端共享公钥  |  ·服务器和客户端共享    |   ·对输入敏感
           ·服务器掌握私钥  |   相同密钥             |   ·输出长度固定
           ·客户端信息只能  |  ·不同客户端密钥不同    |
           服务器解密       |  ·服务器其维护多个密钥  |
           ·客户端向服务器  |  ·密钥协商是安全基础    |
           发送唯一信息     |                       |
                           |                       |
                           |                       |
           身份验证     对称密钥                   加密
           密钥协商 ------------- 信息加密 ---------------- 完整校验



3.对称加密、非对称加密是什么，有什么区别？

对称加密和非对称加密是安全层里的加密算法

对称加密

·对称加密的特点是文件加密和解密使用相同的密钥，即加密密钥也可以用作解密密钥

这种方法再密码学中叫做对称加密算法，对称加密算法使用启来简单快捷，密钥较短，
且破译困难。

通信的双方都使用同一个密钥进行加密，解密，如此，两个人事先约定的暗号，就属于
对称加密。


优点：计算量小、加密速度快、加密效率高。

缺点：

在数据传送前，发送放和接收放必须商定好密钥，然后双方保存好密钥。
如果一方的密钥被泄露，那么加密信息也就不安全了。

最不安全的地方，就在于第一开始，互相约定密钥的时候！！传递密钥。

使用场景：本地数据加密、https通信、网络传输等。


非对称加密

通信的双方使用不同的密钥进行加密解密，即密钥对（私钥 + 公钥）

特征：私钥可以解密公钥加密的内容，公钥可以解密私钥加密的内容

非对称加密的特点是：

·优点：非对称加密与对称加密相比其安全性更好。
·缺点：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。

使用场景：https会话前期、CA数字证书、信息加密、登录认证

4.数字证书是什么？

使用一种HASH算法来对公钥和其他信息进行加密，生成一个信息摘要，然后让有公信力的
认证中心（简称CA）用它的私钥对信息摘要加密，形成签名。最后将原始的信息和签名
合在一起，称为数字证书。当接收方接收到数字证书的时候，先根据原始信息使用同样的
hash算法生成一个摘要，然后使用公证处的公钥对数字证书中的摘要进行解密，最后将
解密的摘要和生成的摘要进行对比，就能发现得到的信息是否被改变。

4.2数字证书的作用。

没办法确定得到的公钥就是安全的公钥，可能存在中间人，截取了对方发给我们的公钥，
然后将它自己的公钥发送给我们，当我们使用它的公钥加密后发送信息，就可以被他用
私钥解密，然后他伪装成我们以同样的方法向对方发送信息，这样我们的信息就被窃取了
然而我们还不知道。为了解决这样的问题，可以使用数字证书。

4.3数字签名是什么？

数字签名是先用CA自带的hash算法计算出证书内容的一个摘要，然后使用ca私密进行加密，
组成数字签名。

当别人把他的数字证书发过来时，接收方用同样的算法再次生成摘要，用ca公钥解密后得到
ca生成的摘要，两者进行对比后，就能确定中间是否别人篡改。这样就能最大程度的保证
通信 的安全了。


5.HTTPS通信（握手）过程

HTTPS的通信过程如下：

0.客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端
支持的加密方式。
1.服务器端接收到请求后，确认双方使用的加密方式、并给出服务器的证书、以及一个服务器
生成的随机数。
2.客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个
随机数，然后发给服务器。并且还会提供一个前面所有内容的hash的值，用来供服务器校验。
3.服务器使用自己的私钥，来解密客户端发送过来的随机数。并提供前面所有内容的hash值来
提供客户端校验。
4.客户端和服务器端根据约定的加密方式使用前面的三个随机数，生成对话密钥，以后的对话
过程都是用这个密钥来加密信息。

6.https的优缺点

https的优点如下：

·使用https协议可以认证用户和服务器，确保把数据发送到正确的客户端和服务器；
·使用https协议可以进行加密传输、身份认证，通信更加安全，防止数据在传输过程中被
窃取、修改，确保数据安全性；
·https是现行架构下最安全的解决方案，虽然不是绝对安全，但是大幅增加了中间人攻击的成本；

https的缺点：

·https需要做服务器和客户端双方的加密和机密处理，耗费更多服务器资源，过程复杂；
·https协议握手阶段比较费时，增加页面的加载时间；
·ssl证书是收费的，功能越强大的证书费用越高
·HTTPS连接服务器端资源占用高很多，支持访客稍多的网站需要投入更大的成本；
·ssl证书需要绑定IP，不能再同一个ip上绑定多个域名。

7.https是如何保证安全的？

结合对称加密和非对称加密两种加密方式，将对称加密的密钥使用非对称加密的公钥进行加密，
然后发送出去，接收方使用私钥进行解密得到对称加密的密钥，然后双方可以使用对称加密来
进行沟通。

这个时候还需要一个去哪的第三方颁发的证书（ca），证明身份的身份，防止被中间人攻击。
为了防止中间人篡改证书，需要用到数字签名这个技术

数字签名就是用ca自带的HASH算法对证书的内容进行HASH得到一个摘要，再用ca的私钥加密，
最终组成数字签名。当别人把他的证书发过来的时候，我在用同样的hash算法，再次生成消息
摘要，然后用ca的公钥对数字签名解密，得到ca创建的消息摘要，两者一比，就知道中间有没
有被人篡改了。这个时候就能最大程度保证通信的安全了。