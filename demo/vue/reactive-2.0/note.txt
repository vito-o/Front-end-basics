依赖

在正式讲解依赖收集之前，我们先看看什么是依赖。举一个生活中的例子：淘宝购物。现在淘宝某店铺
上有一块显卡处于预售阶段，如果我们像买的化，我们可以点击预售提醒，当显卡开始卖的时候，淘宝
为我们推送一条消息，我们看到消息后，可以开始购买。

将这个例子抽象以下就是发布-订阅模式：卖家点击预售提醒，就相当于淘宝上登记了自己的信息（订阅），
淘宝则会将卖家的信息保存在一个数据结构中（比如数组）。显卡正式开始购买时，淘宝会通知所有的买家：
显卡开卖了（发布），买家会根据这个消息进行一些动作（比如买回来挖矿）

在vue响应式系统中，显卡对应数据，那么例子中的买家对应什么呢？就是一个抽象的类：Watcher。

每个Watcher实例订阅一个或者多个数据，这些数据也被称为watcher的依赖（商品就是买家的依赖）；
当依赖发生变化，Watcher实例会接收到数据发生变化这条消息。之后会执行一个回调函数来实现某些功能，
比如更新页面（买家进行一些动作）。


其实前文例子中还有一个点我们尚未提到：显卡例子中说到，淘宝会将买家信息保存在一个数组中，那我们
的响应式系统中也应该有一个数组来保存买家信息，也就是watcher

总结一下我们需要实现的功能：

1.有一个数组来存储watcher
2.watcher实例需要订阅（依赖）数据，也就是获取依赖或者收集依赖
3.watcher的依赖发生变化时触发watcher的回调函数，也就是派发更新

每个数据都应该维护一个数组自己的数组，该数组来存方依赖自己的watcher，我们可以在defineReactive
中定义一个数组dep，这样通过闭包，每个属性就能拥有一个属于自己的dep


依赖收集

现在我们把目光集中到页面的初次渲染过程中（暂时忽略渲染函数和虚拟DOM等部分）：渲染引擎会解析模板，
比如引擎遇到了一个插值表达式，如果我们此时实例化一个watcher，会发生什么事情呢？从Watcher的代码
可以看到，实例化时会执行get方法，get方法的作用就是获取自己依赖的数据，而我们重写了数据的访问行为，
为每个数据定义了getter，因此getter函数就会执行，如果我们在getter中把当前的watcher添加到dep数组
中（淘宝的登记买家信息），不久能够完成依赖收集了吗。

注意：执行到getter时，new Watcher()的get方法还没有执行完毕。

new Watcher()时执行constructor，调用了实例的get方法，实例的get方法会读取数据的值，从而触发了
数据的getter，getter执行完毕后，实例的get方法执行完毕，并返回值，constructor执行完毕，实例化
完毕。

有些同学可能会有疑惑：明明时watcher收集依赖，应该时watcher收集数据，怎么变成了数据的dep收集
watcher了呢？由此疑问的同学可以再看一下前面淘宝例子（时淘宝记录了用户信息），或者深入了解发布-
订阅模式。

通过上面的分析，我们只需要对getter进行一些修改：

问题又来了，watcher这个变量从哪里来的呢？我们是在模板编译函数中实例化watcher的，getter中取不到
这个实例啊。解决方法也很简单，将watcher实例放到全局不就行了吗？比如放到window.target上。因此，
Watcher的get方法做如下修改：

这样，将get方法中的dep.push(watcher)修改外dep.push(window.target)即可。

注意，不能这样写window.target = new Watcher()。因为执行到getter的时候，实例化watcher还没有
完成，所以window.target还是undefined

依赖收集过程：渲染页面时碰到插值表达式，v-bind等需要数据等地方，会实例化一个watcher，实例化
watcher就会对依赖的数据求值，从而触发getter，数据的getter函数就会添加依赖自己的watcher，从而
完成依赖收集。我们可以理解为watcher在收集依赖，而代码的实现方式是在数据中存储依赖自己的watcher。

细心的读者可能会发现，利用这种方法，每遇到一个插值表达式就会新建一个watcher，这样每个节点就会
对应一个watcher。实际上这个是vue1的做法，以节点为单位进行更新，力度较细。而vue2的做法是每个组件
对应一个watcher，实例化watcher时传入的也不再是一个expression，而是渲染函数，渲染函数由组件的
模板转换而来，这样一个组件的watcher就能收集到自己的所有依赖，以组件为单位进行更新，是一种中等
粒度的方式。要实现vue2的响应式系统设计到很多其他东西，比如组件化，虚拟DOM等，而这个系列文章只
专注于数据响应式的原理，英雌不能实现vue2，但是两者关于响应式的方面，原理相同。

派发更新

实现依赖收集后，我们最后要实现的功能是派发更新，也就是依赖变化时触发watcher的回调。从依赖收集部分
我们知道，获取哪个数据，也就是说触发哪个数据的getter，就说明watcher依赖哪个数据，那数据变化的时候
如何通知watcher呢？相信很多同学已经猜到了：在setter中派发更新。

2.window.target

在watcher的get方法中

get() {
  window.target = this;
  const value = parsePath(this.data, this.expression)
  return value;
}


大家可能注意到了，我们没有重置window.target。有些同学可能认为这没有什么问题，但是考虑如下场景：
有一个对象obj:{a:1, b:2}我们先实例化了一个watcher1，watcher1依赖obj.a，那么window.target就是
watcher1。之后我们再访问了obj.b，会发生什么呢？访问obj.b会触发obj.b的getter，getter会调用
dep.depend()，那么obj.b的dep就会收集window.target,也就是watcher1，这就导致watcher1依赖了
obj.b，但事实并非如此。

通过上面的分析能够看出，window.target的含义就是当前执行上下文中的watcher实例。由于js单线程
的特性，同一时刻只有一个watcher的代码在执行，因此window.target就是当前正在处于实例化过程中的
watcher。

3.update方法

我们之前实现的update方法如下：

update(){
  this.value = parsePath(this.data, this.expression)
  this.cb()
}

大家回顾一下vm.$watch方法，我们可以在定义的回调中访问this，并且该回调可以接收到监听数据的新值和
旧值，因此做如下修改

update(){
  const oldValue = this.value;
  this.value = parsePath(this.data, this.expression)
  this.cb.call(this.data, this.value, oldValue)
}

在vue源码中，我们会看到这样一个变量：targetStack，看起来好像和我们的window.target有点关系，
没错确实有关系，设想一个这样的场景：我们由两个嵌套的父子组件，渲染父组件时会新建一个父组件的
watcher，渲染过程中发现还有一个子组件，就会开始渲染子组件，也会新建一个子组件的watcher。在我们
的实现中，新建父组件watcher时，window.target会指向父组件watcher，之后新建子组件watcher，
window.target将被子组件watcher覆盖，子组件渲染完毕，回到父组件watcher时，window.target变成了
null，就会出现问题，因此，我们用一个栈结构来保存watcher，

此外，vue中使用Dep.target而不是window.target来保存当前watcher，这一点影响不大，只要能保证
有一个全局唯一的变量来保存当前的watcher即可


总结一下我们需要实现的功能：

1.调用observe(obj)，将obj设置为响应式对象，observe函数，Observe，defineReactive函数三者为
相互调用，从而递归地将obj设置为响应式对象
2.渲染页面时实例化watcher，这个过程会读取依赖数据的值，从而完成在getter中获取依赖
3.依赖变化时触发setter，从而派发更新，执行回调，完成在setter中派发更新。


1.为什么要对数组特殊处理

上一篇文章讲了vue数据响应式的基本原理，结尾提到了，我们要对数据进行一个单独的处理。

如果我们访问和获取arr的值，getter和setter也会被触发，这不是可以吗？但是如果arr.unshift(0)呢？
数组的每个元素要依次向后移动一位，这就会触发getter和setter导致依赖发生变化。由于数组是顺序结构，
所以索引（key)和值不是绑定的，因此这种护理方法是有问题的。

那既然不能监听数组的索引，那就监听数组本身吧。vue对js中7种会改变数组的方法进行了重写：
push,pop,unshift,shift,splice,reverse,sort.那么，我们就要对Observer进行修改了：


关键之处就在于代理原型

2.代理原型

相信大家对原型链比较熟悉了，当我们调用arr.push()的时候，实际上调用的是Array.prototype.push，我们
像对push方法进行特殊处理，除了重写该方法，还有一种手段，就是设置一个代理原型。

我们在数组和Array.prototype之间增加一层代理来实现派发更新（依赖收集部分后面单独讲），数组调用代理
原型的方法来派发更新，代理原型再调用真实原型的方法实现原有的功能：

问题来了，我们如何派发更新呢？对于对象，我们使用dep.notify来派发更新，所以能够拿到dep数组，因为我们
利用getter和setter形成了闭包，保存dep数组，并且这样能够保证每个属性都有属于自己的dep。那数组呢？如果
再array.js种定义一个dep，那所有的数组都会共享这个dep，显然是不行的，因此，vue再每个对象身上添加了
一个自定义属性：__ob__，这个属性保存自己的Observer实例，然后再Observer上添加一个属性dep不久可以了吗？

3.__ob__属性

对observe做一个修改


到这里，我们通过在对象身上新增一个__ob__属性，完成了数组的派发更新，接下来是依赖收集


4.依赖收集

在将依赖收集之前，我们先看一下__ob__这个属性

const ob = {
  arr: [
    {
      a: 1
    }
  ]
}

执行observe(obj)后，obj变成了下面的样子
obj: {
  arr: [
    {
      a: 1,
      __ob__: {...}
    },
    __ob__: {...}
  ],
  __ob__: {...}
}

我们的defineReactive函数中，为了递归地为数据设置响应式，调用了observe(val),而现在的observe()会
返回ob，也就是value.__ob__，那我们不放接收一下这个返回值

那这个childOb是什么呢？比如看obj.arr吧：

1.执行observe(obj)会触发new Observer(obj)，设置了obj.__ob__属性，接下来遍历obj的属性，执行
defineReactive(obj, arr, obj.arr)

2.执行defineReactive(obj, arr, obj.arr)时，会执行observe(obj.arr),返回值就是obj.arr.__ob__
也就是说，每个属性（比如arr属性）的getter和setter不仅通过闭包保存了自己的dep，而且通过__ob__保存了
自己的Observer实例，Observer实例上又有一个dep属性。如果添加以下代码：

get: function reactiveGetter() {
  if(Dep.target) {
    dep.depend()
    childOb.dep.depend()
  }
  return val;
}


就会有下面的情况：每个属性的getter和setter通过闭包保存了dep，这个dep收集依赖自己的watcher，闭包中
还保存了childOb，childOb.dep也保存了依赖自己的watcher，这两个属性保存的watcher相同，那前文讲到
的派发更新就能够实现了
obj.prop闭包中保存的childOb就是obj.prop.__ob__,闭包中的dep于childOb.dep保存的内容相同

但是dep和childOb.dep保存的watcher并不完全相同，看obj[arr][0].a，由于这是一个基本类型，对它调用
observe会直接返回，因此所有没有__ob__属性，但是这个属性闭包中的dep能够收集到依赖自己的watcher。




